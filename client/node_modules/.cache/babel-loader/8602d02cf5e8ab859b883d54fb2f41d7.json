{"ast":null,"code":"import _toConsumableArray from \"/Applications/MAMP/htdocs/project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Applications/MAMP/htdocs/project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport carTableMock from \"./carTableMock\";\nimport MockUtils from \"./mock.utils\";\nexport default function mockProducts(mock) {\n  mock.onPost(\"api/products\").reply(function (_ref) {\n    var data = _ref.data;\n\n    var _JSON$parse = JSON.parse(data),\n        product = _JSON$parse.product;\n\n    var _product$model = product.model,\n        model = _product$model === void 0 ? \"\" : _product$model,\n        _product$manufacture = product.manufacture,\n        manufacture = _product$manufacture === void 0 ? \"\" : _product$manufacture,\n        _product$modelYear = product.modelYear,\n        modelYear = _product$modelYear === void 0 ? 2000 : _product$modelYear,\n        _product$mileage = product.mileage,\n        mileage = _product$mileage === void 0 ? 0 : _product$mileage,\n        _product$description = product.description,\n        description = _product$description === void 0 ? \"\" : _product$description,\n        _product$color = product.color,\n        color = _product$color === void 0 ? \"Black\" : _product$color,\n        _product$price = product.price,\n        price = _product$price === void 0 ? 1000 : _product$price,\n        _product$condition = product.condition,\n        condition = _product$condition === void 0 ? 0 : _product$condition,\n        _product$status = product.status,\n        status = _product$status === void 0 ? 0 : _product$status,\n        _product$VINCode = product.VINCode,\n        VINCode = _product$VINCode === void 0 ? \"\" : _product$VINCode;\n    var id = generateProductId();\n    var newProduct = {\n      id: id,\n      model: model,\n      manufacture: manufacture,\n      modelYear: modelYear,\n      mileage: mileage,\n      description: description,\n      color: color,\n      price: price,\n      condition: condition,\n      status: status,\n      VINCode: VINCode\n    };\n    carTableMock.push(newProduct);\n    return [200, {\n      product: newProduct\n    }];\n  });\n  mock.onPost(\"api/products/find\").reply(function (config) {\n    var mockUtils = new MockUtils();\n\n    var _JSON$parse2 = JSON.parse(config.data),\n        queryParams = _JSON$parse2.queryParams;\n\n    var filteredProducts = mockUtils.baseFilter(carTableMock, queryParams);\n    return [200, filteredProducts];\n  });\n  mock.onPost(\"api/products/deleteProducts\").reply(function (config) {\n    var _JSON$parse3 = JSON.parse(config.data),\n        ids = _JSON$parse3.ids;\n\n    ids.forEach(function (id) {\n      var index = carTableMock.findIndex(function (el) {\n        return el.id === id;\n      });\n\n      if (index > -1) {\n        carTableMock.splice(index, 1);\n      }\n    });\n    return [200];\n  });\n  mock.onPost(\"api/products/updateStatusForProducts\").reply(function (config) {\n    var _JSON$parse4 = JSON.parse(config.data),\n        ids = _JSON$parse4.ids,\n        status = _JSON$parse4.status;\n\n    carTableMock.forEach(function (el) {\n      if (ids.findIndex(function (id) {\n        return id === el.id;\n      }) > -1) {\n        el.status = status;\n      }\n    });\n    return [200];\n  });\n  mock.onGet(/api\\/products\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/products\\/(\\d+)/)[1];\n    var product = carTableMock.find(function (el) {\n      return el.id === +id;\n    });\n\n    if (!product) {\n      return [400];\n    }\n\n    return [200, product];\n  });\n  mock.onPut(/api\\/products\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/products\\/(\\d+)/)[1];\n\n    var _JSON$parse5 = JSON.parse(config.data),\n        product = _JSON$parse5.product;\n\n    var index = carTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n\n    if (!index) {\n      return [400];\n    }\n\n    carTableMock[index] = _objectSpread({}, product);\n    return [200];\n  });\n  mock.onDelete(/api\\/products\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/products\\/(\\d+)/)[1];\n    var index = carTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n    carTableMock.splice(index, 1);\n\n    if (!index === -1) {\n      return [400];\n    }\n\n    return [200];\n  });\n}\n\nfunction generateProductId() {\n  var ids = carTableMock.map(function (el) {\n    return el.id;\n  });\n  var maxId = Math.max.apply(Math, _toConsumableArray(ids));\n  return maxId + 1;\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/project/client/src/app/modules/ECommerce/__mocks__/mockProduct.js"],"names":["carTableMock","MockUtils","mockProducts","mock","onPost","reply","data","JSON","parse","product","model","manufacture","modelYear","mileage","description","color","price","condition","status","VINCode","id","generateProductId","newProduct","push","config","mockUtils","queryParams","filteredProducts","baseFilter","ids","forEach","index","findIndex","el","splice","onGet","url","match","find","onPut","onDelete","map","maxId","Math","max"],"mappings":"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","sourcesContent":["import carTableMock from \"./carTableMock\";\r\nimport MockUtils from \"./mock.utils\";\r\n\r\nexport default function mockProducts(mock) {\r\n  mock.onPost(\"api/products\").reply(({ data }) => {\r\n    const { product } = JSON.parse(data);\r\n    const {\r\n      model = \"\",\r\n      manufacture = \"\",\r\n      modelYear = 2000,\r\n      mileage = 0,\r\n      description = \"\",\r\n      color = \"Black\",\r\n      price = 1000,\r\n      condition = 0,\r\n      status = 0,\r\n      VINCode = \"\"\r\n    } = product;\r\n\r\n    const id = generateProductId();\r\n    const newProduct = {\r\n      id,\r\n      model,\r\n      manufacture,\r\n      modelYear,\r\n      mileage,\r\n      description,\r\n      color,\r\n      price,\r\n      condition,\r\n      status,\r\n      VINCode\r\n    };\r\n    carTableMock.push(newProduct);\r\n    return [200, { product: newProduct }];\r\n  });\r\n\r\n  mock.onPost(\"api/products/find\").reply(config => {\r\n    const mockUtils = new MockUtils();\r\n    const { queryParams } = JSON.parse(config.data);\r\n    const filteredProducts = mockUtils.baseFilter(carTableMock, queryParams);\r\n    return [200, filteredProducts];\r\n  });\r\n\r\n  mock.onPost(\"api/products/deleteProducts\").reply(config => {\r\n    const { ids } = JSON.parse(config.data);\r\n    ids.forEach(id => {\r\n      const index = carTableMock.findIndex(el => el.id === id);\r\n      if (index > -1) {\r\n        carTableMock.splice(index, 1);\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onPost(\"api/products/updateStatusForProducts\").reply(config => {\r\n    const { ids, status } = JSON.parse(config.data);\r\n    carTableMock.forEach(el => {\r\n      if (ids.findIndex(id => id === el.id) > -1) {\r\n        el.status = status;\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onGet(/api\\/products\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/products\\/(\\d+)/)[1];\r\n    const product = carTableMock.find(el => el.id === +id);\r\n    if (!product) {\r\n      return [400];\r\n    }\r\n\r\n    return [200, product];\r\n  });\r\n\r\n  mock.onPut(/api\\/products\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/products\\/(\\d+)/)[1];\r\n    const { product } = JSON.parse(config.data);\r\n    const index = carTableMock.findIndex(el => el.id === +id);\r\n    if (!index) {\r\n      return [400];\r\n    }\r\n\r\n    carTableMock[index] = { ...product };\r\n    return [200];\r\n  });\r\n\r\n  mock.onDelete(/api\\/products\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/products\\/(\\d+)/)[1];\r\n    const index = carTableMock.findIndex(el => el.id === +id);\r\n    carTableMock.splice(index, 1);\r\n    if (!index === -1) {\r\n      return [400];\r\n    }\r\n\r\n    return [200];\r\n  });\r\n}\r\n\r\nfunction generateProductId() {\r\n  const ids = carTableMock.map(el => el.id);\r\n  const maxId = Math.max(...ids);\r\n  return maxId + 1;\r\n}"]},"metadata":{},"sourceType":"module"}