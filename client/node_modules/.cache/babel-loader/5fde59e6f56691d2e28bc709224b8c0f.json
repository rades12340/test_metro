{"ast":null,"code":"import * as requestFromServer from \"./specificationsCrud\";\nimport { specificationsSlice, callTypes } from \"./specificationsSlice\";\nvar actions = specificationsSlice.actions;\nexport var fetchSpecifications = function fetchSpecifications(queryParams, productId) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.list\n    }));\n\n    if (!productId) {\n      return dispatch(actions.specificationsFetched({\n        totalCount: 0,\n        entities: null\n      }));\n    }\n\n    return requestFromServer.findSpecifications(queryParams, productId).then(function (response) {\n      var _response$data = response.data,\n          totalCount = _response$data.totalCount,\n          entities = _response$data.entities;\n      dispatch(actions.specificationsFetched({\n        totalCount: totalCount,\n        entities: entities\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't find specifications\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.list\n      }));\n    });\n  };\n};\nexport var fetchSpecification = function fetchSpecification(id) {\n  return function (dispatch) {\n    if (!id) {\n      return dispatch(actions.specificationFetched({\n        specificationForEdit: undefined\n      }));\n    }\n\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.getSpecificationById(id).then(function (response) {\n      var specification = response.data;\n      dispatch(actions.specificationFetched({\n        specificationForEdit: specification\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't find specification\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var deleteSpecification = function deleteSpecification(id) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.deleteSpecification(id).then(function (response) {\n      dispatch(actions.specificationDeleted({\n        id: id\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't delete specification\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var createSpecification = function createSpecification(specificationForCreation) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.createSpecification(specificationForCreation).then(function (response) {\n      var specification = response.data.specification;\n      dispatch(actions.specificationCreated({\n        specification: specification\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't create specification\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var updateSpecification = function updateSpecification(specification) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.updateSpecification(specification).then(function () {\n      dispatch(actions.specificationUpdated({\n        specification: specification\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't update specification\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var deleteSpecifications = function deleteSpecifications(ids) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.deleteSpecifications(ids).then(function () {\n      dispatch(actions.specificationsDeleted({\n        ids: ids\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't delete specifications\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/Applications/MAMP/htdocs/project/client/src/app/modules/ECommerce/_redux/specifications/specificationsActions.js"],"names":["requestFromServer","specificationsSlice","callTypes","actions","fetchSpecifications","queryParams","productId","dispatch","startCall","callType","list","specificationsFetched","totalCount","entities","findSpecifications","then","response","data","catch","error","clientMessage","catchError","fetchSpecification","id","specificationFetched","specificationForEdit","undefined","action","getSpecificationById","specification","deleteSpecification","specificationDeleted","createSpecification","specificationForCreation","specificationCreated","updateSpecification","specificationUpdated","deleteSpecifications","ids","specificationsDeleted"],"mappings":"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","sourcesContent":["import * as requestFromServer from \"./specificationsCrud\";\r\nimport {specificationsSlice, callTypes} from \"./specificationsSlice\";\r\n\r\nconst {actions} = specificationsSlice;\r\n\r\nexport const fetchSpecifications = (queryParams, productId) => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.list }));\r\n  if (!productId) {\r\n    return dispatch(\r\n      actions.specificationsFetched({ totalCount: 0, entities: null })\r\n    );\r\n  }\r\n\r\n  return requestFromServer\r\n    .findSpecifications(queryParams, productId)\r\n    .then(response => {\r\n      const { totalCount, entities } = response.data;\r\n      dispatch(actions.specificationsFetched({ totalCount, entities }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find specifications\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.list }));\r\n    });\r\n};\r\n\r\nexport const fetchSpecification = id => dispatch => {\r\n  if (!id) {\r\n    return dispatch(\r\n      actions.specificationFetched({ specificationForEdit: undefined })\r\n    );\r\n  }\r\n\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .getSpecificationById(id)\r\n    .then(response => {\r\n      const specification = response.data;\r\n      dispatch(\r\n        actions.specificationFetched({ specificationForEdit: specification })\r\n      );\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find specification\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteSpecification = id => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteSpecification(id)\r\n    .then(response => {\r\n      dispatch(actions.specificationDeleted({ id }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete specification\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const createSpecification = specificationForCreation => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .createSpecification(specificationForCreation)\r\n    .then(response => {\r\n      const { specification } = response.data;\r\n      dispatch(actions.specificationCreated({ specification }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't create specification\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateSpecification = specification => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateSpecification(specification)\r\n    .then(() => {\r\n      dispatch(actions.specificationUpdated({ specification }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update specification\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteSpecifications = ids => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteSpecifications(ids)\r\n    .then(() => {\r\n      dispatch(actions.specificationsDeleted({ ids }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete specifications\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}