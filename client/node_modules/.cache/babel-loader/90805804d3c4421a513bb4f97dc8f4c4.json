{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/project/client/src/app/modules/ECommerce/pages/products/product-specifications/SpecificationsLoadingDialog.js\";\nimport React, { useEffect } from \"react\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport { LoadingDialog } from \"../../../../../../_metronic/_partials/controls\";\nexport function SpecificationsLoadingDialog() {\n  var _useSelector = useSelector(function (state) {\n    return {\n      isLoading: state.specifications.listLoading\n    };\n  }, shallowEqual),\n      isLoading = _useSelector.isLoading;\n\n  useEffect(function () {}, [isLoading]);\n  return /*#__PURE__*/React.createElement(LoadingDialog, {\n    isLoading: isLoading,\n    text: \"Loading ...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 10\n    }\n  });\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/project/client/src/app/modules/ECommerce/pages/products/product-specifications/SpecificationsLoadingDialog.js"],"names":["React","useEffect","shallowEqual","useSelector","LoadingDialog","SpecificationsLoadingDialog","state","isLoading","specifications","listLoading"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,aAA1C;AACA,SAASC,aAAT,QAA8B,gDAA9B;AAEA,OAAO,SAASC,2BAAT,GAAuC;AAAA,qBACtBF,WAAW,CAC/B,UAACG,KAAD;AAAA,WAAY;AAAEC,MAAAA,SAAS,EAAED,KAAK,CAACE,cAAN,CAAqBC;AAAlC,KAAZ;AAAA,GAD+B,EAE/BP,YAF+B,CADW;AAAA,MACpCK,SADoC,gBACpCA,SADoC;;AAK5CN,EAAAA,SAAS,CAAC,YAAM,CAAE,CAAT,EAAW,CAACM,SAAD,CAAX,CAAT;AACA,sBAAO,oBAAC,aAAD;AAAe,IAAA,SAAS,EAAEA,SAA1B;AAAqC,IAAA,IAAI,EAAC,aAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\nimport { LoadingDialog } from \"../../../../../../_metronic/_partials/controls\";\r\n\r\nexport function SpecificationsLoadingDialog() {\r\n  const { isLoading } = useSelector(\r\n    (state) => ({ isLoading: state.specifications.listLoading }),\r\n    shallowEqual\r\n  );\r\n  useEffect(() => {}, [isLoading]);\r\n  return <LoadingDialog isLoading={isLoading} text=\"Loading ...\" />;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}