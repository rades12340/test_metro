{"ast":null,"code":"import * as requestFromServer from \"./customersCrud\";\nimport { customersSlice, callTypes } from \"./customersSlice\";\nvar actions = customersSlice.actions;\nexport var fetchCustomers = function fetchCustomers(queryParams) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.list\n    }));\n    return requestFromServer.findCustomers(queryParams).then(function (response) {\n      var _response$data = response.data,\n          totalCount = _response$data.totalCount,\n          entities = _response$data.entities;\n      dispatch(actions.customersFetched({\n        totalCount: totalCount,\n        entities: entities\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't find customers\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.list\n      }));\n    });\n  };\n};\nexport var fetchCustomer = function fetchCustomer(id) {\n  return function (dispatch) {\n    if (!id) {\n      return dispatch(actions.customerFetched({\n        customerForEdit: undefined\n      }));\n    }\n\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.getCustomerById(id).then(function (response) {\n      var customer = response.data;\n      dispatch(actions.customerFetched({\n        customerForEdit: customer\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't find customer\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var deleteCustomer = function deleteCustomer(id) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.deleteCustomer(id).then(function (response) {\n      dispatch(actions.customerDeleted({\n        id: id\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't delete customer\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var createCustomer = function createCustomer(customerForCreation) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.createCustomer(customerForCreation).then(function (response) {\n      var customer = response.data.customer;\n      dispatch(actions.customerCreated({\n        customer: customer\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't create customer\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var updateCustomer = function updateCustomer(customer) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.updateCustomer(customer).then(function () {\n      dispatch(actions.customerUpdated({\n        customer: customer\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't update customer\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var updateCustomersStatus = function updateCustomersStatus(ids, status) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.updateStatusForCustomers(ids, status).then(function () {\n      dispatch(actions.customersStatusUpdated({\n        ids: ids,\n        status: status\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't update customers status\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var deleteCustomers = function deleteCustomers(ids) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.deleteCustomers(ids).then(function () {\n      dispatch(actions.customersDeleted({\n        ids: ids\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't delete customers\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/Applications/MAMP/htdocs/project/client/src/app/modules/ECommerce/_redux/customers/customersActions.js"],"names":["requestFromServer","customersSlice","callTypes","actions","fetchCustomers","queryParams","dispatch","startCall","callType","list","findCustomers","then","response","data","totalCount","entities","customersFetched","catch","error","clientMessage","catchError","fetchCustomer","id","customerFetched","customerForEdit","undefined","action","getCustomerById","customer","deleteCustomer","customerDeleted","createCustomer","customerForCreation","customerCreated","updateCustomer","customerUpdated","updateCustomersStatus","ids","status","updateStatusForCustomers","customersStatusUpdated","deleteCustomers","customersDeleted"],"mappings":"AAAA,OAAO,KAAKA,iBAAZ,MAAmC,iBAAnC;AACA,SAAQC,cAAR,EAAwBC,SAAxB,QAAwC,kBAAxC;IAEOC,O,GAAWF,c,CAAXE,O;AAEP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,WAAW;AAAA,SAAI,UAAAC,QAAQ,EAAI;AACvDA,IAAAA,QAAQ,CAACH,OAAO,CAACI,SAAR,CAAkB;AAAEC,MAAAA,QAAQ,EAAEN,SAAS,CAACO;AAAtB,KAAlB,CAAD,CAAR;AACA,WAAOT,iBAAiB,CACrBU,aADI,CACUL,WADV,EAEJM,IAFI,CAEC,UAAAC,QAAQ,EAAI;AAAA,2BACiBA,QAAQ,CAACC,IAD1B;AAAA,UACRC,UADQ,kBACRA,UADQ;AAAA,UACIC,QADJ,kBACIA,QADJ;AAEhBT,MAAAA,QAAQ,CAACH,OAAO,CAACa,gBAAR,CAAyB;AAAEF,QAAAA,UAAU,EAAVA,UAAF;AAAcC,QAAAA,QAAQ,EAARA;AAAd,OAAzB,CAAD,CAAR;AACD,KALI,EAMJE,KANI,CAME,UAAAC,KAAK,EAAI;AACdA,MAAAA,KAAK,CAACC,aAAN,GAAsB,sBAAtB;AACAb,MAAAA,QAAQ,CAACH,OAAO,CAACiB,UAAR,CAAmB;AAAEF,QAAAA,KAAK,EAALA,KAAF;AAASV,QAAAA,QAAQ,EAAEN,SAAS,CAACO;AAA7B,OAAnB,CAAD,CAAR;AACD,KATI,CAAP;AAUD,GAZwC;AAAA,CAAlC;AAcP,OAAO,IAAMY,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,EAAE;AAAA,SAAI,UAAAhB,QAAQ,EAAI;AAC7C,QAAI,CAACgB,EAAL,EAAS;AACP,aAAOhB,QAAQ,CAACH,OAAO,CAACoB,eAAR,CAAwB;AAAEC,QAAAA,eAAe,EAAEC;AAAnB,OAAxB,CAAD,CAAf;AACD;;AAEDnB,IAAAA,QAAQ,CAACH,OAAO,CAACI,SAAR,CAAkB;AAAEC,MAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAAtB,KAAlB,CAAD,CAAR;AACA,WAAO1B,iBAAiB,CACrB2B,eADI,CACYL,EADZ,EAEJX,IAFI,CAEC,UAAAC,QAAQ,EAAI;AAChB,UAAMgB,QAAQ,GAAGhB,QAAQ,CAACC,IAA1B;AACAP,MAAAA,QAAQ,CAACH,OAAO,CAACoB,eAAR,CAAwB;AAAEC,QAAAA,eAAe,EAAEI;AAAnB,OAAxB,CAAD,CAAR;AACD,KALI,EAMJX,KANI,CAME,UAAAC,KAAK,EAAI;AACdA,MAAAA,KAAK,CAACC,aAAN,GAAsB,qBAAtB;AACAb,MAAAA,QAAQ,CAACH,OAAO,CAACiB,UAAR,CAAmB;AAAEF,QAAAA,KAAK,EAALA,KAAF;AAASV,QAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAA7B,OAAnB,CAAD,CAAR;AACD,KATI,CAAP;AAUD,GAhB8B;AAAA,CAAxB;AAkBP,OAAO,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAAAP,EAAE;AAAA,SAAI,UAAAhB,QAAQ,EAAI;AAC9CA,IAAAA,QAAQ,CAACH,OAAO,CAACI,SAAR,CAAkB;AAAEC,MAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAAtB,KAAlB,CAAD,CAAR;AACA,WAAO1B,iBAAiB,CACrB6B,cADI,CACWP,EADX,EAEJX,IAFI,CAEC,UAAAC,QAAQ,EAAI;AAChBN,MAAAA,QAAQ,CAACH,OAAO,CAAC2B,eAAR,CAAwB;AAAER,QAAAA,EAAE,EAAFA;AAAF,OAAxB,CAAD,CAAR;AACD,KAJI,EAKJL,KALI,CAKE,UAAAC,KAAK,EAAI;AACdA,MAAAA,KAAK,CAACC,aAAN,GAAsB,uBAAtB;AACAb,MAAAA,QAAQ,CAACH,OAAO,CAACiB,UAAR,CAAmB;AAAEF,QAAAA,KAAK,EAALA,KAAF;AAASV,QAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAA7B,OAAnB,CAAD,CAAR;AACD,KARI,CAAP;AASD,GAX+B;AAAA,CAAzB;AAaP,OAAO,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,mBAAmB;AAAA,SAAI,UAAA1B,QAAQ,EAAI;AAC/DA,IAAAA,QAAQ,CAACH,OAAO,CAACI,SAAR,CAAkB;AAAEC,MAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAAtB,KAAlB,CAAD,CAAR;AACA,WAAO1B,iBAAiB,CACrB+B,cADI,CACWC,mBADX,EAEJrB,IAFI,CAEC,UAAAC,QAAQ,EAAI;AAAA,UACRgB,QADQ,GACKhB,QAAQ,CAACC,IADd,CACRe,QADQ;AAEhBtB,MAAAA,QAAQ,CAACH,OAAO,CAAC8B,eAAR,CAAwB;AAAEL,QAAAA,QAAQ,EAARA;AAAF,OAAxB,CAAD,CAAR;AACD,KALI,EAMJX,KANI,CAME,UAAAC,KAAK,EAAI;AACdA,MAAAA,KAAK,CAACC,aAAN,GAAsB,uBAAtB;AACAb,MAAAA,QAAQ,CAACH,OAAO,CAACiB,UAAR,CAAmB;AAAEF,QAAAA,KAAK,EAALA,KAAF;AAASV,QAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAA7B,OAAnB,CAAD,CAAR;AACD,KATI,CAAP;AAUD,GAZgD;AAAA,CAA1C;AAcP,OAAO,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAAAN,QAAQ;AAAA,SAAI,UAAAtB,QAAQ,EAAI;AACpDA,IAAAA,QAAQ,CAACH,OAAO,CAACI,SAAR,CAAkB;AAAEC,MAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAAtB,KAAlB,CAAD,CAAR;AACA,WAAO1B,iBAAiB,CACrBkC,cADI,CACWN,QADX,EAEJjB,IAFI,CAEC,YAAM;AACVL,MAAAA,QAAQ,CAACH,OAAO,CAACgC,eAAR,CAAwB;AAAEP,QAAAA,QAAQ,EAARA;AAAF,OAAxB,CAAD,CAAR;AACD,KAJI,EAKJX,KALI,CAKE,UAAAC,KAAK,EAAI;AACdA,MAAAA,KAAK,CAACC,aAAN,GAAsB,uBAAtB;AACAb,MAAAA,QAAQ,CAACH,OAAO,CAACiB,UAAR,CAAmB;AAAEF,QAAAA,KAAK,EAALA,KAAF;AAASV,QAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAA7B,OAAnB,CAAD,CAAR;AACD,KARI,CAAP;AASD,GAXqC;AAAA,CAA/B;AAaP,OAAO,IAAMU,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,GAAD,EAAMC,MAAN;AAAA,SAAiB,UAAAhC,QAAQ,EAAI;AAChEA,IAAAA,QAAQ,CAACH,OAAO,CAACI,SAAR,CAAkB;AAAEC,MAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAAtB,KAAlB,CAAD,CAAR;AACA,WAAO1B,iBAAiB,CACrBuC,wBADI,CACqBF,GADrB,EAC0BC,MAD1B,EAEJ3B,IAFI,CAEC,YAAM;AACVL,MAAAA,QAAQ,CAACH,OAAO,CAACqC,sBAAR,CAA+B;AAAEH,QAAAA,GAAG,EAAHA,GAAF;AAAOC,QAAAA,MAAM,EAANA;AAAP,OAA/B,CAAD,CAAR;AACD,KAJI,EAKJrB,KALI,CAKE,UAAAC,KAAK,EAAI;AACdA,MAAAA,KAAK,CAACC,aAAN,GAAsB,+BAAtB;AACAb,MAAAA,QAAQ,CAACH,OAAO,CAACiB,UAAR,CAAmB;AAAEF,QAAAA,KAAK,EAALA,KAAF;AAASV,QAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAA7B,OAAnB,CAAD,CAAR;AACD,KARI,CAAP;AASD,GAXoC;AAAA,CAA9B;AAaP,OAAO,IAAMe,eAAe,GAAG,SAAlBA,eAAkB,CAAAJ,GAAG;AAAA,SAAI,UAAA/B,QAAQ,EAAI;AAChDA,IAAAA,QAAQ,CAACH,OAAO,CAACI,SAAR,CAAkB;AAAEC,MAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAAtB,KAAlB,CAAD,CAAR;AACA,WAAO1B,iBAAiB,CACrByC,eADI,CACYJ,GADZ,EAEJ1B,IAFI,CAEC,YAAM;AACVL,MAAAA,QAAQ,CAACH,OAAO,CAACuC,gBAAR,CAAyB;AAAEL,QAAAA,GAAG,EAAHA;AAAF,OAAzB,CAAD,CAAR;AACD,KAJI,EAKJpB,KALI,CAKE,UAAAC,KAAK,EAAI;AACdA,MAAAA,KAAK,CAACC,aAAN,GAAsB,wBAAtB;AACAb,MAAAA,QAAQ,CAACH,OAAO,CAACiB,UAAR,CAAmB;AAAEF,QAAAA,KAAK,EAALA,KAAF;AAASV,QAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAA7B,OAAnB,CAAD,CAAR;AACD,KARI,CAAP;AASD,GAXiC;AAAA,CAA3B","sourcesContent":["import * as requestFromServer from \"./customersCrud\";\r\nimport {customersSlice, callTypes} from \"./customersSlice\";\r\n\r\nconst {actions} = customersSlice;\r\n\r\nexport const fetchCustomers = queryParams => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.list }));\r\n  return requestFromServer\r\n    .findCustomers(queryParams)\r\n    .then(response => {\r\n      const { totalCount, entities } = response.data;\r\n      dispatch(actions.customersFetched({ totalCount, entities }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find customers\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.list }));\r\n    });\r\n};\r\n\r\nexport const fetchCustomer = id => dispatch => {\r\n  if (!id) {\r\n    return dispatch(actions.customerFetched({ customerForEdit: undefined }));\r\n  }\r\n\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .getCustomerById(id)\r\n    .then(response => {\r\n      const customer = response.data;\r\n      dispatch(actions.customerFetched({ customerForEdit: customer }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteCustomer = id => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteCustomer(id)\r\n    .then(response => {\r\n      dispatch(actions.customerDeleted({ id }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const createCustomer = customerForCreation => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .createCustomer(customerForCreation)\r\n    .then(response => {\r\n      const { customer } = response.data;\r\n      dispatch(actions.customerCreated({ customer }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't create customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateCustomer = customer => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateCustomer(customer)\r\n    .then(() => {\r\n      dispatch(actions.customerUpdated({ customer }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateCustomersStatus = (ids, status) => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateStatusForCustomers(ids, status)\r\n    .then(() => {\r\n      dispatch(actions.customersStatusUpdated({ ids, status }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update customers status\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteCustomers = ids => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteCustomers(ids)\r\n    .then(() => {\r\n      dispatch(actions.customersDeleted({ ids }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete customers\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}