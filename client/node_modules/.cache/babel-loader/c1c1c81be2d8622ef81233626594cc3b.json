{"ast":null,"code":"import createNextState from 'immer';\nexport { default as createNextState } from 'immer';\nimport { combineReducers, applyMiddleware, createStore, compose } from 'redux';\nexport * from 'redux';\nexport { createSelector } from 'reselect';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\n\nfunction createReducer(initialState, mapOrBuilderCallback) {\n  var actionsMap = typeof mapOrBuilderCallback === 'function' ? executeReducerBuilderCallback(mapOrBuilderCallback) : mapOrBuilderCallback;\n  return function (state, action) {\n    if (state === void 0) {\n      state = initialState;\n    } // @ts-ignore createNextState() produces an Immutable<Draft<S>> rather\n    // than an Immutable<S>, and TypeScript cannot find out how to reconcile\n    // these two types.\n\n\n    return createNextState(state, function (draft) {\n      var caseReducer = actionsMap[action.type];\n      return caseReducer ? caseReducer(draft, action) : undefined;\n    });\n  };\n}\n\nfunction executeReducerBuilderCallback(builderCallback) {\n  var actionsMap = {};\n  var builder = {\n    addCase: function addCase(typeOrActionCreator, reducer) {\n      var type = typeof typeOrActionCreator === 'string' ? typeOrActionCreator : typeOrActionCreator.type;\n\n      if (type in actionsMap) {\n        throw new Error('addCase cannot be called with two reducers for the same action type');\n      }\n\n      actionsMap[type] = reducer;\n      return builder;\n    }\n  };\n  builderCallback(builder);\n  return actionsMap;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/**\r\n * Returns true if the passed value is \"plain\" object, i.e. an object whose\r\n * protoype is the root `Object.prototype`. This includes objects created\r\n * using object literals, but not for instance for class instances.\r\n *\r\n * @param {any} value The value to inspect.\r\n * @returns {boolean} True if the argument appears to be a plain object.\r\n */\n\n\nfunction isPlainObject(value) {\n  if (typeof value !== 'object' || value === null) return false;\n  var proto = value;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(value) === proto;\n}\n/**\r\n * Returns true if the passed value is \"plain\", i.e. a value that is either\r\n * directly JSON-serializable (boolean, number, string, array, plain object)\r\n * or `undefined`.\r\n *\r\n * @param val The value to check.\r\n */\n\n\nfunction isPlain(val) {\n  return typeof val === 'undefined' || val === null || typeof val === 'string' || typeof val === 'boolean' || typeof val === 'number' || Array.isArray(val) || isPlainObject(val);\n}\n\nfunction findNonSerializableValue(value, path, isSerializable, getEntries) {\n  if (path === void 0) {\n    path = [];\n  }\n\n  if (isSerializable === void 0) {\n    isSerializable = isPlain;\n  }\n\n  var foundNestedSerializable;\n\n  if (!isSerializable(value)) {\n    return {\n      keyPath: path.join('.') || '<root>',\n      value: value\n    };\n  }\n\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n\n  var entries = getEntries != null ? getEntries(value) : Object.entries(value);\n\n  for (var _iterator = entries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var _ref2 = _ref,\n        property = _ref2[0],\n        nestedValue = _ref2[1];\n    var nestedPath = path.concat(property);\n\n    if (!isSerializable(nestedValue)) {\n      return {\n        keyPath: nestedPath.join('.'),\n        value: nestedValue\n      };\n    }\n\n    if (typeof nestedValue === 'object') {\n      foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries);\n\n      if (foundNestedSerializable) {\n        return foundNestedSerializable;\n      }\n    }\n  }\n\n  return false;\n}\n/**\r\n * Creates a middleware that, after every state change, checks if the new\r\n * state is serializable. If a non-serializable value is found within the\r\n * state, an error is printed to the console.\r\n *\r\n * @param options Middleware options.\r\n */\n\n\nfunction createSerializableStateInvariantMiddleware(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$isSerializab = _options.isSerializable,\n      isSerializable = _options$isSerializab === void 0 ? isPlain : _options$isSerializab,\n      getEntries = _options.getEntries,\n      _options$ignoredActio = _options.ignoredActions,\n      ignoredActions = _options$ignoredActio === void 0 ? [] : _options$ignoredActio;\n  return function (storeAPI) {\n    return function (next) {\n      return function (action) {\n        if (ignoredActions.length && ignoredActions.indexOf(action.type) !== -1) {\n          return next(action);\n        }\n\n        var foundActionNonSerializableValue = findNonSerializableValue(action, [], isSerializable, getEntries);\n\n        if (foundActionNonSerializableValue) {\n          var keyPath = foundActionNonSerializableValue.keyPath,\n              value = foundActionNonSerializableValue.value;\n          console.error(\"A non-serializable value was detected in an action, in the path: `\" + keyPath + \"`. Value:\", value, '\\nTake a look at the logic that dispatched this action: ', action, '\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)');\n        }\n\n        var result = next(action);\n        var state = storeAPI.getState();\n        var foundStateNonSerializableValue = findNonSerializableValue(state, [], isSerializable, getEntries);\n\n        if (foundStateNonSerializableValue) {\n          var _keyPath = foundStateNonSerializableValue.keyPath,\n              _value = foundStateNonSerializableValue.value;\n          console.error(\"A non-serializable value was detected in the state, in the path: `\" + _keyPath + \"`. Value:\", _value, \"\\nTake a look at the reducer(s) handling this action type: \" + action.type + \".\\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)\");\n        }\n\n        return result;\n      };\n    };\n  };\n}\n\nfunction isBoolean(x) {\n  return typeof x === 'boolean';\n}\n/**\r\n * Returns any array containing the default middleware installed by\r\n * `configureStore()`. Useful if you want to configure your store with a custom\r\n * `middleware` array but still keep the default set.\r\n *\r\n * @return The default middleware used by `configureStore()`.\r\n */\n\n\nfunction getDefaultMiddleware(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$thunk = _options.thunk,\n      thunk = _options$thunk === void 0 ? true : _options$thunk,\n      _options$immutableChe = _options.immutableCheck,\n      immutableCheck = _options$immutableChe === void 0 ? true : _options$immutableChe,\n      _options$serializable = _options.serializableCheck,\n      serializableCheck = _options$serializable === void 0 ? true : _options$serializable;\n  var middlewareArray = [];\n\n  if (thunk) {\n    if (isBoolean(thunk)) {\n      middlewareArray.push(thunkMiddleware);\n    } else {\n      middlewareArray.push(thunkMiddleware.withExtraArgument(thunk.extraArgument));\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    /* START_REMOVE_UMD */\n    if (immutableCheck) {\n      var createImmutableStateInvariantMiddleware = require('redux-immutable-state-invariant')[\"default\"];\n\n      var immutableOptions = {};\n\n      if (!isBoolean(immutableCheck)) {\n        immutableOptions = immutableCheck;\n      }\n\n      middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\n    }\n    /* STOP_REMOVE_UMD */\n\n\n    if (serializableCheck) {\n      var serializableOptions = {};\n\n      if (!isBoolean(serializableCheck)) {\n        serializableOptions = serializableCheck;\n      }\n\n      middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\n    }\n  }\n\n  return middlewareArray;\n}\n\nvar IS_PRODUCTION = process.env.NODE_ENV === 'production';\n/**\r\n * A friendly abstraction over the standard Redux `createStore()` function.\r\n *\r\n * @param config The store configuration.\r\n * @returns A configured Redux store.\r\n */\n\nfunction configureStore(options) {\n  var _ref = options || {},\n      _ref$reducer = _ref.reducer,\n      reducer = _ref$reducer === void 0 ? undefined : _ref$reducer,\n      _ref$middleware = _ref.middleware,\n      middleware = _ref$middleware === void 0 ? getDefaultMiddleware() : _ref$middleware,\n      _ref$devTools = _ref.devTools,\n      devTools = _ref$devTools === void 0 ? true : _ref$devTools,\n      _ref$preloadedState = _ref.preloadedState,\n      preloadedState = _ref$preloadedState === void 0 ? undefined : _ref$preloadedState,\n      _ref$enhancers = _ref.enhancers,\n      enhancers = _ref$enhancers === void 0 ? undefined : _ref$enhancers;\n\n  var rootReducer;\n\n  if (typeof reducer === 'function') {\n    rootReducer = reducer;\n  } else if (isPlainObject(reducer)) {\n    rootReducer = combineReducers(reducer);\n  } else {\n    throw new Error('\"reducer\" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');\n  }\n\n  var middlewareEnhancer = applyMiddleware.apply(void 0, middleware);\n  var finalCompose = compose;\n\n  if (devTools) {\n    finalCompose = composeWithDevTools(_extends({\n      // Enable capture of stack traces for dispatched Redux actions\n      trace: !IS_PRODUCTION\n    }, typeof devTools === 'object' && devTools));\n  }\n\n  var storeEnhancers = [middlewareEnhancer];\n\n  if (Array.isArray(enhancers)) {\n    storeEnhancers = [middlewareEnhancer].concat(enhancers);\n  } else if (typeof enhancers === 'function') {\n    storeEnhancers = enhancers(storeEnhancers);\n  }\n\n  var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);\n  return createStore(rootReducer, preloadedState, composedEnhancer);\n}\n\nfunction createAction(type, prepareAction) {\n  function actionCreator() {\n    if (prepareAction) {\n      var prepared = prepareAction.apply(void 0, arguments);\n\n      if (!prepared) {\n        throw new Error('prepareAction did not return an object');\n      }\n\n      return _extends({\n        type: type,\n        payload: prepared.payload\n      }, 'meta' in prepared && {\n        meta: prepared.meta\n      }, {}, 'error' in prepared && {\n        error: prepared.error\n      });\n    }\n\n    return {\n      type: type,\n      payload: arguments.length <= 0 ? undefined : arguments[0]\n    };\n  }\n\n  actionCreator.toString = function () {\n    return \"\" + type;\n  };\n\n  actionCreator.type = type;\n\n  actionCreator.match = function (action) {\n    return action.type === type;\n  };\n\n  return actionCreator;\n}\n/**\r\n * Returns the action type of the actions created by the passed\r\n * `createAction()`-generated action creator (arbitrary action creators\r\n * are not supported).\r\n *\r\n * @param action The action creator whose action type to get.\r\n * @returns The action type used by the action creator.\r\n */\n\n\nfunction getType(actionCreator) {\n  return \"\" + actionCreator;\n}\n\nfunction getType$1(slice, actionKey) {\n  return slice + \"/\" + actionKey;\n} // internal definition is a little less restrictive\n\n\nfunction createSlice(options) {\n  var name = options.name,\n      initialState = options.initialState;\n\n  if (!name) {\n    throw new Error('`name` is a required option for createSlice');\n  }\n\n  var reducers = options.reducers || {};\n  var extraReducers = typeof options.extraReducers === 'undefined' ? {} : typeof options.extraReducers === 'function' ? executeReducerBuilderCallback(options.extraReducers) : options.extraReducers;\n  var reducerNames = Object.keys(reducers);\n  var sliceCaseReducersByName = {};\n  var sliceCaseReducersByType = {};\n  var actionCreators = {};\n  reducerNames.forEach(function (reducerName) {\n    var maybeReducerWithPrepare = reducers[reducerName];\n    var type = getType$1(name, reducerName);\n    var caseReducer;\n    var prepareCallback;\n\n    if (typeof maybeReducerWithPrepare === 'function') {\n      caseReducer = maybeReducerWithPrepare;\n    } else {\n      caseReducer = maybeReducerWithPrepare.reducer;\n      prepareCallback = maybeReducerWithPrepare.prepare;\n    }\n\n    sliceCaseReducersByName[reducerName] = caseReducer;\n    sliceCaseReducersByType[type] = caseReducer;\n    actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);\n  });\n\n  var finalCaseReducers = _extends({}, extraReducers, {}, sliceCaseReducersByType);\n\n  var reducer = createReducer(initialState, finalCaseReducers);\n  return {\n    name: name,\n    reducer: reducer,\n    actions: actionCreators,\n    caseReducers: sliceCaseReducersByName\n  };\n}\n\nexport { configureStore, createAction, createReducer, createSerializableStateInvariantMiddleware, createSlice, findNonSerializableValue, getDefaultMiddleware, getType, isPlain };","map":{"version":3,"sources":["../src/createReducer.ts","../src/mapBuilders.ts","../src/isPlainObject.ts","../src/serializableStateInvariantMiddleware.ts","../src/getDefaultMiddleware.ts","../src/configureStore.ts","../src/createAction.ts","../src/createSlice.ts"],"names":["actionsMap","executeReducerBuilderCallback","mapOrBuilderCallback","state","initialState","createNextState","caseReducer","action","undefined","builder","addCase","type","typeOrActionCreator","builderCallback","value","proto","Object","val","Array","isPlainObject","path","isSerializable","isPlain","foundNestedSerializable","keyPath","entries","getEntries","property","nestedValue","nestedPath","findNonSerializableValue","options","ignoredActions","next","foundActionNonSerializableValue","console","result","storeAPI","foundStateNonSerializableValue","thunk","immutableCheck","serializableCheck","middlewareArray","isBoolean","thunkMiddleware","process","createImmutableStateInvariantMiddleware","require","immutableOptions","serializableOptions","createSerializableStateInvariantMiddleware","IS_PRODUCTION","reducer","middleware","getDefaultMiddleware","devTools","preloadedState","enhancers","rootReducer","combineReducers","middlewareEnhancer","applyMiddleware","finalCompose","compose","composeWithDevTools","trace","storeEnhancers","composedEnhancer","createStore","actionCreator","prepareAction","prepared","payload","meta","error","slice","actionKey","name","reducers","extraReducers","reducerNames","sliceCaseReducersByName","sliceCaseReducersByType","actionCreators","maybeReducerWithPrepare","getType","prepareCallback","createAction","finalCaseReducers","createReducer","actions","caseReducers"],"mappings":"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","sourcesContent":["import createNextState, { Draft } from 'immer'\r\nimport { AnyAction, Action, Reducer } from 'redux'\r\nimport {\r\n  executeReducerBuilderCallback,\r\n  ActionReducerMapBuilder\r\n} from './mapBuilders'\r\n\r\n/**\r\n * Defines a mapping from action types to corresponding action object shapes.\r\n */\r\nexport type Actions<T extends keyof any = string> = Record<T, Action>\r\n\r\n/**\r\n * An *case reducer* is a reducer function for a specific action type. Case\r\n * reducers can be composed to full reducers using `createReducer()`.\r\n *\r\n * Unlike a normal Redux reducer, a case reducer is never called with an\r\n * `undefined` state to determine the initial state. Instead, the initial\r\n * state is explicitly specified as an argument to `createReducer()`.\r\n *\r\n * In addition, a case reducer can choose to mutate the passed-in `state`\r\n * value directly instead of returning a new state. This does not actually\r\n * cause the store state to be mutated directly; instead, thanks to\r\n * [immer](https://github.com/mweststrate/immer), the mutations are\r\n * translated to copy operations that result in a new state.\r\n */\r\nexport type CaseReducer<S = any, A extends Action = AnyAction> = (\r\n  state: Draft<S>,\r\n  action: A\r\n) => S | void\r\n\r\n/**\r\n * A mapping from action types to case reducers for `createReducer()`.\r\n */\r\nexport type CaseReducers<S, AS extends Actions> = {\r\n  [T in keyof AS]: AS[T] extends Action ? CaseReducer<S, AS[T]> : void\r\n}\r\n\r\n/**\r\n * A utility function that allows defining a reducer as a mapping from action\r\n * type to *case reducer* functions that handle these action types. The\r\n * reducer's initial state is passed as the first argument.\r\n *\r\n * The body of every case reducer is implicitly wrapped with a call to\r\n * `produce()` from the [immer](https://github.com/mweststrate/immer) library.\r\n * This means that rather than returning a new state object, you can also\r\n * mutate the passed-in state object directly; these mutations will then be\r\n * automatically and efficiently translated into copies, giving you both\r\n * convenience and immutability.\r\n *\r\n * @param initialState The initial state to be returned by the reducer.\r\n * @param actionsMap A mapping from action types to action-type-specific\r\n *   case reducers.\r\n */\r\nexport function createReducer<\r\n  S,\r\n  CR extends CaseReducers<S, any> = CaseReducers<S, any>\r\n>(initialState: S, actionsMap: CR): Reducer<S>\r\n/**\r\n * A utility function that allows defining a reducer as a mapping from action\r\n * type to *case reducer* functions that handle these action types. The\r\n * reducer's initial state is passed as the first argument.\r\n *\r\n * The body of every case reducer is implicitly wrapped with a call to\r\n * `produce()` from the [immer](https://github.com/mweststrate/immer) library.\r\n * This means that rather than returning a new state object, you can also\r\n * mutate the passed-in state object directly; these mutations will then be\r\n * automatically and efficiently translated into copies, giving you both\r\n * convenience and immutability.\r\n * @param initialState The initial state to be returned by the reducer.\r\n * @param builderCallback A callback that receives a *builder* object to define\r\n *   case reducers via calls to `builder.addCase(actionCreatorOrType, reducer)`.\r\n */\r\nexport function createReducer<S>(\r\n  initialState: S,\r\n  builderCallback: (builder: ActionReducerMapBuilder<S>) => void\r\n): Reducer<S>\r\n\r\nexport function createReducer<S>(\r\n  initialState: S,\r\n  mapOrBuilderCallback:\r\n    | CaseReducers<S, any>\r\n    | ((builder: ActionReducerMapBuilder<S>) => void)\r\n): Reducer<S> {\r\n  let actionsMap =\r\n    typeof mapOrBuilderCallback === 'function'\r\n      ? executeReducerBuilderCallback(mapOrBuilderCallback)\r\n      : mapOrBuilderCallback\r\n\r\n  return function(state = initialState, action): S {\r\n    // @ts-ignore createNextState() produces an Immutable<Draft<S>> rather\r\n    // than an Immutable<S>, and TypeScript cannot find out how to reconcile\r\n    // these two types.\r\n    return createNextState(state, (draft: Draft<S>) => {\r\n      const caseReducer = actionsMap[action.type]\r\n      return caseReducer ? caseReducer(draft, action) : undefined\r\n    })\r\n  }\r\n}\r\n","import { Action } from 'redux'\r\nimport { CaseReducer, CaseReducers } from './createReducer'\r\n\r\nexport interface TypedActionCreator<Type extends string> {\r\n  (...args: any[]): Action<Type>\r\n  type: Type\r\n}\r\n\r\n/**\r\n * A builder for an action <-> reducer map.\r\n */\r\nexport interface ActionReducerMapBuilder<State> {\r\n  /**\r\n   * Add a case reducer for actions created by this action creator.\r\n   * @param actionCreator\r\n   * @param reducer\r\n   */\r\n  addCase<ActionCreator extends TypedActionCreator<string>>(\r\n    actionCreator: ActionCreator,\r\n    reducer: CaseReducer<State, ReturnType<ActionCreator>>\r\n  ): ActionReducerMapBuilder<State>\r\n  /**\r\n   * Add a case reducer for actions with the specified type.\r\n   * @param type\r\n   * @param reducer\r\n   */\r\n  addCase<Type extends string, A extends Action<Type>>(\r\n    type: Type,\r\n    reducer: CaseReducer<State, A>\r\n  ): ActionReducerMapBuilder<State>\r\n}\r\n\r\nexport function executeReducerBuilderCallback<S>(\r\n  builderCallback: (builder: ActionReducerMapBuilder<S>) => void\r\n): CaseReducers<S, any> {\r\n  const actionsMap: CaseReducers<S, any> = {}\r\n  const builder = {\r\n    addCase(\r\n      typeOrActionCreator: string | TypedActionCreator<any>,\r\n      reducer: CaseReducer<S>\r\n    ) {\r\n      const type =\r\n        typeof typeOrActionCreator === 'string'\r\n          ? typeOrActionCreator\r\n          : typeOrActionCreator.type\r\n      if (type in actionsMap) {\r\n        throw new Error(\r\n          'addCase cannot be called with two reducers for the same action type'\r\n        )\r\n      }\r\n      actionsMap[type] = reducer\r\n      return builder\r\n    }\r\n  }\r\n  builderCallback(builder)\r\n  return actionsMap\r\n}\r\n","/**\r\n * Returns true if the passed value is \"plain\" object, i.e. an object whose\r\n * protoype is the root `Object.prototype`. This includes objects created\r\n * using object literals, but not for instance for class instances.\r\n *\r\n * @param {any} value The value to inspect.\r\n * @returns {boolean} True if the argument appears to be a plain object.\r\n */\r\nexport default function isPlainObject(value: unknown): value is object {\r\n  if (typeof value !== 'object' || value === null) return false\r\n\r\n  let proto = value\r\n  while (Object.getPrototypeOf(proto) !== null) {\r\n    proto = Object.getPrototypeOf(proto)\r\n  }\r\n\r\n  return Object.getPrototypeOf(value) === proto\r\n}\r\n","import isPlainObject from './isPlainObject'\r\nimport { Middleware } from 'redux'\r\n\r\n/**\r\n * Returns true if the passed value is \"plain\", i.e. a value that is either\r\n * directly JSON-serializable (boolean, number, string, array, plain object)\r\n * or `undefined`.\r\n *\r\n * @param val The value to check.\r\n */\r\nexport function isPlain(val: any) {\r\n  return (\r\n    typeof val === 'undefined' ||\r\n    val === null ||\r\n    typeof val === 'string' ||\r\n    typeof val === 'boolean' ||\r\n    typeof val === 'number' ||\r\n    Array.isArray(val) ||\r\n    isPlainObject(val)\r\n  )\r\n}\r\n\r\ninterface NonSerializableValue {\r\n  keyPath: string\r\n  value: unknown\r\n}\r\n\r\nexport function findNonSerializableValue(\r\n  value: unknown,\r\n  path: ReadonlyArray<string> = [],\r\n  isSerializable: (value: unknown) => boolean = isPlain,\r\n  getEntries?: (value: unknown) => [string, any][]\r\n): NonSerializableValue | false {\r\n  let foundNestedSerializable: NonSerializableValue | false\r\n\r\n  if (!isSerializable(value)) {\r\n    return {\r\n      keyPath: path.join('.') || '<root>',\r\n      value: value\r\n    }\r\n  }\r\n\r\n  if (typeof value !== 'object' || value === null) {\r\n    return false\r\n  }\r\n\r\n  const entries = getEntries != null ? getEntries(value) : Object.entries(value)\r\n\r\n  for (const [property, nestedValue] of entries) {\r\n    const nestedPath = path.concat(property)\r\n\r\n    if (!isSerializable(nestedValue)) {\r\n      return {\r\n        keyPath: nestedPath.join('.'),\r\n        value: nestedValue\r\n      }\r\n    }\r\n\r\n    if (typeof nestedValue === 'object') {\r\n      foundNestedSerializable = findNonSerializableValue(\r\n        nestedValue,\r\n        nestedPath,\r\n        isSerializable,\r\n        getEntries\r\n      )\r\n\r\n      if (foundNestedSerializable) {\r\n        return foundNestedSerializable\r\n      }\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Options for `createSerializableStateInvariantMiddleware()`.\r\n */\r\nexport interface SerializableStateInvariantMiddlewareOptions {\r\n  /**\r\n   * The function to check if a value is considered serializable. This\r\n   * function is applied recursively to every value contained in the\r\n   * state. Defaults to `isPlain()`.\r\n   */\r\n  isSerializable?: (value: any) => boolean\r\n  /**\r\n   * The function that will be used to retrieve entries from each\r\n   * value.  If unspecified, `Object.entries` will be used. Defaults\r\n   * to `undefined`.\r\n   */\r\n  getEntries?: (value: any) => [string, any][]\r\n\r\n  /**\r\n   * An array of action types to ignore when checking for serializability, Defaults to []\r\n   */\r\n  ignoredActions?: string[]\r\n}\r\n\r\n/**\r\n * Creates a middleware that, after every state change, checks if the new\r\n * state is serializable. If a non-serializable value is found within the\r\n * state, an error is printed to the console.\r\n *\r\n * @param options Middleware options.\r\n */\r\nexport function createSerializableStateInvariantMiddleware(\r\n  options: SerializableStateInvariantMiddlewareOptions = {}\r\n): Middleware {\r\n  const { isSerializable = isPlain, getEntries, ignoredActions = [] } = options\r\n\r\n  return storeAPI => next => action => {\r\n    if (ignoredActions.length && ignoredActions.indexOf(action.type) !== -1) {\r\n      return next(action)\r\n    }\r\n\r\n    const foundActionNonSerializableValue = findNonSerializableValue(\r\n      action,\r\n      [],\r\n      isSerializable,\r\n      getEntries\r\n    )\r\n\r\n    if (foundActionNonSerializableValue) {\r\n      const { keyPath, value } = foundActionNonSerializableValue\r\n\r\n      console.error(\r\n        `A non-serializable value was detected in an action, in the path: \\`${keyPath}\\`. Value:`,\r\n        value,\r\n        '\\nTake a look at the logic that dispatched this action: ',\r\n        action,\r\n        '\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)'\r\n      )\r\n    }\r\n\r\n    const result = next(action)\r\n\r\n    const state = storeAPI.getState()\r\n\r\n    const foundStateNonSerializableValue = findNonSerializableValue(\r\n      state,\r\n      [],\r\n      isSerializable,\r\n      getEntries\r\n    )\r\n\r\n    if (foundStateNonSerializableValue) {\r\n      const { keyPath, value } = foundStateNonSerializableValue\r\n\r\n      console.error(\r\n        `A non-serializable value was detected in the state, in the path: \\`${keyPath}\\`. Value:`,\r\n        value,\r\n        `\r\nTake a look at the reducer(s) handling this action type: ${action.type}.\r\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`\r\n      )\r\n    }\r\n\r\n    return result\r\n  }\r\n}\r\n","import { Middleware } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\n// UMD-DEV-ONLY: import createImmutableStateInvariantMiddleware from 'redux-immutable-state-invariant'\r\n\r\nimport {\r\n  createSerializableStateInvariantMiddleware,\r\n  SerializableStateInvariantMiddlewareOptions\r\n} from './serializableStateInvariantMiddleware'\r\n\r\nfunction isBoolean(x: any): x is boolean {\r\n  return typeof x === 'boolean'\r\n}\r\n\r\ninterface ThunkOptions<E = any> {\r\n  extraArgument: E\r\n}\r\n\r\ninterface ImmutableStateInvariantMiddlewareOptions {\r\n  isImmutable?: (value: any) => boolean\r\n  ignore?: string[]\r\n}\r\n\r\ninterface GetDefaultMiddlewareOptions {\r\n  thunk?: boolean | ThunkOptions\r\n  immutableCheck?: boolean | ImmutableStateInvariantMiddlewareOptions\r\n  serializableCheck?: boolean | SerializableStateInvariantMiddlewareOptions\r\n}\r\n\r\n/**\r\n * Returns any array containing the default middleware installed by\r\n * `configureStore()`. Useful if you want to configure your store with a custom\r\n * `middleware` array but still keep the default set.\r\n *\r\n * @return The default middleware used by `configureStore()`.\r\n */\r\nexport function getDefaultMiddleware<S = any>(\r\n  options: GetDefaultMiddlewareOptions = {}\r\n): Middleware<{}, S>[] {\r\n  const {\r\n    thunk = true,\r\n    immutableCheck = true,\r\n    serializableCheck = true\r\n  } = options\r\n\r\n  let middlewareArray: Middleware<{}, S>[] = []\r\n\r\n  if (thunk) {\r\n    if (isBoolean(thunk)) {\r\n      middlewareArray.push(thunkMiddleware)\r\n    } else {\r\n      middlewareArray.push(\r\n        thunkMiddleware.withExtraArgument(thunk.extraArgument)\r\n      )\r\n    }\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    /* START_REMOVE_UMD */\r\n    if (immutableCheck) {\r\n      const createImmutableStateInvariantMiddleware = require('redux-immutable-state-invariant')\r\n        .default\r\n\r\n      let immutableOptions: ImmutableStateInvariantMiddlewareOptions = {}\r\n\r\n      if (!isBoolean(immutableCheck)) {\r\n        immutableOptions = immutableCheck\r\n      }\r\n\r\n      middlewareArray.unshift(\r\n        createImmutableStateInvariantMiddleware(immutableOptions)\r\n      )\r\n    }\r\n\r\n    /* STOP_REMOVE_UMD */\r\n\r\n    if (serializableCheck) {\r\n      let serializableOptions: SerializableStateInvariantMiddlewareOptions = {}\r\n\r\n      if (!isBoolean(serializableCheck)) {\r\n        serializableOptions = serializableCheck\r\n      }\r\n\r\n      middlewareArray.push(\r\n        createSerializableStateInvariantMiddleware(serializableOptions)\r\n      )\r\n    }\r\n  }\r\n\r\n  return middlewareArray\r\n}\r\n","import {\r\n  createStore,\r\n  compose,\r\n  applyMiddleware,\r\n  combineReducers,\r\n  Reducer,\r\n  ReducersMapObject,\r\n  Middleware,\r\n  Action,\r\n  AnyAction,\r\n  StoreEnhancer,\r\n  Store,\r\n  DeepPartial\r\n} from 'redux'\r\nimport {\r\n  composeWithDevTools,\r\n  EnhancerOptions as DevToolsOptions\r\n} from 'redux-devtools-extension'\r\nimport { ThunkDispatch } from 'redux-thunk'\r\n\r\nimport isPlainObject from './isPlainObject'\r\nimport { getDefaultMiddleware } from './getDefaultMiddleware'\r\n\r\nconst IS_PRODUCTION = process.env.NODE_ENV === 'production'\r\n\r\nexport type ConfigureEnhancersCallback = (\r\n  defaultEnhancers: StoreEnhancer[]\r\n) => StoreEnhancer[]\r\n\r\n/**\r\n * Options for `configureStore()`.\r\n */\r\nexport interface ConfigureStoreOptions<S = any, A extends Action = AnyAction> {\r\n  /**\r\n   * A single reducer function that will be used as the root reducer, or an\r\n   * object of slice reducers that will be passed to `combineReducers()`.\r\n   */\r\n  reducer: Reducer<S, A> | ReducersMapObject<S, A>\r\n\r\n  /**\r\n   * An array of Redux middleware to install. If not supplied, defaults to\r\n   * the set of middleware returned by `getDefaultMiddleware()`.\r\n   */\r\n  middleware?: Middleware<{}, S>[]\r\n\r\n  /**\r\n   * Whether to enable Redux DevTools integration. Defaults to `true`.\r\n   *\r\n   * Additional configuration can be done by passing Redux DevTools options\r\n   */\r\n  devTools?: boolean | DevToolsOptions\r\n\r\n  /**\r\n   * The initial state, same as Redux's createStore.\r\n   * You may optionally specify it to hydrate the state\r\n   * from the server in universal apps, or to restore a previously serialized\r\n   * user session. If you use `combineReducers()` to produce the root reducer\r\n   * function (either directly or indirectly by passing an object as `reducer`),\r\n   * this must be an object with the same shape as the reducer map keys.\r\n   */\r\n  // NOTE: The needlessly complicated `S extends any ? S : S` instead of just\r\n  // `S` ensures that the TypeScript compiler doesn't attempt to infer `S`\r\n  // based on the value passed as `preloadedState`, which might be a partial\r\n  // state rather than the full thing.\r\n  preloadedState?: DeepPartial<S extends any ? S : S>\r\n\r\n  /**\r\n   * The store enhancers to apply. See Redux's `createStore()`.\r\n   * All enhancers will be included before the DevTools Extension enhancer.\r\n   * If you need to customize the order of enhancers, supply a callback\r\n   * function that will receive the original array (ie, `[applyMiddleware]`),\r\n   * and should return a new array (such as `[applyMiddleware, offline]`).\r\n   * If you only need to add middleware, you can use the `middleware` parameter instaead.\r\n   */\r\n  enhancers?: StoreEnhancer[] | ConfigureEnhancersCallback\r\n}\r\n\r\n/**\r\n * A Redux store returned by `configureStore()`. Supports dispatching\r\n * side-effectful _thunks_ in addition to plain actions.\r\n */\r\nexport interface EnhancedStore<S = any, A extends Action = AnyAction>\r\n  extends Store<S, A> {\r\n  dispatch: ThunkDispatch<S, any, A>\r\n}\r\n\r\n/**\r\n * A friendly abstraction over the standard Redux `createStore()` function.\r\n *\r\n * @param config The store configuration.\r\n * @returns A configured Redux store.\r\n */\r\nexport function configureStore<S = any, A extends Action = AnyAction>(\r\n  options: ConfigureStoreOptions<S, A>\r\n): EnhancedStore<S, A> {\r\n  const {\r\n    reducer = undefined,\r\n    middleware = getDefaultMiddleware(),\r\n    devTools = true,\r\n    preloadedState = undefined,\r\n    enhancers = undefined\r\n  } = options || {}\r\n\r\n  let rootReducer: Reducer<S, A>\r\n\r\n  if (typeof reducer === 'function') {\r\n    rootReducer = reducer\r\n  } else if (isPlainObject(reducer)) {\r\n    rootReducer = combineReducers(reducer)\r\n  } else {\r\n    throw new Error(\r\n      '\"reducer\" is a required argument, and must be a function or an object of functions that can be passed to combineReducers'\r\n    )\r\n  }\r\n\r\n  const middlewareEnhancer = applyMiddleware(...middleware)\r\n\r\n  let finalCompose = compose\r\n\r\n  if (devTools) {\r\n    finalCompose = composeWithDevTools({\r\n      // Enable capture of stack traces for dispatched Redux actions\r\n      trace: !IS_PRODUCTION,\r\n      ...(typeof devTools === 'object' && devTools)\r\n    })\r\n  }\r\n\r\n  let storeEnhancers: StoreEnhancer[] = [middlewareEnhancer]\r\n\r\n  if (Array.isArray(enhancers)) {\r\n    storeEnhancers = [middlewareEnhancer, ...enhancers]\r\n  } else if (typeof enhancers === 'function') {\r\n    storeEnhancers = enhancers(storeEnhancers)\r\n  }\r\n\r\n  const composedEnhancer = finalCompose(...storeEnhancers) as StoreEnhancer\r\n\r\n  return createStore(\r\n    rootReducer,\r\n    preloadedState as DeepPartial<S>,\r\n    composedEnhancer\r\n  )\r\n}\r\n","import { Action } from 'redux'\r\nimport { IsUnknownOrNonInferrable } from './tsHelpers'\r\n\r\n/**\r\n * An action with a string type and an associated payload. This is the\r\n * type of action returned by `createAction()` action creators.\r\n *\r\n * @template P The type of the action's payload.\r\n * @template T the type used for the action type.\r\n * @template M The type of the action's meta (optional)\r\n * @template E The type of the action's error (optional)\r\n */\r\nexport type PayloadAction<\r\n  P = void,\r\n  T extends string = string,\r\n  M = never,\r\n  E = never\r\n> = WithOptional<M, E, WithPayload<P, Action<T>>>\r\n\r\nexport type PrepareAction<P> =\r\n  | ((...args: any[]) => { payload: P })\r\n  | ((...args: any[]) => { payload: P; meta: any })\r\n  | ((...args: any[]) => { payload: P; error: any })\r\n  | ((...args: any[]) => { payload: P; meta: any; error: any })\r\n\r\nexport type ActionCreatorWithPreparedPayload<\r\n  PA extends PrepareAction<any> | void,\r\n  T extends string = string\r\n> = PA extends PrepareAction<infer P>\r\n  ? WithTypePropertyAndMatch<\r\n      (\r\n        ...args: Parameters<PA>\r\n      ) => PayloadAction<P, T, MetaOrNever<PA>, ErrorOrNever<PA>>,\r\n      T,\r\n      P,\r\n      MetaOrNever<PA>,\r\n      ErrorOrNever<PA>\r\n    >\r\n  : void\r\n\r\nexport type ActionCreatorWithOptionalPayload<\r\n  P,\r\n  T extends string = string\r\n> = WithTypePropertyAndMatch<\r\n  {\r\n    (payload?: undefined): PayloadAction<undefined, T>\r\n    <PT extends Diff<P, undefined>>(payload?: PT): PayloadAction<PT, T>\r\n  },\r\n  T,\r\n  P | undefined\r\n>\r\n\r\nexport type ActionCreatorWithoutPayload<\r\n  T extends string = string\r\n> = WithTypePropertyAndMatch<() => PayloadAction<undefined, T>, T, undefined>\r\n\r\nexport type ActionCreatorWithPayload<\r\n  P,\r\n  T extends string = string\r\n> = WithTypePropertyAndMatch<\r\n  IsUnknownOrNonInferrable<\r\n    P,\r\n    // TS < 3.5 infers non-inferrable types to {}, which does not take `null`. This enforces `undefined` instead.\r\n    <PT extends unknown>(payload: PT) => PayloadAction<PT, T>,\r\n    // default behaviour\r\n    <PT extends P>(payload: PT) => PayloadAction<PT, T>\r\n  >,\r\n  T,\r\n  P\r\n>\r\n\r\n/**\r\n * An action creator that produces actions with a `payload` attribute.\r\n */\r\nexport type PayloadActionCreator<\r\n  P = void,\r\n  T extends string = string,\r\n  PA extends PrepareAction<P> | void = void\r\n> = IfPrepareActionMethodProvided<\r\n  PA,\r\n  ActionCreatorWithPreparedPayload<PA, T>,\r\n  // else\r\n  IfMaybeUndefined<\r\n    P,\r\n    ActionCreatorWithOptionalPayload<P, T>,\r\n    // else\r\n    IfVoid<\r\n      P,\r\n      ActionCreatorWithoutPayload<T>,\r\n      // else\r\n      ActionCreatorWithPayload<P, T>\r\n    >\r\n  >\r\n>\r\n\r\n/**\r\n * A utility function to create an action creator for the given action type\r\n * string. The action creator accepts a single argument, which will be included\r\n * in the action object as a field called payload. The action creator function\r\n * will also have its toString() overriden so that it returns the action type,\r\n * allowing it to be used in reducer logic that is looking for that action type.\r\n *\r\n * @param type The action type to use for created actions.\r\n * @param prepare (optional) a method that takes any number of arguments and returns { payload } or { payload, meta }.\r\n *                If this is given, the resulting action creator will pass it's arguments to this method to calculate payload & meta.\r\n */\r\n\r\nexport function createAction<P = void, T extends string = string>(\r\n  type: T\r\n): PayloadActionCreator<P, T>\r\n\r\nexport function createAction<\r\n  PA extends PrepareAction<any>,\r\n  T extends string = string\r\n>(\r\n  type: T,\r\n  prepareAction: PA\r\n): PayloadActionCreator<ReturnType<PA>['payload'], T, PA>\r\n\r\nexport function createAction(type: string, prepareAction?: Function) {\r\n  function actionCreator(...args: any[]) {\r\n    if (prepareAction) {\r\n      let prepared = prepareAction(...args)\r\n      if (!prepared) {\r\n        throw new Error('prepareAction did not return an object')\r\n      }\r\n\r\n      return {\r\n        type,\r\n        payload: prepared.payload,\r\n        ...('meta' in prepared && { meta: prepared.meta }),\r\n        ...('error' in prepared && { error: prepared.error })\r\n      }\r\n    }\r\n    return { type, payload: args[0] }\r\n  }\r\n\r\n  actionCreator.toString = () => `${type}`\r\n\r\n  actionCreator.type = type\r\n\r\n  actionCreator.match = (action: Action<unknown>): action is PayloadAction =>\r\n    action.type === type\r\n\r\n  return actionCreator\r\n}\r\n\r\n/**\r\n * Returns the action type of the actions created by the passed\r\n * `createAction()`-generated action creator (arbitrary action creators\r\n * are not supported).\r\n *\r\n * @param action The action creator whose action type to get.\r\n * @returns The action type used by the action creator.\r\n */\r\nexport function getType<T extends string>(\r\n  actionCreator: PayloadActionCreator<any, T>\r\n): T {\r\n  return `${actionCreator}` as T\r\n}\r\n\r\n// helper types for more readable typings\r\n\r\ntype Diff<T, U> = T extends U ? never : T\r\n\r\ntype WithPayload<P, T> = T & { payload: P }\r\n\r\ntype WithOptional<M, E, T> = T &\r\n  ([M] extends [never] ? {} : { meta: M }) &\r\n  ([E] extends [never] ? {} : { error: E })\r\n\r\ntype WithTypeProperty<MergeIn, T extends string> = {\r\n  type: T\r\n} & MergeIn\r\n\r\ntype WithMatch<MergeIn, T extends string, P, M = never, E = never> = {\r\n  match(action: Action<unknown>): action is PayloadAction<P, T, M, E>\r\n} & MergeIn\r\n\r\ntype WithTypePropertyAndMatch<\r\n  MergeIn,\r\n  T extends string,\r\n  P,\r\n  M = never,\r\n  E = never\r\n> = WithTypeProperty<WithMatch<MergeIn, T, P, M, E>, T>\r\n\r\ntype IfPrepareActionMethodProvided<\r\n  PA extends PrepareAction<any> | void,\r\n  True,\r\n  False\r\n> = PA extends (...args: any[]) => any ? True : False\r\n\r\ntype MetaOrNever<PA extends PrepareAction<any>> = ReturnType<PA> extends {\r\n  meta: infer M\r\n}\r\n  ? M\r\n  : never\r\n\r\ntype ErrorOrNever<PA extends PrepareAction<any>> = ReturnType<PA> extends {\r\n  error: infer E\r\n}\r\n  ? E\r\n  : never\r\n\r\ntype IfMaybeUndefined<P, True, False> = [undefined] extends [P] ? True : False\r\n\r\ntype IfVoid<P, True, False> = [void] extends [P] ? True : False\r\n","import { Reducer } from 'redux'\r\nimport {\r\n  createAction,\r\n  PayloadAction,\r\n  PayloadActionCreator,\r\n  PrepareAction,\r\n  ActionCreatorWithoutPayload,\r\n  ActionCreatorWithPreparedPayload\r\n} from './createAction'\r\nimport { createReducer, CaseReducers, CaseReducer } from './createReducer'\r\nimport {\r\n  ActionReducerMapBuilder,\r\n  executeReducerBuilderCallback\r\n} from './mapBuilders'\r\n\r\n/**\r\n * An action creator atttached to a slice.\r\n *\r\n * @deprecated please use PayloadActionCreator directly\r\n */\r\nexport type SliceActionCreator<P> = PayloadActionCreator<P>\r\n\r\nexport interface Slice<\r\n  State = any,\r\n  CaseReducers extends SliceCaseReducerDefinitions<State, PayloadActions> = {\r\n    [key: string]: any\r\n  }\r\n> {\r\n  /**\r\n   * The slice name.\r\n   */\r\n  name: string\r\n\r\n  /**\r\n   * The slice's reducer.\r\n   */\r\n  reducer: Reducer<State>\r\n\r\n  /**\r\n   * Action creators for the types of actions that are handled by the slice\r\n   * reducer.\r\n   */\r\n  actions: CaseReducerActions<CaseReducers>\r\n\r\n  caseReducers: SliceDefinedCaseReducers<CaseReducers, State>\r\n}\r\n\r\n/**\r\n * Options for `createSlice()`.\r\n */\r\nexport interface CreateSliceOptions<\r\n  State = any,\r\n  CR extends SliceCaseReducerDefinitions<\r\n    State,\r\n    any\r\n  > = SliceCaseReducerDefinitions<State, any>\r\n> {\r\n  /**\r\n   * The slice's name. Used to namespace the generated action types.\r\n   */\r\n  name: string\r\n\r\n  /**\r\n   * The initial state to be returned by the slice reducer.\r\n   */\r\n  initialState: State\r\n\r\n  /**\r\n   * A mapping from action types to action-type-specific *case reducer*\r\n   * functions. For every action type, a matching action creator will be\r\n   * generated using `createAction()`.\r\n   */\r\n  reducers: CR\r\n\r\n  /**\r\n   * A mapping from action types to action-type-specific *case reducer*\r\n   * functions. These reducers should have existing action types used\r\n   * as the keys, and action creators will _not_ be generated.\r\n   * Alternatively, a callback that receives a *builder* object to define\r\n   * case reducers via calls to `builder.addCase(actionCreatorOrType, reducer)`.\r\n   */\r\n  extraReducers?:\r\n    | CaseReducers<NoInfer<State>, any>\r\n    | ((builder: ActionReducerMapBuilder<NoInfer<State>>) => void)\r\n}\r\n\r\ntype PayloadActions<Types extends keyof any = string> = Record<\r\n  Types,\r\n  PayloadAction\r\n>\r\n\r\ntype CaseReducerWithPrepare<State, Action extends PayloadAction> = {\r\n  reducer: CaseReducer<State, Action>\r\n  prepare: PrepareAction<Action['payload']>\r\n}\r\n\r\ntype SliceCaseReducerDefinitions<State, PA extends PayloadActions> = {\r\n  [ActionType in keyof PA]:\r\n    | CaseReducer<State, PA[ActionType]>\r\n    | CaseReducerWithPrepare<State, PA[ActionType]>\r\n}\r\n\r\ntype IfIsReducerFunctionWithoutAction<R, True, False = never> = R extends (\r\n  state: any\r\n) => any\r\n  ? True\r\n  : False\r\ntype IfIsCaseReducerWithPrepare<R, True, False = never> = R extends {\r\n  prepare: Function\r\n}\r\n  ? True\r\n  : False\r\n\r\ntype PayloadForReducer<R> = R extends (\r\n  state: any,\r\n  action: PayloadAction<infer P>\r\n) => any\r\n  ? P\r\n  : void\r\ntype PrepareActionForReducer<R> = R extends { prepare: infer Prepare }\r\n  ? Prepare\r\n  : never\r\n\r\ntype ActionForReducer<R, S> = R extends (\r\n  state: S,\r\n  action: PayloadAction<infer P>\r\n) => S\r\n  ? PayloadAction<P>\r\n  : R extends {\r\n      reducer(state: any, action: PayloadAction<infer P>): any\r\n    }\r\n  ? PayloadAction<P>\r\n  : unknown\r\n\r\ntype CaseReducerActions<\r\n  CaseReducers extends SliceCaseReducerDefinitions<any, any>\r\n> = {\r\n  [Type in keyof CaseReducers]: IfIsCaseReducerWithPrepare<\r\n    CaseReducers[Type],\r\n    ActionCreatorWithPreparedPayload<\r\n      PrepareActionForReducer<CaseReducers[Type]>\r\n    >,\r\n    // else\r\n    IfIsReducerFunctionWithoutAction<\r\n      CaseReducers[Type],\r\n      ActionCreatorWithoutPayload,\r\n      // else\r\n      PayloadActionCreator<PayloadForReducer<CaseReducers[Type]>>\r\n    >\r\n  >\r\n}\r\n\r\ntype SliceDefinedCaseReducers<\r\n  CaseReducers extends SliceCaseReducerDefinitions<any, any>,\r\n  State = any\r\n> = {\r\n  [Type in keyof CaseReducers]: CaseReducer<\r\n    State,\r\n    ActionForReducer<CaseReducers[Type], State>\r\n  >\r\n}\r\n\r\ntype NoInfer<T> = [T][T extends any ? 0 : never]\r\n\r\ntype SliceCaseReducersCheck<S, ACR> = {\r\n  [P in keyof ACR]: ACR[P] extends {\r\n    reducer(s: S, action?: { payload: infer O }): any\r\n  }\r\n    ? {\r\n        prepare(...a: never[]): { payload: O }\r\n      }\r\n    : {}\r\n}\r\n\r\ntype RestrictCaseReducerDefinitionsToMatchReducerAndPrepare<\r\n  S,\r\n  CR extends SliceCaseReducerDefinitions<S, any>\r\n> = { reducers: SliceCaseReducersCheck<S, NoInfer<CR>> }\r\n\r\nfunction getType(slice: string, actionKey: string): string {\r\n  return `${slice}/${actionKey}`\r\n}\r\n\r\n/**\r\n * A function that accepts an initial state, an object full of reducer\r\n * functions, and a \"slice name\", and automatically generates\r\n * action creators and action types that correspond to the\r\n * reducers and state.\r\n *\r\n * The `reducer` argument is passed to `createReducer()`.\r\n */\r\nexport function createSlice<\r\n  State,\r\n  CaseReducers extends SliceCaseReducerDefinitions<State, any>\r\n>(\r\n  options: CreateSliceOptions<State, CaseReducers> &\r\n    RestrictCaseReducerDefinitionsToMatchReducerAndPrepare<State, CaseReducers>\r\n): Slice<State, CaseReducers>\r\n\r\n// internal definition is a little less restrictive\r\nexport function createSlice<\r\n  State,\r\n  CaseReducers extends SliceCaseReducerDefinitions<State, any>\r\n>(\r\n  options: CreateSliceOptions<State, CaseReducers>\r\n): Slice<State, CaseReducers> {\r\n  const { name, initialState } = options\r\n  if (!name) {\r\n    throw new Error('`name` is a required option for createSlice')\r\n  }\r\n  const reducers = options.reducers || {}\r\n  const extraReducers =\r\n    typeof options.extraReducers === 'undefined'\r\n      ? {}\r\n      : typeof options.extraReducers === 'function'\r\n      ? executeReducerBuilderCallback(options.extraReducers)\r\n      : options.extraReducers\r\n\r\n  const reducerNames = Object.keys(reducers)\r\n\r\n  const sliceCaseReducersByName: Record<string, CaseReducer> = {}\r\n  const sliceCaseReducersByType: Record<string, CaseReducer> = {}\r\n  const actionCreators: Record<string, PayloadActionCreator> = {}\r\n\r\n  reducerNames.forEach(reducerName => {\r\n    const maybeReducerWithPrepare = reducers[reducerName]\r\n    const type = getType(name, reducerName)\r\n\r\n    let caseReducer: CaseReducer<State, any>\r\n    let prepareCallback: PrepareAction<any> | undefined\r\n\r\n    if (typeof maybeReducerWithPrepare === 'function') {\r\n      caseReducer = maybeReducerWithPrepare\r\n    } else {\r\n      caseReducer = maybeReducerWithPrepare.reducer\r\n      prepareCallback = maybeReducerWithPrepare.prepare\r\n    }\r\n\r\n    sliceCaseReducersByName[reducerName] = caseReducer\r\n    sliceCaseReducersByType[type] = caseReducer\r\n    actionCreators[reducerName] = prepareCallback\r\n      ? createAction(type, prepareCallback)\r\n      : createAction(type)\r\n  })\r\n\r\n  const finalCaseReducers = { ...extraReducers, ...sliceCaseReducersByType }\r\n  const reducer = createReducer(initialState, finalCaseReducers as any)\r\n\r\n  return {\r\n    name,\r\n    reducer,\r\n    actions: actionCreators as any,\r\n    caseReducers: sliceCaseReducersByName as any\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}