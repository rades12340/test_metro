{"ast":null,"code":"import _classCallCheck from \"/Applications/MAMP/htdocs/project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/MAMP/htdocs/project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Applications/MAMP/htdocs/project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils'; // Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\n\nimport * as invariant_ from 'invariant';\nvar invariant = invariant_.default || invariant_;\nvar MINUTE = 60;\nvar HOUR = 60 * 60;\nvar DAY = 60 * 60 * 24;\n\nfunction selectUnit(seconds) {\n  var absValue = Math.abs(seconds);\n\n  if (absValue < MINUTE) {\n    return 'second';\n  }\n\n  if (absValue < HOUR) {\n    return 'minute';\n  }\n\n  if (absValue < DAY) {\n    return 'hour';\n  }\n\n  return 'day';\n}\n\nfunction getDurationInSeconds(unit) {\n  switch (unit) {\n    case 'second':\n      return 1;\n\n    case 'minute':\n      return MINUTE;\n\n    case 'hour':\n      return HOUR;\n\n    default:\n      return DAY;\n  }\n}\n\nfunction valueToSeconds(value, unit) {\n  if (!value) {\n    return 0;\n  }\n\n  switch (unit) {\n    case 'second':\n      return value;\n\n    case 'minute':\n      return value * MINUTE;\n\n    default:\n      return value * HOUR;\n  }\n}\n\nvar INCREMENTABLE_UNITS = ['second', 'minute', 'hour'];\n\nfunction canIncrement() {\n  var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'second';\n  return INCREMENTABLE_UNITS.includes(unit);\n}\n\nfunction verifyProps(updateIntervalInSeconds, unit) {\n  invariant(!updateIntervalInSeconds || updateIntervalInSeconds && canIncrement(unit), 'Cannot schedule update with unit longer than hour');\n}\n\nexport var FormattedRelativeTime = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(FormattedRelativeTime, _React$PureComponent);\n\n  var _super = _createSuper(FormattedRelativeTime);\n\n  function FormattedRelativeTime(props) {\n    var _this;\n\n    _classCallCheck(this, FormattedRelativeTime);\n\n    _this = _super.call(this, props); // Public for testing\n\n    _this._updateTimer = null;\n    _this.state = {\n      prevUnit: _this.props.unit,\n      prevValue: _this.props.value,\n      currentValueInSeconds: canIncrement(_this.props.unit) ? valueToSeconds(_this.props.value, _this.props.unit) : 0\n    };\n    verifyProps(props.updateIntervalInSeconds, props.unit);\n    return _this;\n  }\n\n  _createClass(FormattedRelativeTime, [{\n    key: \"scheduleNextUpdate\",\n    value: function scheduleNextUpdate(_ref, _ref2) {\n      var _this2 = this;\n\n      var updateIntervalInSeconds = _ref.updateIntervalInSeconds,\n          unit = _ref.unit;\n      var currentValueInSeconds = _ref2.currentValueInSeconds;\n      clearTimeout(this._updateTimer);\n      this._updateTimer = null; // If there's no interval and we cannot increment this unit, do nothing\n\n      if (!updateIntervalInSeconds || !canIncrement(unit)) {\n        return;\n      } // Figure out the next interesting time\n\n\n      var nextValueInSeconds = currentValueInSeconds - updateIntervalInSeconds;\n      var nextUnit = selectUnit(nextValueInSeconds); // We've reached the max auto incrementable unit, don't schedule another update\n\n      if (nextUnit === 'day') {\n        return;\n      }\n\n      var unitDuration = getDurationInSeconds(nextUnit);\n      var remainder = nextValueInSeconds % unitDuration;\n      var prevInterestingValueInSeconds = nextValueInSeconds - remainder;\n      var nextInterestingValueInSeconds = prevInterestingValueInSeconds >= currentValueInSeconds ? prevInterestingValueInSeconds - unitDuration : prevInterestingValueInSeconds;\n      var delayInSeconds = Math.abs(nextInterestingValueInSeconds - currentValueInSeconds);\n      this._updateTimer = setTimeout(function () {\n        return _this2.setState({\n          currentValueInSeconds: nextInterestingValueInSeconds\n        });\n      }, delayInSeconds * 1e3);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scheduleNextUpdate(this.props, this.state);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.scheduleNextUpdate(this.props, this.state);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this._updateTimer);\n      this._updateTimer = null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(Context.Consumer, null, function (intl) {\n        invariantIntlContext(intl);\n        var formatRelativeTime = intl.formatRelativeTime,\n            Text = intl.textComponent;\n        var _this3$props = _this3.props,\n            children = _this3$props.children,\n            value = _this3$props.value,\n            unit = _this3$props.unit,\n            updateIntervalInSeconds = _this3$props.updateIntervalInSeconds;\n        var currentValueInSeconds = _this3.state.currentValueInSeconds;\n        var currentValue = value || 0;\n        var currentUnit = unit;\n\n        if (canIncrement(unit) && typeof currentValueInSeconds === 'number' && updateIntervalInSeconds) {\n          currentUnit = selectUnit(currentValueInSeconds);\n          var unitDuration = getDurationInSeconds(currentUnit);\n          currentValue = Math.round(currentValueInSeconds / unitDuration);\n        }\n\n        var formattedRelativeTime = formatRelativeTime(currentValue, currentUnit, Object.assign({}, _this3.props));\n\n        if (typeof children === 'function') {\n          return children(formattedRelativeTime);\n        }\n\n        if (Text) {\n          return React.createElement(Text, null, formattedRelativeTime);\n        }\n\n        return formattedRelativeTime;\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.unit !== state.prevUnit || props.value !== state.prevValue) {\n        return {\n          prevValue: props.value,\n          prevUnit: props.unit,\n          currentValueInSeconds: canIncrement(props.unit) ? valueToSeconds(props.value, props.unit) : 0\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return FormattedRelativeTime;\n}(React.PureComponent);\nFormattedRelativeTime.displayName = 'FormattedRelativeTime';\nFormattedRelativeTime.defaultProps = {\n  value: 0,\n  unit: 'second'\n};\nexport default FormattedRelativeTime;","map":{"version":3,"sources":["/Applications/MAMP/htdocs/project/client/node_modules/react-intl/lib/components/relative.js"],"names":["React","Context","invariantIntlContext","invariant_","invariant","default","MINUTE","HOUR","DAY","selectUnit","seconds","absValue","Math","abs","getDurationInSeconds","unit","valueToSeconds","value","INCREMENTABLE_UNITS","canIncrement","includes","verifyProps","updateIntervalInSeconds","FormattedRelativeTime","props","_updateTimer","state","prevUnit","prevValue","currentValueInSeconds","clearTimeout","nextValueInSeconds","nextUnit","unitDuration","remainder","prevInterestingValueInSeconds","nextInterestingValueInSeconds","delayInSeconds","setTimeout","setState","scheduleNextUpdate","createElement","Consumer","intl","formatRelativeTime","Text","textComponent","children","currentValue","currentUnit","round","formattedRelativeTime","Object","assign","PureComponent","displayName","defaultProps"],"mappings":"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","sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\n// Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\nimport * as invariant_ from 'invariant';\nconst invariant = invariant_.default || invariant_;\nconst MINUTE = 60;\nconst HOUR = 60 * 60;\nconst DAY = 60 * 60 * 24;\nfunction selectUnit(seconds) {\n    const absValue = Math.abs(seconds);\n    if (absValue < MINUTE) {\n        return 'second';\n    }\n    if (absValue < HOUR) {\n        return 'minute';\n    }\n    if (absValue < DAY) {\n        return 'hour';\n    }\n    return 'day';\n}\nfunction getDurationInSeconds(unit) {\n    switch (unit) {\n        case 'second':\n            return 1;\n        case 'minute':\n            return MINUTE;\n        case 'hour':\n            return HOUR;\n        default:\n            return DAY;\n    }\n}\nfunction valueToSeconds(value, unit) {\n    if (!value) {\n        return 0;\n    }\n    switch (unit) {\n        case 'second':\n            return value;\n        case 'minute':\n            return value * MINUTE;\n        default:\n            return value * HOUR;\n    }\n}\nconst INCREMENTABLE_UNITS = ['second', 'minute', 'hour'];\nfunction canIncrement(unit = 'second') {\n    return INCREMENTABLE_UNITS.includes(unit);\n}\nfunction verifyProps(updateIntervalInSeconds, unit) {\n    invariant(!updateIntervalInSeconds || (updateIntervalInSeconds && canIncrement(unit)), 'Cannot schedule update with unit longer than hour');\n}\nexport class FormattedRelativeTime extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        // Public for testing\n        this._updateTimer = null;\n        this.state = {\n            prevUnit: this.props.unit,\n            prevValue: this.props.value,\n            currentValueInSeconds: canIncrement(this.props.unit)\n                ? valueToSeconds(this.props.value, this.props.unit)\n                : 0,\n        };\n        verifyProps(props.updateIntervalInSeconds, props.unit);\n    }\n    scheduleNextUpdate({ updateIntervalInSeconds, unit }, { currentValueInSeconds }) {\n        clearTimeout(this._updateTimer);\n        this._updateTimer = null;\n        // If there's no interval and we cannot increment this unit, do nothing\n        if (!updateIntervalInSeconds || !canIncrement(unit)) {\n            return;\n        }\n        // Figure out the next interesting time\n        const nextValueInSeconds = currentValueInSeconds - updateIntervalInSeconds;\n        const nextUnit = selectUnit(nextValueInSeconds);\n        // We've reached the max auto incrementable unit, don't schedule another update\n        if (nextUnit === 'day') {\n            return;\n        }\n        const unitDuration = getDurationInSeconds(nextUnit);\n        const remainder = nextValueInSeconds % unitDuration;\n        const prevInterestingValueInSeconds = nextValueInSeconds - remainder;\n        const nextInterestingValueInSeconds = prevInterestingValueInSeconds >= currentValueInSeconds\n            ? prevInterestingValueInSeconds - unitDuration\n            : prevInterestingValueInSeconds;\n        const delayInSeconds = Math.abs(nextInterestingValueInSeconds - currentValueInSeconds);\n        this._updateTimer = setTimeout(() => this.setState({\n            currentValueInSeconds: nextInterestingValueInSeconds,\n        }), delayInSeconds * 1e3);\n    }\n    componentDidMount() {\n        this.scheduleNextUpdate(this.props, this.state);\n    }\n    componentDidUpdate() {\n        this.scheduleNextUpdate(this.props, this.state);\n    }\n    componentWillUnmount() {\n        clearTimeout(this._updateTimer);\n        this._updateTimer = null;\n    }\n    static getDerivedStateFromProps(props, state) {\n        if (props.unit !== state.prevUnit || props.value !== state.prevValue) {\n            return {\n                prevValue: props.value,\n                prevUnit: props.unit,\n                currentValueInSeconds: canIncrement(props.unit)\n                    ? valueToSeconds(props.value, props.unit)\n                    : 0,\n            };\n        }\n        return null;\n    }\n    render() {\n        return (React.createElement(Context.Consumer, null, (intl) => {\n            invariantIntlContext(intl);\n            const { formatRelativeTime, textComponent: Text } = intl;\n            const { children, value, unit, updateIntervalInSeconds } = this.props;\n            const { currentValueInSeconds } = this.state;\n            let currentValue = value || 0;\n            let currentUnit = unit;\n            if (canIncrement(unit) &&\n                typeof currentValueInSeconds === 'number' &&\n                updateIntervalInSeconds) {\n                currentUnit = selectUnit(currentValueInSeconds);\n                const unitDuration = getDurationInSeconds(currentUnit);\n                currentValue = Math.round(currentValueInSeconds / unitDuration);\n            }\n            const formattedRelativeTime = formatRelativeTime(currentValue, currentUnit, Object.assign({}, this.props));\n            if (typeof children === 'function') {\n                return children(formattedRelativeTime);\n            }\n            if (Text) {\n                return React.createElement(Text, null, formattedRelativeTime);\n            }\n            return formattedRelativeTime;\n        }));\n    }\n}\nFormattedRelativeTime.displayName = 'FormattedRelativeTime';\nFormattedRelativeTime.defaultProps = {\n    value: 0,\n    unit: 'second',\n};\nexport default FormattedRelativeTime;\n"]},"metadata":{},"sourceType":"module"}