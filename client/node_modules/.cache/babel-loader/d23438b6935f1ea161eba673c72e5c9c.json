{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nvar initialCustomersState = {\n  listLoading: false,\n  actionsLoading: false,\n  totalCount: 0,\n  entities: null,\n  customerForEdit: undefined,\n  lastError: null\n};\nexport var callTypes = {\n  list: \"list\",\n  action: \"action\"\n};\nexport var customersSlice = createSlice({\n  name: \"customers\",\n  initialState: initialCustomersState,\n  reducers: {\n    catchError: function catchError(state, action) {\n      state.error = \"\".concat(action.type, \": \").concat(action.payload.error);\n\n      if (action.payload.callType === callTypes.list) {\n        state.listLoading = false;\n      } else {\n        state.actionsLoading = false;\n      }\n    },\n    startCall: function startCall(state, action) {\n      state.error = null;\n\n      if (action.payload.callType === callTypes.list) {\n        state.listLoading = true;\n      } else {\n        state.actionsLoading = true;\n      }\n    },\n    // getCustomerById\n    customerFetched: function customerFetched(state, action) {\n      state.actionsLoading = false;\n      state.customerForEdit = action.payload.customerForEdit;\n      state.error = null;\n    },\n    // findCustomers\n    customersFetched: function customersFetched(state, action) {\n      var _action$payload = action.payload,\n          totalCount = _action$payload.totalCount,\n          entities = _action$payload.entities;\n      state.listLoading = false;\n      state.error = null;\n      state.entities = entities;\n      state.totalCount = totalCount;\n    },\n    // createCustomer\n    customerCreated: function customerCreated(state, action) {\n      state.actionsLoading = false;\n      state.error = null;\n      state.entities.push(action.payload.customer);\n    },\n    // updateCustomer\n    customerUpdated: function customerUpdated(state, action) {\n      state.error = null;\n      state.actionsLoading = false;\n      state.entities = state.entities.map(function (entity) {\n        if (entity.id === action.payload.customer.id) {\n          return action.payload.customer;\n        }\n\n        return entity;\n      });\n    },\n    // deleteCustomer\n    customerDeleted: function customerDeleted(state, action) {\n      state.error = null;\n      state.actionsLoading = false;\n      state.entities = state.entities.filter(function (el) {\n        return el.id !== action.payload.id;\n      });\n    },\n    // deleteCustomers\n    customersDeleted: function customersDeleted(state, action) {\n      state.error = null;\n      state.actionsLoading = false;\n      state.entities = state.entities.filter(function (el) {\n        return !action.payload.ids.includes(el.id);\n      });\n    },\n    // customersUpdateState\n    customersStatusUpdated: function customersStatusUpdated(state, action) {\n      state.actionsLoading = false;\n      state.error = null;\n      var _action$payload2 = action.payload,\n          ids = _action$payload2.ids,\n          status = _action$payload2.status;\n      state.entities = state.entities.map(function (entity) {\n        if (ids.findIndex(function (id) {\n          return id === entity.id;\n        }) > -1) {\n          entity.status = status;\n        }\n\n        return entity;\n      });\n    }\n  }\n});","map":{"version":3,"sources":["/Applications/MAMP/htdocs/project/client/src/app/modules/ECommerce/_redux/customers/customersSlice.js"],"names":["createSlice","initialCustomersState","listLoading","actionsLoading","totalCount","entities","customerForEdit","undefined","lastError","callTypes","list","action","customersSlice","name","initialState","reducers","catchError","state","error","type","payload","callType","startCall","customerFetched","customersFetched","customerCreated","push","customer","customerUpdated","map","entity","id","customerDeleted","filter","el","customersDeleted","ids","includes","customersStatusUpdated","status","findIndex"],"mappings":"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","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst initialCustomersState = {\r\n  listLoading: false,\r\n  actionsLoading: false,\r\n  totalCount: 0,\r\n  entities: null,\r\n  customerForEdit: undefined,\r\n  lastError: null\r\n};\r\nexport const callTypes = {\r\n  list: \"list\",\r\n  action: \"action\"\r\n};\r\n\r\nexport const customersSlice = createSlice({\r\n  name: \"customers\",\r\n  initialState: initialCustomersState,\r\n  reducers: {\r\n    catchError: (state, action) => {\r\n      state.error = `${action.type}: ${action.payload.error}`;\r\n      if (action.payload.callType === callTypes.list) {\r\n        state.listLoading = false;\r\n      } else {\r\n        state.actionsLoading = false;\r\n      }\r\n    },\r\n    startCall: (state, action) => {\r\n      state.error = null;\r\n      if (action.payload.callType === callTypes.list) {\r\n        state.listLoading = true;\r\n      } else {\r\n        state.actionsLoading = true;\r\n      }\r\n    },\r\n    // getCustomerById\r\n    customerFetched: (state, action) => {\r\n      state.actionsLoading = false;\r\n      state.customerForEdit = action.payload.customerForEdit;\r\n      state.error = null;\r\n    },\r\n    // findCustomers\r\n    customersFetched: (state, action) => {\r\n      const { totalCount, entities } = action.payload;\r\n      state.listLoading = false;\r\n      state.error = null;\r\n      state.entities = entities;\r\n      state.totalCount = totalCount;\r\n    },\r\n    // createCustomer\r\n    customerCreated: (state, action) => {\r\n      state.actionsLoading = false;\r\n      state.error = null;\r\n      state.entities.push(action.payload.customer);\r\n    },\r\n    // updateCustomer\r\n    customerUpdated: (state, action) => {\r\n      state.error = null;\r\n      state.actionsLoading = false;\r\n      state.entities = state.entities.map(entity => {\r\n        if (entity.id === action.payload.customer.id) {\r\n          return action.payload.customer;\r\n        }\r\n        return entity;\r\n      });\r\n    },\r\n    // deleteCustomer\r\n    customerDeleted: (state, action) => {\r\n      state.error = null;\r\n      state.actionsLoading = false;\r\n      state.entities = state.entities.filter(el => el.id !== action.payload.id);\r\n    },\r\n    // deleteCustomers\r\n    customersDeleted: (state, action) => {\r\n      state.error = null;\r\n      state.actionsLoading = false;\r\n      state.entities = state.entities.filter(\r\n        el => !action.payload.ids.includes(el.id)\r\n      );\r\n    },\r\n    // customersUpdateState\r\n    customersStatusUpdated: (state, action) => {\r\n      state.actionsLoading = false;\r\n      state.error = null;\r\n      const { ids, status } = action.payload;\r\n      state.entities = state.entities.map(entity => {\r\n        if (ids.findIndex(id => id === entity.id) > -1) {\r\n          entity.status = status;\r\n        }\r\n        return entity;\r\n      });\r\n    }\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}