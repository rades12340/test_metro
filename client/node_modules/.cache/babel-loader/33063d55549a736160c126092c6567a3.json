{"ast":null,"code":"import _slicedToArray from \"/Applications/MAMP/htdocs/project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Applications/MAMP/htdocs/project/client/src/_metronic/layout/_core/MetronicSubheader.js\";\nimport React, { createContext, useState, useContext } from \"react\";\nexport function getBreadcrumbsAndTitle(menuId, pathName) {\n  var result = {\n    breadcrumbs: [],\n    title: \"\"\n  };\n  var menu = document.getElementById(menuId);\n\n  if (!menu) {\n    return result;\n  }\n\n  var activeLinksArray = Array.from(menu.getElementsByClassName(\"active\") || []);\n  var activeLinks = activeLinksArray.filter(function (el) {\n    return el.tagName === \"A\";\n  });\n\n  if (!activeLinks) {\n    return result;\n  }\n\n  activeLinks.forEach(function (link) {\n    var titleSpans = link.getElementsByClassName(\"menu-text\");\n\n    if (titleSpans) {\n      var titleSpan = Array.from(titleSpans).find(function (t) {\n        return t.innerHTML;\n      });\n\n      if (titleSpan) {\n        result.breadcrumbs.push({\n          pathname: link.pathname,\n          title: titleSpan.innerHTML\n        });\n      }\n    }\n  });\n  result.title = getTitle(result.breadcrumbs, pathName);\n  return result;\n}\nexport function getTitle(breadCrumbs, pathname) {\n  if (!breadCrumbs || !pathname) {\n    return \"\";\n  }\n\n  var item = breadCrumbs.find(function (b) {\n    return b.pathname === pathname;\n  });\n\n  if (!item) {\n    return \"\";\n  }\n\n  return item.title;\n}\nvar SubheaderContext = createContext();\nexport function useSubheader() {\n  return useContext(SubheaderContext);\n}\nexport var SubheaderConsumer = SubheaderContext.Consumer;\nexport function MetronicSubheaderProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      breadcrumbs = _useState4[0],\n      setBreadcrumbs = _useState4[1];\n\n  var value = {\n    title: title,\n    setTitle: setTitle,\n    breadcrumbs: breadcrumbs,\n    setBreadcrumbs: setBreadcrumbs\n  };\n  return /*#__PURE__*/React.createElement(SubheaderContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 10\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/project/client/src/_metronic/layout/_core/MetronicSubheader.js"],"names":["React","createContext","useState","useContext","getBreadcrumbsAndTitle","menuId","pathName","result","breadcrumbs","title","menu","document","getElementById","activeLinksArray","Array","from","getElementsByClassName","activeLinks","filter","el","tagName","forEach","link","titleSpans","titleSpan","find","t","innerHTML","push","pathname","getTitle","breadCrumbs","item","b","SubheaderContext","useSubheader","SubheaderConsumer","Consumer","MetronicSubheaderProvider","children","setTitle","setBreadcrumbs","value"],"mappings":"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","sourcesContent":["import React, {createContext, useState, useContext} from \"react\";\r\n\r\nexport function getBreadcrumbsAndTitle(menuId, pathName) {\r\n  const result = {\r\n    breadcrumbs: [],\r\n    title: \"\"\r\n  };\r\n  const menu = document.getElementById(menuId);\r\n  if (!menu) {\r\n    return result;\r\n  }\r\n\r\n\r\n  const activeLinksArray = Array.from(menu.getElementsByClassName(\"active\") || []);\r\n  const activeLinks = activeLinksArray.filter(el => el.tagName === \"A\");\r\n  if (!activeLinks) {\r\n    return result;\r\n  }\r\n\r\n  activeLinks.forEach(link => {\r\n    const titleSpans = link.getElementsByClassName(\"menu-text\");\r\n    if (titleSpans) {\r\n      const titleSpan = Array.from(titleSpans).find(t => t.innerHTML);\r\n      if (titleSpan) {\r\n        result.breadcrumbs.push(\r\n            {\r\n              pathname: link.pathname,\r\n              title: titleSpan.innerHTML\r\n            }\r\n        );\r\n      }\r\n    }\r\n  });\r\n  result.title = getTitle(result.breadcrumbs, pathName);\r\n  return result;\r\n}\r\n\r\nexport function getTitle(breadCrumbs, pathname) {\r\n  if (!breadCrumbs || !pathname) {\r\n    return \"\";\r\n  }\r\n\r\n  const item = breadCrumbs.find(b => b.pathname === pathname);\r\n  if (!item) {\r\n    return  \"\";\r\n  }\r\n\r\n  return  item.title;\r\n}\r\n\r\nconst SubheaderContext = createContext();\r\n\r\nexport function useSubheader() {\r\n  return useContext(SubheaderContext);\r\n}\r\n\r\nexport const SubheaderConsumer = SubheaderContext.Consumer;\r\n\r\nexport function MetronicSubheaderProvider({ children }) {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\r\n  const value = { title, setTitle, breadcrumbs, setBreadcrumbs };\r\n  return <SubheaderContext.Provider value={value}>{children}</SubheaderContext.Provider>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}