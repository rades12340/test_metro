{"ast":null,"code":"import _slicedToArray from \"/Applications/MAMP/htdocs/project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Applications/MAMP/htdocs/project/client/src/_metronic/_partials/controls/code-examples-kt/KTCodeExample.js\";\n\n/* eslint-disable no-script-url,jsx-a11y/anchor-is-valid */\nimport React, { useState, useEffect } from \"react\";\nimport { KTCodeBlock } from \"./KTCodeBlock\";\nimport { Card, CardBody, CardHeader } from \"../Card\";\nimport { CodeBlockToolbar } from \"../code-examples/CodeBlockToolbar\";\nexport function KTCodeExample(_ref) {\n  var jsCode = _ref.jsCode,\n      children = _ref.children,\n      beforeCodeTitle = _ref.beforeCodeTitle,\n      languages = _ref.languages,\n      codeBlockHeight = _ref.codeBlockHeight;\n  var defaultLanguages = !languages ? [{\n    code: jsCode,\n    language: \"javascript\",\n    shortCode: \"JS\"\n  }] : languages;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCodeBlockShown = _useState2[0],\n      setIsCodeBlockShown = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tabId = _useState4[0],\n      setTabId = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      customStyle = _useState6[0],\n      setCustomStyle = _useState6[1];\n\n  useEffect(function () {\n    var styles = {};\n\n    if (codeBlockHeight) {\n      styles.height = codeBlockHeight;\n      styles.overflowX = \"auto\";\n    }\n\n    if (defaultLanguages.length > 1) {\n      styles.background = \"none transparent !important\";\n    }\n\n    setCustomStyle(styles);\n  }, [codeBlockHeight, defaultLanguages.length]);\n  var toolbar = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-toolbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"example-tools\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CodeBlockToolbar, {\n    showViewCode: true,\n    code: defaultLanguages[tabId].code,\n    isCodeBlockShown: isCodeBlockShown,\n    setIsCodeBlockShown: setIsCodeBlockShown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  })));\n  return /*#__PURE__*/React.createElement(Card, {\n    className: \"example example-compact\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    title: beforeCodeTitle,\n    toolbar: toolbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, children), /*#__PURE__*/React.createElement(KTCodeBlock, {\n    languages: defaultLanguages,\n    tabs: {\n      tabId: tabId,\n      setTabId: setTabId\n    },\n    codeShown: {\n      isCodeBlockShown: isCodeBlockShown,\n      setIsCodeBlockShown: setIsCodeBlockShown\n    },\n    customStyle: customStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/project/client/src/_metronic/_partials/controls/code-examples-kt/KTCodeExample.js"],"names":["React","useState","useEffect","KTCodeBlock","Card","CardBody","CardHeader","CodeBlockToolbar","KTCodeExample","jsCode","children","beforeCodeTitle","languages","codeBlockHeight","defaultLanguages","code","language","shortCode","isCodeBlockShown","setIsCodeBlockShown","tabId","setTabId","customStyle","setCustomStyle","styles","height","overflowX","length","background","toolbar"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,SAAQC,IAAR,EAAcC,QAAd,EAAwBC,UAAxB,QAAyC,SAAzC;AACA,SAAQC,gBAAR,QAA+B,mCAA/B;AAEA,OAAO,SAASC,aAAT,OAMJ;AAAA,MALDC,MAKC,QALDA,MAKC;AAAA,MAJDC,QAIC,QAJDA,QAIC;AAAA,MAHDC,eAGC,QAHDA,eAGC;AAAA,MAFDC,SAEC,QAFDA,SAEC;AAAA,MADDC,eACC,QADDA,eACC;AACD,MAAMC,gBAAgB,GAAG,CAACF,SAAD,GACrB,CACE;AACEG,IAAAA,IAAI,EAAEN,MADR;AAEEO,IAAAA,QAAQ,EAAE,YAFZ;AAGEC,IAAAA,SAAS,EAAE;AAHb,GADF,CADqB,GAQrBL,SARJ;;AADC,kBAU+CX,QAAQ,CAAC,KAAD,CAVvD;AAAA;AAAA,MAUMiB,gBAVN;AAAA,MAUwBC,mBAVxB;;AAAA,mBAWyBlB,QAAQ,CAAC,CAAD,CAXjC;AAAA;AAAA,MAWMmB,KAXN;AAAA,MAWaC,QAXb;;AAAA,mBAYqCpB,QAAQ,CAAC,EAAD,CAZ7C;AAAA;AAAA,MAYMqB,WAZN;AAAA,MAYmBC,cAZnB;;AAaDrB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMsB,MAAM,GAAG,EAAf;;AAEA,QAAIX,eAAJ,EAAqB;AACnBW,MAAAA,MAAM,CAACC,MAAP,GAAgBZ,eAAhB;AACAW,MAAAA,MAAM,CAACE,SAAP,GAAmB,MAAnB;AACD;;AAED,QAAIZ,gBAAgB,CAACa,MAAjB,GAA0B,CAA9B,EAAiC;AAC/BH,MAAAA,MAAM,CAACI,UAAP;AACD;;AAEDL,IAAAA,cAAc,CAACC,MAAD,CAAd;AACD,GAbQ,EAaN,CAACX,eAAD,EAAkBC,gBAAgB,CAACa,MAAnC,CAbM,CAAT;AAeA,MAAME,OAAO,gBACX;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AACE,IAAA,YAAY,EAAE,IADhB;AAEE,IAAA,IAAI,EAAEf,gBAAgB,CAACM,KAAD,CAAhB,CAAwBL,IAFhC;AAGE,IAAA,gBAAgB,EAAEG,gBAHpB;AAIE,IAAA,mBAAmB,EAAEC,mBAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAaA,sBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,yBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAER,eAAnB;AAAoC,IAAA,OAAO,EAAEkB,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,0CAAGnB,QAAH,CADF,eAEE,oBAAC,WAAD;AACE,IAAA,SAAS,EAAEI,gBADb;AAEE,IAAA,IAAI,EAAE;AAAEM,MAAAA,KAAK,EAALA,KAAF;AAASC,MAAAA,QAAQ,EAARA;AAAT,KAFR;AAGE,IAAA,SAAS,EAAE;AAAEH,MAAAA,gBAAgB,EAAhBA,gBAAF;AAAoBC,MAAAA,mBAAmB,EAAnBA;AAApB,KAHb;AAIE,IAAA,WAAW,EAAEG,WAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFF,CADF;AAcD","sourcesContent":["/* eslint-disable no-script-url,jsx-a11y/anchor-is-valid */\r\nimport React, {useState, useEffect} from \"react\";\r\nimport {KTCodeBlock} from \"./KTCodeBlock\";\r\nimport {Card, CardBody, CardHeader} from \"../Card\";\r\nimport {CodeBlockToolbar} from \"../code-examples/CodeBlockToolbar\";\r\n\r\nexport function KTCodeExample({\r\n  jsCode,\r\n  children,\r\n  beforeCodeTitle,\r\n  languages,\r\n  codeBlockHeight\r\n}) {\r\n  const defaultLanguages = !languages\r\n    ? [\r\n        {\r\n          code: jsCode,\r\n          language: \"javascript\",\r\n          shortCode: \"JS\"\r\n        }\r\n      ]\r\n    : languages;\r\n  const [isCodeBlockShown, setIsCodeBlockShown] = useState(false);\r\n  const [tabId, setTabId] = useState(0);\r\n  const [customStyle, setCustomStyle] = useState({});\r\n  useEffect(() => {\r\n    const styles = {};\r\n\r\n    if (codeBlockHeight) {\r\n      styles.height = codeBlockHeight;\r\n      styles.overflowX = \"auto\";\r\n    }\r\n\r\n    if (defaultLanguages.length > 1) {\r\n      styles.background = `none transparent !important`;\r\n    }\r\n\r\n    setCustomStyle(styles);\r\n  }, [codeBlockHeight, defaultLanguages.length]);\r\n\r\n  const toolbar = (\r\n    <div className=\"card-toolbar\">\r\n      <div className=\"example-tools\">\r\n        <CodeBlockToolbar\r\n          showViewCode={true}\r\n          code={defaultLanguages[tabId].code}\r\n          isCodeBlockShown={isCodeBlockShown}\r\n          setIsCodeBlockShown={setIsCodeBlockShown}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Card className=\"example example-compact\">\r\n      <CardHeader title={beforeCodeTitle} toolbar={toolbar} />\r\n      <CardBody>\r\n        <>{children}</>\r\n        <KTCodeBlock\r\n          languages={defaultLanguages}\r\n          tabs={{ tabId, setTabId }}\r\n          codeShown={{ isCodeBlockShown, setIsCodeBlockShown }}\r\n          customStyle={customStyle}\r\n        />\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}