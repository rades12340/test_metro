{"ast":null,"code":"import _defineProperty from \"/Applications/MAMP/htdocs/project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Applications/MAMP/htdocs/project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Applications/MAMP/htdocs/project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Applications/MAMP/htdocs/project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Applications/MAMP/htdocs/project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Applications/MAMP/htdocs/project/client/src/app/modules/GoogleMaterialExamples/inputs/AutocompleteExamplesPage.js\";\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-restricted-imports */\nimport React from \"react\";\nimport { emphasize, makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport Select from \"react-select\";\nimport deburr from \"lodash/deburr\";\nimport Downshift from \"downshift\";\nimport { TextField, Popper, Paper, MenuItem, Chip, Typography, NoSsr } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { Notice, KTCodeExample } from \"../../../../_metronic/_partials/controls\";\nvar suggestions = [{\n  label: \"Afghanistan\"\n}, {\n  label: \"Aland Islands\"\n}, {\n  label: \"Albania\"\n}, {\n  label: \"Algeria\"\n}, {\n  label: \"American Samoa\"\n}, {\n  label: \"Andorra\"\n}, {\n  label: \"Angola\"\n}, {\n  label: \"Anguilla\"\n}, {\n  label: \"Antarctica\"\n}, {\n  label: \"Antigua and Barbuda\"\n}, {\n  label: \"Argentina\"\n}, {\n  label: \"Armenia\"\n}, {\n  label: \"Aruba\"\n}, {\n  label: \"Australia\"\n}, {\n  label: \"Austria\"\n}, {\n  label: \"Azerbaijan\"\n}, {\n  label: \"Bahamas\"\n}, {\n  label: \"Bahrain\"\n}, {\n  label: \"Bangladesh\"\n}, {\n  label: \"Barbados\"\n}, {\n  label: \"Belarus\"\n}, {\n  label: \"Belgium\"\n}, {\n  label: \"Belize\"\n}, {\n  label: \"Benin\"\n}, {\n  label: \"Bermuda\"\n}, {\n  label: \"Bhutan\"\n}, {\n  label: \"Bolivia, Plurinational State of\"\n}, {\n  label: \"Bonaire, Sint Eustatius and Saba\"\n}, {\n  label: \"Bosnia and Herzegovina\"\n}, {\n  label: \"Botswana\"\n}, {\n  label: \"Bouvet Island\"\n}, {\n  label: \"Brazil\"\n}, {\n  label: \"British Indian Ocean Territory\"\n}, {\n  label: \"Brunei Darussalam\"\n}]; // Example first\n\nfunction renderInput(inputProps) {\n  var InputProps = inputProps.InputProps,\n      classes = inputProps.classes,\n      ref = inputProps.ref,\n      other = _objectWithoutProperties(inputProps, [\"InputProps\", \"classes\", \"ref\"]);\n\n  return /*#__PURE__*/React.createElement(TextField, Object.assign({\n    InputProps: _objectSpread({\n      inputRef: ref,\n      classes: {\n        root: classes.inputRoot,\n        input: classes.inputInput\n      }\n    }, InputProps)\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }));\n}\n\nfunction renderSuggestion(suggestionProps) {\n  var suggestion = suggestionProps.suggestion,\n      index = suggestionProps.index,\n      itemProps = suggestionProps.itemProps,\n      highlightedIndex = suggestionProps.highlightedIndex,\n      selectedItem = suggestionProps.selectedItem;\n  var isHighlighted = highlightedIndex === index;\n  var isSelected = (selectedItem || \"\").indexOf(suggestion.label) > -1;\n  return /*#__PURE__*/React.createElement(MenuItem, Object.assign({}, itemProps, {\n    key: \"suggestion1\".concat(suggestion.label),\n    selected: isHighlighted,\n    component: \"div\",\n    style: {\n      fontWeight: isSelected ? 500 : 400\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }), suggestion.label);\n}\n\nrenderSuggestion.propTypes = {\n  highlightedIndex: PropTypes.number,\n  index: PropTypes.number,\n  itemProps: PropTypes.object,\n  selectedItem: PropTypes.string,\n  suggestion: PropTypes.shape({\n    label: PropTypes.string\n  }).isRequired\n};\n\nfunction getSuggestions(value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$showEmpty = _ref.showEmpty,\n      showEmpty = _ref$showEmpty === void 0 ? false : _ref$showEmpty;\n\n  var inputValue = deburr(value.trim()).toLowerCase();\n  var inputLength = inputValue.length;\n  var count = 0;\n  return inputLength === 0 && !showEmpty ? [] : suggestions.filter(function (suggestion) {\n    var keep = count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n    if (keep) {\n      count += 1;\n    }\n\n    return keep;\n  });\n}\n\nfunction DownshiftMultiple(props) {\n  var _this = this;\n\n  var classes = props.classes;\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      inputValue = _React$useState2[0],\n      setInputValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectedItem = _React$useState4[0],\n      setSelectedItem = _React$useState4[1];\n\n  function handleKeyDown(event) {\n    if (selectedItem.length && !inputValue.length && event.key === \"Backspace\") {\n      setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\n    }\n  }\n\n  function handleInputChange(event) {\n    setInputValue(event.target.value);\n  }\n\n  function handleChange(item) {\n    var newSelectedItem = _toConsumableArray(selectedItem);\n\n    if (newSelectedItem.indexOf(item) === -1) {\n      newSelectedItem = [].concat(_toConsumableArray(newSelectedItem), [item]);\n    }\n\n    setInputValue(\"\");\n    setSelectedItem(newSelectedItem);\n  }\n\n  var handleDelete = function handleDelete(item) {\n    return function () {\n      var newSelectedItem = _toConsumableArray(selectedItem);\n\n      newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\n      setSelectedItem(newSelectedItem);\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(Downshift, {\n    id: \"downshift-multiple\",\n    inputValue: inputValue,\n    onChange: handleChange,\n    selectedItem: selectedItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var getInputProps = _ref2.getInputProps,\n        getItemProps = _ref2.getItemProps,\n        getLabelProps = _ref2.getLabelProps,\n        isOpen = _ref2.isOpen,\n        inputValue2 = _ref2.inputValue,\n        selectedItem2 = _ref2.selectedItem,\n        highlightedIndex = _ref2.highlightedIndex;\n\n    var _getInputProps = getInputProps({\n      onKeyDown: handleKeyDown,\n      placeholder: \"Select multiple countries\"\n    }),\n        onBlur = _getInputProps.onBlur,\n        _onChange = _getInputProps.onChange,\n        onFocus = _getInputProps.onFocus,\n        inputProps = _objectWithoutProperties(_getInputProps, [\"onBlur\", \"onChange\", \"onFocus\"]);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }\n    }, renderInput({\n      fullWidth: true,\n      classes: classes,\n      label: \"Countries\",\n      InputLabelProps: getLabelProps(),\n      InputProps: {\n        startAdornment: selectedItem.map(function (item) {\n          return /*#__PURE__*/React.createElement(Chip, {\n            key: item,\n            tabIndex: -1,\n            label: item,\n            className: classes.chip,\n            onDelete: handleDelete(item),\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 19\n            }\n          });\n        }),\n        onBlur: onBlur,\n        onChange: function onChange(event) {\n          handleInputChange(event);\n\n          _onChange(event);\n        },\n        onFocus: onFocus\n      },\n      inputProps: inputProps\n    }), isOpen ? /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      square: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 15\n      }\n    }, getSuggestions(inputValue2).map(function (suggestion, index) {\n      return renderSuggestion({\n        suggestion: suggestion,\n        index: index,\n        itemProps: getItemProps({\n          item: suggestion.label\n        }),\n        highlightedIndex: highlightedIndex,\n        selectedItem: selectedItem2\n      });\n    })) : null);\n  });\n}\n\nDownshiftMultiple.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1,\n      height: 250\n    },\n    container: {\n      flexGrow: 1,\n      position: \"relative\"\n    },\n    paper: {\n      position: \"absolute\",\n      zIndex: 1,\n      marginTop: theme.spacing(1),\n      left: 0,\n      right: 0\n    },\n    chip: {\n      margin: theme.spacing(0.5, 0.25)\n    },\n    inputRoot: {\n      flexWrap: \"wrap\"\n    },\n    inputInput: {\n      width: \"auto\",\n      flexGrow: 1\n    },\n    divider: {\n      height: theme.spacing(2)\n    }\n  };\n});\nvar popperNode; // Example 2\n\nvar useStyles2 = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1,\n      height: 250\n    },\n    input: {\n      display: \"flex\",\n      padding: 0,\n      height: \"auto\"\n    },\n    valueContainer: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      flex: 1,\n      alignItems: \"center\",\n      overflow: \"hidden\"\n    },\n    chip: {\n      margin: theme.spacing(0.5, 0.25)\n    },\n    chipFocused: {\n      backgroundColor: emphasize(theme.palette.type === \"light\" ? theme.palette.grey[300] : theme.palette.grey[700], 0.08)\n    },\n    noOptionsMessage: {\n      padding: theme.spacing(1, 2)\n    },\n    singleValue: {\n      fontSize: 16\n    },\n    placeholder: {\n      position: \"absolute\",\n      left: 2,\n      bottom: 6,\n      fontSize: 16\n    },\n    paper: {\n      position: \"absolute\",\n      zIndex: 1,\n      marginTop: theme.spacing(1),\n      left: 0,\n      right: 0\n    },\n    divider: {\n      height: theme.spacing(2)\n    }\n  };\n});\n\nfunction NoOptionsMessage(props) {\n  return /*#__PURE__*/React.createElement(Typography, Object.assign({\n    color: \"textSecondary\",\n    className: props.selectProps.classes.noOptionsMessage\n  }, props.innerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 5\n    }\n  }), props.children);\n}\n\nNoOptionsMessage.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object.isRequired\n};\n\nfunction inputComponent(_ref3) {\n  var inputRef = _ref3.inputRef,\n      props = _objectWithoutProperties(_ref3, [\"inputRef\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: inputRef\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 10\n    }\n  }));\n}\n\ninputComponent.propTypes = {\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n};\n\nfunction Control(props) {\n  var children = props.children,\n      innerProps = props.innerProps,\n      innerRef = props.innerRef,\n      _props$selectProps = props.selectProps,\n      classes = _props$selectProps.classes,\n      TextFieldProps = _props$selectProps.TextFieldProps;\n  return /*#__PURE__*/React.createElement(TextField, Object.assign({\n    fullWidth: true,\n    InputProps: {\n      inputComponent: inputComponent,\n      inputProps: _objectSpread({\n        className: classes.input,\n        ref: innerRef,\n        children: children\n      }, innerProps)\n    }\n  }, TextFieldProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 5\n    }\n  }));\n}\n\nControl.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  selectProps: PropTypes.object.isRequired\n};\n\nfunction Option(props) {\n  return /*#__PURE__*/React.createElement(MenuItem, Object.assign({\n    ref: props.innerRef,\n    selected: props.isFocused,\n    component: \"div\",\n    key: \"option2\".concat(props.children),\n    style: {\n      fontWeight: props.isSelected ? 500 : 400\n    }\n  }, props.innerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 5\n    }\n  }), props.children);\n}\n\nOption.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  isFocused: PropTypes.bool,\n  isSelected: PropTypes.bool\n};\n\nfunction Placeholder(props) {\n  return /*#__PURE__*/React.createElement(Typography, Object.assign({\n    color: \"textSecondary\",\n    key: props.children,\n    className: props.selectProps.classes.placeholder\n  }, props.innerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 5\n    }\n  }), props.children);\n}\n\nPlaceholder.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object.isRequired\n};\n\nfunction SingleValue(props) {\n  return /*#__PURE__*/React.createElement(Typography, Object.assign({\n    key: props.children,\n    className: props.selectProps.classes.singleValue\n  }, props.innerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 5\n    }\n  }), props.children);\n}\n\nSingleValue.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object.isRequired\n};\n\nfunction ValueContainer(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    key: props.children,\n    className: props.selectProps.classes.valueContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 5\n    }\n  }, props.children);\n}\n\nValueContainer.propTypes = {\n  children: PropTypes.node,\n  selectProps: PropTypes.object.isRequired\n};\n\nfunction MultiValue(props) {\n  return /*#__PURE__*/React.createElement(Chip, {\n    tabIndex: -1,\n    label: props.children,\n    key: \"chip2\".concat(props.children),\n    className: clsx(props.selectProps.classes.chip, _defineProperty({}, props.selectProps.classes.chipFocused, props.isFocused)),\n    onDelete: props.removeProps.onClick,\n    deleteIcon: /*#__PURE__*/React.createElement(CancelIcon, Object.assign({}, props.removeProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 19\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 5\n    }\n  });\n}\n\nMultiValue.propTypes = {\n  children: PropTypes.node,\n  isFocused: PropTypes.bool,\n  removeProps: PropTypes.object.isRequired,\n  selectProps: PropTypes.object.isRequired\n};\n\nfunction Menu(props) {\n  return /*#__PURE__*/React.createElement(Paper, Object.assign({\n    square: true,\n    key: props.children,\n    className: props.selectProps.classes.paper\n  }, props.innerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 5\n    }\n  }), props.children);\n}\n\nMenu.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object\n};\nvar components = {\n  Control: Control,\n  Menu: Menu,\n  MultiValue: MultiValue,\n  NoOptionsMessage: NoOptionsMessage,\n  Option: Option,\n  Placeholder: Placeholder,\n  SingleValue: SingleValue,\n  ValueContainer: ValueContainer\n};\nexport default function AutocompleteExamplesPage() {\n  var _this2 = this;\n\n  var classes = useStyles();\n  var classes2 = useStyles2();\n  var theme = useTheme();\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      single = _React$useState6[0],\n      setSingle = _React$useState6[1];\n\n  var _React$useState7 = React.useState(null),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      multi = _React$useState8[0],\n      setMulti = _React$useState8[1];\n\n  function handleChangeSingle(value) {\n    setSingle(value);\n  }\n\n  function handleChangeMulti(value) {\n    setMulti(value);\n  }\n\n  var selectStyles = {\n    input: function input(base) {\n      return _objectSpread(_objectSpread({}, base), {}, {\n        color: theme.palette.text.primary,\n        \"& input\": {\n          font: \"inherit\"\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Notice, {\n    icon: \"flaticon-warning font-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 9\n    }\n  }, \"The autocomplete is a normal text input enhanced by a panel of suggested options.\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 9\n    }\n  }, \"For more info please check the components's official\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    className: \"font-weight-bold\",\n    rel: \"noopener noreferrer\",\n    href: \"https://material-ui.com/components/autocomplete/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 11\n    }\n  }, \"demos & documentation\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode1,\n    beforeCodeTitle: \"Downshift\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 13\n    }\n  }, \"In the following example, we demonstrate how to use\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/downshift-js/downshift\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 17\n    }\n  }, \"downshift\")), \". The last demo allow to clear the input and show a number of options on focus.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Downshift, {\n    id: \"downshift-simple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 15\n    }\n  }, function (_ref4) {\n    var getInputProps = _ref4.getInputProps,\n        getItemProps = _ref4.getItemProps,\n        getLabelProps = _ref4.getLabelProps,\n        getMenuProps = _ref4.getMenuProps,\n        highlightedIndex = _ref4.highlightedIndex,\n        inputValue = _ref4.inputValue,\n        isOpen = _ref4.isOpen,\n        selectedItem = _ref4.selectedItem;\n\n    var _getInputProps2 = getInputProps({\n      placeholder: \"Search for a country (start with a)\"\n    }),\n        onBlur = _getInputProps2.onBlur,\n        onFocus = _getInputProps2.onFocus,\n        inputProps = _objectWithoutProperties(_getInputProps2, [\"onBlur\", \"onFocus\"]);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 21\n      }\n    }, renderInput({\n      fullWidth: true,\n      classes: classes,\n      label: \"Country\",\n      InputLabelProps: getLabelProps({\n        shrink: true\n      }),\n      InputProps: {\n        onBlur: onBlur,\n        onFocus: onFocus\n      },\n      inputProps: inputProps\n    }), /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getMenuProps(), {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 23\n      }\n    }), isOpen ? /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      square: true,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 27\n      }\n    }, getSuggestions(inputValue).map(function (suggestion, index) {\n      return renderSuggestion({\n        suggestion: suggestion,\n        index: index,\n        itemProps: getItemProps({\n          item: suggestion.label\n        }),\n        highlightedIndex: highlightedIndex,\n        selectedItem: selectedItem\n      });\n    })) : null));\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(DownshiftMultiple, {\n    classes: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Downshift, {\n    id: \"downshift-popper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 15\n    }\n  }, function (_ref5) {\n    var getInputProps = _ref5.getInputProps,\n        getItemProps = _ref5.getItemProps,\n        getLabelProps = _ref5.getLabelProps,\n        getMenuProps = _ref5.getMenuProps,\n        highlightedIndex = _ref5.highlightedIndex,\n        inputValue = _ref5.inputValue,\n        isOpen = _ref5.isOpen,\n        selectedItem = _ref5.selectedItem;\n\n    var _getInputProps3 = getInputProps({\n      placeholder: \"With Popper\"\n    }),\n        onBlur = _getInputProps3.onBlur,\n        onFocus = _getInputProps3.onFocus,\n        inputProps = _objectWithoutProperties(_getInputProps3, [\"onBlur\", \"onFocus\"]);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 21\n      }\n    }, renderInput({\n      fullWidth: true,\n      classes: classes,\n      label: \"Country\",\n      InputProps: {\n        onBlur: onBlur,\n        onFocus: onFocus\n      },\n      InputLabelProps: getLabelProps({\n        shrink: true\n      }),\n      inputProps: inputProps,\n      ref: function ref(node) {\n        popperNode = node;\n      }\n    }), /*#__PURE__*/React.createElement(Popper, {\n      open: isOpen,\n      anchorEl: popperNode,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, isOpen ? getMenuProps({}, {\n      suppressRefError: true\n    }) : {}, {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Paper, {\n      square: true,\n      style: {\n        marginTop: 8,\n        width: popperNode ? popperNode.clientWidth : undefined\n      },\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 27\n      }\n    }, getSuggestions(inputValue).map(function (suggestion, index) {\n      return renderSuggestion({\n        suggestion: suggestion,\n        index: index,\n        itemProps: getItemProps({\n          item: suggestion.label\n        }),\n        highlightedIndex: highlightedIndex,\n        selectedItem: selectedItem\n      });\n    })))));\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Downshift, {\n    id: \"downshift-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 15\n    }\n  }, function (_ref6) {\n    var clearSelection = _ref6.clearSelection,\n        getInputProps = _ref6.getInputProps,\n        getItemProps = _ref6.getItemProps,\n        getLabelProps = _ref6.getLabelProps,\n        getMenuProps = _ref6.getMenuProps,\n        highlightedIndex = _ref6.highlightedIndex,\n        inputValue = _ref6.inputValue,\n        isOpen = _ref6.isOpen,\n        openMenu = _ref6.openMenu,\n        selectedItem = _ref6.selectedItem;\n\n    var _getInputProps4 = getInputProps({\n      onChange: function onChange(event) {\n        if (event.target.value === \"\") {\n          clearSelection();\n        }\n      },\n      onFocus: openMenu,\n      placeholder: \"With the clear & show empty options\"\n    }),\n        onBlur = _getInputProps4.onBlur,\n        onChange = _getInputProps4.onChange,\n        onFocus = _getInputProps4.onFocus,\n        inputProps = _objectWithoutProperties(_getInputProps4, [\"onBlur\", \"onChange\", \"onFocus\"]);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 21\n      }\n    }, renderInput({\n      fullWidth: true,\n      classes: classes,\n      label: \"Countries\",\n      InputLabelProps: getLabelProps({\n        shrink: true\n      }),\n      InputProps: {\n        onBlur: onBlur,\n        onChange: onChange,\n        onFocus: onFocus\n      },\n      inputProps: inputProps\n    }), /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getMenuProps(), {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 23\n      }\n    }), isOpen ? /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      square: true,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 27\n      }\n    }, getSuggestions(inputValue, {\n      showEmpty: true\n    }).map(function (suggestion, index) {\n      return renderSuggestion({\n        suggestion: suggestion,\n        index: index,\n        itemProps: getItemProps({\n          item: suggestion.label\n        }),\n        highlightedIndex: highlightedIndex,\n        selectedItem: selectedItem\n      });\n    })) : null));\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode2,\n    beforeCodeTitle: \"React-select\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 756,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 761,\n      columnNumber: 13\n    }\n  }, \"In the following example, we demonstrate how to use\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/JedWatson/react-select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 764,\n      columnNumber: 17\n    }\n  }, \"react-select\")), \".\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 768,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes2.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 769,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(NoSsr, {\n    key: \"nossr22\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 770,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    className: \"react-select\",\n    classes: classes2,\n    styles: selectStyles,\n    inputId: \"react-select-single\",\n    TextFieldProps: {\n      label: \"Country\",\n      InputLabelProps: {\n        htmlFor: \"react-select-single\",\n        shrink: true\n      },\n      placeholder: \"Search a country (start with a)\"\n    },\n    options: suggestions,\n    components: components,\n    value: single,\n    onChange: handleChangeSingle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 771,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes2.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Select, {\n    key: \"\",\n    className: \"react-select\",\n    classes: classes2,\n    styles: selectStyles,\n    inputId: \"react-select-multiple\",\n    TextFieldProps: {\n      label: \"Countries\",\n      InputLabelProps: {\n        htmlFor: \"react-select-multiple\",\n        shrink: true\n      },\n      placeholder: \"Select multiple countries\"\n    },\n    options: suggestions,\n    components: components,\n    value: multi,\n    onChange: handleChangeMulti,\n    isMulti: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 790,\n      columnNumber: 17\n    }\n  })))))));\n}\nvar jsCode1 = \"\\nimport React from 'react';\\nimport PropTypes from 'prop-types';\\nimport deburr from 'lodash/deburr';\\nimport Downshift from 'downshift';\\nimport { makeStyles } from '@material-ui/core/styles';\\nimport TextField from '@material-ui/core/TextField';\\nimport Popper from '@material-ui/core/Popper';\\nimport Paper from '@material-ui/core/Paper';\\nimport MenuItem from '@material-ui/core/MenuItem';\\nimport Chip from '@material-ui/core/Chip';\\n\\nconst suggestions = [\\n  { label: 'Afghanistan' },\\n  { label: 'Aland Islands' },\\n  { label: 'Albania' },\\n  { label: 'Algeria' },\\n  { label: 'American Samoa' },\\n  { label: 'Andorra' },\\n  { label: 'Angola' },\\n  { label: 'Anguilla' },\\n  { label: 'Antarctica' },\\n  { label: 'Antigua and Barbuda' },\\n  { label: 'Argentina' },\\n  { label: 'Armenia' },\\n  { label: 'Aruba' },\\n  { label: 'Australia' },\\n  { label: 'Austria' },\\n  { label: 'Azerbaijan' },\\n  { label: 'Bahamas' },\\n  { label: 'Bahrain' },\\n  { label: 'Bangladesh' },\\n  { label: 'Barbados' },\\n  { label: 'Belarus' },\\n  { label: 'Belgium' },\\n  { label: 'Belize' },\\n  { label: 'Benin' },\\n  { label: 'Bermuda' },\\n  { label: 'Bhutan' },\\n  { label: 'Bolivia, Plurinational State of' },\\n  { label: 'Bonaire, Sint Eustatius and Saba' },\\n  { label: 'Bosnia and Herzegovina' },\\n  { label: 'Botswana' },\\n  { label: 'Bouvet Island' },\\n  { label: 'Brazil' },\\n  { label: 'British Indian Ocean Territory' },\\n  { label: 'Brunei Darussalam' },\\n];\\n\\nfunction renderInput(inputProps) {\\n  const { InputProps, classes, ref, ...other } = inputProps;\\n\\n  return (\\n    <TextField\\n      InputProps={{\\n        inputRef: ref,\\n        classes: {\\n          root: classes.inputRoot,\\n          input: classes.inputInput,\\n        },\\n        ...InputProps,\\n      }}\\n      {...other}\\n    />\\n  );\\n}\\n\\nfunction renderSuggestion(suggestionProps) {\\n  const { suggestion, index, itemProps, highlightedIndex, selectedItem } = suggestionProps;\\n  const isHighlighted = highlightedIndex === index;\\n  const isSelected = (selectedItem || '').indexOf(suggestion.label) > -1;\\n\\n  return (\\n    <MenuItem\\n      {...itemProps}\\n      key={suggestion.label}\\n      selected={isHighlighted}\\n      component=\\\"div\\\"\\n      style={{\\n        fontWeight: isSelected ? 500 : 400,\\n      }}\\n    >\\n      {suggestion.label}\\n    </MenuItem>\\n  );\\n}\\nrenderSuggestion.propTypes = {\\n  highlightedIndex: PropTypes.number,\\n  index: PropTypes.number,\\n  itemProps: PropTypes.object,\\n  selectedItem: PropTypes.string,\\n  suggestion: PropTypes.shape({ label: PropTypes.string }).isRequired,\\n};\\n\\nfunction getSuggestions(value, { showEmpty = false } = {}) {\\n  const inputValue = deburr(value.trim()).toLowerCase();\\n  const inputLength = inputValue.length;\\n  let count = 0;\\n\\n  return inputLength === 0 && !showEmpty\\n    ? []\\n    : suggestions.filter(suggestion => {\\n        const keep =\\n          count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\\n\\n        if (keep) {\\n          count += 1;\\n        }\\n\\n        return keep;\\n      });\\n}\\n\\nfunction DownshiftMultiple(props) {\\n  const { classes } = props;\\n  const [inputValue, setInputValue] = React.useState('');\\n  const [selectedItem, setSelectedItem] = React.useState([]);\\n\\n  function handleKeyDown(event) {\\n    if (selectedItem.length && !inputValue.length && event.key === 'Backspace') {\\n      setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\\n    }\\n  }\\n\\n  function handleInputChange(event) {\\n    setInputValue(event.target.value);\\n  }\\n\\n  function handleChange(item) {\\n    let newSelectedItem = [...selectedItem];\\n    if (newSelectedItem.indexOf(item) === -1) {\\n      newSelectedItem = [...newSelectedItem, item];\\n    }\\n    setInputValue('');\\n    setSelectedItem(newSelectedItem);\\n  }\\n\\n  const handleDelete = item => () => {\\n    const newSelectedItem = [...selectedItem];\\n    newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\\n    setSelectedItem(newSelectedItem);\\n  };\\n\\n  return (\\n    <Downshift\\n      id=\\\"downshift-multiple\\\"\\n      inputValue={inputValue}\\n      onChange={handleChange}\\n      selectedItem={selectedItem}\\n    >\\n      {({\\n        getInputProps,\\n        getItemProps,\\n        getLabelProps,\\n        isOpen,\\n        inputValue: inputValue2,\\n        selectedItem: selectedItem2,\\n        highlightedIndex,\\n      }) => {\\n        const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\\n          onKeyDown: handleKeyDown,\\n          placeholder: 'Select multiple countries',\\n        });\\n\\n        return (\\n          <div className={classes.container}>\\n            {renderInput({\\n              fullWidth: true,\\n              classes,\\n              label: 'Countries',\\n              InputLabelProps: getLabelProps(),\\n              InputProps: {\\n                startAdornment: selectedItem.map(item => (\\n                  <Chip\\n                    key={item}\\n                    tabIndex={-1}\\n                    label={item}\\n                    className={classes.chip}\\n                    onDelete={handleDelete(item)}\\n                  />\\n                )),\\n                onBlur,\\n                onChange: event => {\\n                  handleInputChange(event);\\n                  onChange(event);\\n                },\\n                onFocus,\\n              },\\n              inputProps,\\n            })}\\n\\n            {isOpen ? (\\n              <Paper className={classes.paper} square>\\n                {getSuggestions(inputValue2).map((suggestion, index) =>\\n                  renderSuggestion({\\n                    suggestion,\\n                    index,\\n                    itemProps: getItemProps({ item: suggestion.label }),\\n                    highlightedIndex,\\n                    selectedItem: selectedItem2,\\n                  }),\\n                )}\\n              </Paper>\\n            ) : null}\\n          </div>\\n        );\\n      }}\\n    </Downshift>\\n  );\\n}\\n\\nDownshiftMultiple.propTypes = {\\n  classes: PropTypes.object.isRequired,\\n};\\n\\nconst useStyles = makeStyles(theme => ({\\n  root: {\\n    flexGrow: 1,\\n    height: 250,\\n  },\\n  container: {\\n    flexGrow: 1,\\n    position: 'relative',\\n  },\\n  paper: {\\n    position: 'absolute',\\n    zIndex: 1,\\n    marginTop: theme.spacing(1),\\n    left: 0,\\n    right: 0,\\n  },\\n  chip: {\\n    margin: theme.spacing(0.5, 0.25),\\n  },\\n  inputRoot: {\\n    flexWrap: 'wrap',\\n  },\\n  inputInput: {\\n    width: 'auto',\\n    flexGrow: 1,\\n  },\\n  divider: {\\n    height: theme.spacing(2),\\n  },\\n}));\\n\\nlet popperNode;\\n\\nexport default function IntegrationDownshift() {\\n  const classes = useStyles();\\n\\n  return (\\n    <div className={classes.root}>\\n      <Downshift id=\\\"downshift-simple\\\">\\n        {({\\n          getInputProps,\\n          getItemProps,\\n          getLabelProps,\\n          getMenuProps,\\n          highlightedIndex,\\n          inputValue,\\n          isOpen,\\n          selectedItem,\\n        }) => {\\n          const { onBlur, onFocus, ...inputProps } = getInputProps({\\n            placeholder: 'Search for a country (start with a)',\\n          });\\n\\n          return (\\n            <div className={classes.container}>\\n              {renderInput({\\n                fullWidth: true,\\n                classes,\\n                label: 'Country',\\n                InputLabelProps: getLabelProps({ shrink: true }),\\n                InputProps: { onBlur, onFocus },\\n                inputProps,\\n              })}\\n\\n              <div {...getMenuProps()}>\\n                {isOpen ? (\\n                  <Paper className={classes.paper} square>\\n                    {getSuggestions(inputValue).map((suggestion, index) =>\\n                      renderSuggestion({\\n                        suggestion,\\n                        index,\\n                        itemProps: getItemProps({ item: suggestion.label }),\\n                        highlightedIndex,\\n                        selectedItem,\\n                      }),\\n                    )}\\n                  </Paper>\\n                ) : null}\\n              </div>\\n            </div>\\n          );\\n        }}\\n      </Downshift>\\n      <div className={classes.divider} />\\n      <DownshiftMultiple classes={classes} />\\n      <div className={classes.divider} />\\n      <Downshift id=\\\"downshift-popper\\\">\\n        {({\\n          getInputProps,\\n          getItemProps,\\n          getLabelProps,\\n          getMenuProps,\\n          highlightedIndex,\\n          inputValue,\\n          isOpen,\\n          selectedItem,\\n        }) => {\\n          const { onBlur, onFocus, ...inputProps } = getInputProps({\\n            placeholder: 'With Popper',\\n          });\\n\\n          return (\\n            <div className={classes.container}>\\n              {renderInput({\\n                fullWidth: true,\\n                classes,\\n                label: 'Country',\\n                InputProps: { onBlur, onFocus },\\n                InputLabelProps: getLabelProps({ shrink: true }),\\n                inputProps,\\n                ref: node => {\\n                  popperNode = node;\\n                },\\n              })}\\n\\n              <Popper open={isOpen} anchorEl={popperNode}>\\n                <div {...(isOpen ? getMenuProps({}, { suppressRefError: true }) : {})}>\\n                  <Paper\\n                    square\\n                    style={{ marginTop: 8, width: popperNode ? popperNode.clientWidth : undefined }}\\n                  >\\n                    {getSuggestions(inputValue).map((suggestion, index) =>\\n                      renderSuggestion({\\n                        suggestion,\\n                        index,\\n                        itemProps: getItemProps({ item: suggestion.label }),\\n                        highlightedIndex,\\n                        selectedItem,\\n                      }),\\n                    )}\\n                  </Paper>\\n                </div>\\n              </Popper>\\n            </div>\\n          );\\n        }}\\n      </Downshift>\\n      <div className={classes.divider} />\\n      <Downshift id=\\\"downshift-options\\\">\\n        {({\\n          clearSelection,\\n          getInputProps,\\n          getItemProps,\\n          getLabelProps,\\n          getMenuProps,\\n          highlightedIndex,\\n          inputValue,\\n          isOpen,\\n          openMenu,\\n          selectedItem,\\n        }) => {\\n          const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\\n            onChange: event => {\\n              if (event.target.value === '') {\\n                clearSelection();\\n              }\\n            },\\n            onFocus: openMenu,\\n            placeholder: 'With the clear & show empty options',\\n          });\\n\\n          return (\\n            <div className={classes.container}>\\n              {renderInput({\\n                fullWidth: true,\\n                classes,\\n                label: 'Countries',\\n                InputLabelProps: getLabelProps({ shrink: true }),\\n                InputProps: { onBlur, onChange, onFocus },\\n                inputProps,\\n              })}\\n\\n              <div {...getMenuProps()}>\\n                {isOpen ? (\\n                  <Paper className={classes.paper} square>\\n                    {getSuggestions(inputValue, { showEmpty: true }).map((suggestion, index) =>\\n                      renderSuggestion({\\n                        suggestion,\\n                        index,\\n                        itemProps: getItemProps({ item: suggestion.label }),\\n                        highlightedIndex,\\n                        selectedItem,\\n                      }),\\n                    )}\\n                  </Paper>\\n                ) : null}\\n              </div>\\n            </div>\\n          );\\n        }}\\n      </Downshift>\\n    </div>\\n  );\\n}\\n\";\nvar jsCode2 = \"\\nimport React from 'react';\\nimport clsx from 'clsx';\\nimport Select from 'react-select';\\nimport { emphasize, makeStyles, useTheme } from '@material-ui/core/styles';\\nimport Typography from '@material-ui/core/Typography';\\nimport NoSsr from '@material-ui/core/NoSsr';\\nimport TextField from '@material-ui/core/TextField';\\nimport Paper from '@material-ui/core/Paper';\\nimport Chip from '@material-ui/core/Chip';\\nimport MenuItem from '@material-ui/core/MenuItem';\\nimport CancelIcon from '@material-ui/icons/Cancel';\\nimport PropTypes from 'prop-types';\\n\\nconst suggestions = [\\n  { label: 'Afghanistan' },\\n  { label: 'Aland Islands' },\\n  { label: 'Albania' },\\n  { label: 'Algeria' },\\n  { label: 'American Samoa' },\\n  { label: 'Andorra' },\\n  { label: 'Angola' },\\n  { label: 'Anguilla' },\\n  { label: 'Antarctica' },\\n  { label: 'Antigua and Barbuda' },\\n  { label: 'Argentina' },\\n  { label: 'Armenia' },\\n  { label: 'Aruba' },\\n  { label: 'Australia' },\\n  { label: 'Austria' },\\n  { label: 'Azerbaijan' },\\n  { label: 'Bahamas' },\\n  { label: 'Bahrain' },\\n  { label: 'Bangladesh' },\\n  { label: 'Barbados' },\\n  { label: 'Belarus' },\\n  { label: 'Belgium' },\\n  { label: 'Belize' },\\n  { label: 'Benin' },\\n  { label: 'Bermuda' },\\n  { label: 'Bhutan' },\\n  { label: 'Bolivia, Plurinational State of' },\\n  { label: 'Bonaire, Sint Eustatius and Saba' },\\n  { label: 'Bosnia and Herzegovina' },\\n  { label: 'Botswana' },\\n  { label: 'Bouvet Island' },\\n  { label: 'Brazil' },\\n  { label: 'British Indian Ocean Territory' },\\n  { label: 'Brunei Darussalam' },\\n].map(suggestion => ({\\n  value: suggestion.label,\\n  label: suggestion.label,\\n}));\\n\\nconst useStyles = makeStyles(theme => ({\\n  root: {\\n    flexGrow: 1,\\n    height: 250,\\n  },\\n  input: {\\n    display: 'flex',\\n    padding: 0,\\n    height: 'auto',\\n  },\\n  valueContainer: {\\n    display: 'flex',\\n    flexWrap: 'wrap',\\n    flex: 1,\\n    alignItems: 'center',\\n    overflow: 'hidden',\\n  },\\n  chip: {\\n    margin: theme.spacing(0.5, 0.25),\\n  },\\n  chipFocused: {\\n    backgroundColor: emphasize(\\n      theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[700],\\n      0.08,\\n    ),\\n  },\\n  noOptionsMessage: {\\n    padding: theme.spacing(1, 2),\\n  },\\n  singleValue: {\\n    fontSize: 16,\\n  },\\n  placeholder: {\\n    position: 'absolute',\\n    left: 2,\\n    bottom: 6,\\n    fontSize: 16,\\n  },\\n  paper: {\\n    position: 'absolute',\\n    zIndex: 1,\\n    marginTop: theme.spacing(1),\\n    left: 0,\\n    right: 0,\\n  },\\n  divider: {\\n    height: theme.spacing(2),\\n  },\\n}));\\n\\nfunction NoOptionsMessage(props) {\\n  return (\\n    <Typography\\n      color=\\\"textSecondary\\\"\\n      className={props.selectProps.classes.noOptionsMessage}\\n      {...props.innerProps}\\n    >\\n      {props.children}\\n    </Typography>\\n  );\\n}\\n\\nNoOptionsMessage.propTypes = {\\n  children: PropTypes.node,\\n  innerProps: PropTypes.object,\\n  selectProps: PropTypes.object.isRequired,\\n};\\n\\nfunction inputComponent({ inputRef, ...props }) {\\n  return <div ref={inputRef} {...props} />;\\n}\\n\\ninputComponent.propTypes = {\\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\\n};\\n\\nfunction Control(props) {\\n  const {\\n    children,\\n    innerProps,\\n    innerRef,\\n    selectProps: { classes, TextFieldProps },\\n  } = props;\\n\\n  return (\\n    <TextField\\n      fullWidth\\n      InputProps={{\\n        inputComponent,\\n        inputProps: {\\n          className: classes.input,\\n          ref: innerRef,\\n          children,\\n          ...innerProps,\\n        },\\n      }}\\n      {...TextFieldProps}\\n    />\\n  );\\n}\\n\\nControl.propTypes = {\\n  children: PropTypes.node,\\n  innerProps: PropTypes.object,\\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\\n  selectProps: PropTypes.object.isRequired,\\n};\\n\\nfunction Option(props) {\\n  return (\\n    <MenuItem\\n      ref={props.innerRef}\\n      selected={props.isFocused}\\n      component=\\\"div\\\"\\n      style={{\\n        fontWeight: props.isSelected ? 500 : 400,\\n      }}\\n      {...props.innerProps}\\n    >\\n      {props.children}\\n    </MenuItem>\\n  );\\n}\\n\\nOption.propTypes = {\\n  children: PropTypes.node,\\n  innerProps: PropTypes.object,\\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\\n  isFocused: PropTypes.bool,\\n  isSelected: PropTypes.bool,\\n};\\n\\nfunction Placeholder(props) {\\n  return (\\n    <Typography\\n      color=\\\"textSecondary\\\"\\n      className={props.selectProps.classes.placeholder}\\n      {...props.innerProps}\\n    >\\n      {props.children}\\n    </Typography>\\n  );\\n}\\n\\nPlaceholder.propTypes = {\\n  children: PropTypes.node,\\n  innerProps: PropTypes.object,\\n  selectProps: PropTypes.object.isRequired,\\n};\\n\\nfunction SingleValue(props) {\\n  return (\\n    <Typography className={props.selectProps.classes.singleValue} {...props.innerProps}>\\n      {props.children}\\n    </Typography>\\n  );\\n}\\n\\nSingleValue.propTypes = {\\n  children: PropTypes.node,\\n  innerProps: PropTypes.object,\\n  selectProps: PropTypes.object.isRequired,\\n};\\n\\nfunction ValueContainer(props) {\\n  return <div className={props.selectProps.classes.valueContainer}>{props.children}</div>;\\n}\\n\\nValueContainer.propTypes = {\\n  children: PropTypes.node,\\n  selectProps: PropTypes.object.isRequired,\\n};\\n\\nfunction MultiValue(props) {\\n  return (\\n    <Chip\\n      tabIndex={-1}\\n      label={props.children}\\n      className={clsx(props.selectProps.classes.chip, {\\n        [props.selectProps.classes.chipFocused]: props.isFocused,\\n      })}\\n      onDelete={props.removeProps.onClick}\\n      deleteIcon={<CancelIcon {...props.removeProps} />}\\n    />\\n  );\\n}\\n\\nMultiValue.propTypes = {\\n  children: PropTypes.node,\\n  isFocused: PropTypes.bool,\\n  removeProps: PropTypes.object.isRequired,\\n  selectProps: PropTypes.object.isRequired,\\n};\\n\\nfunction Menu(props) {\\n  return (\\n    <Paper square className={props.selectProps.classes.paper} {...props.innerProps}>\\n      {props.children}\\n    </Paper>\\n  );\\n}\\n\\nMenu.propTypes = {\\n  children: PropTypes.node,\\n  innerProps: PropTypes.object,\\n  selectProps: PropTypes.object,\\n};\\n\\nconst components = {\\n  Control,\\n  Menu,\\n  MultiValue,\\n  NoOptionsMessage,\\n  Option,\\n  Placeholder,\\n  SingleValue,\\n  ValueContainer,\\n};\\n\\nexport default function IntegrationReactSelect() {\\n  const classes = useStyles();\\n  const theme = useTheme();\\n  const [single, setSingle] = React.useState(null);\\n  const [multi, setMulti] = React.useState(null);\\n\\n  function handleChangeSingle(value) {\\n    setSingle(value);\\n  }\\n\\n  function handleChangeMulti(value) {\\n    setMulti(value);\\n  }\\n\\n  const selectStyles = {\\n    input: base => ({\\n      ...base,\\n      color: theme.palette.text.primary,\\n      '& input': {\\n        font: 'inherit',\\n      },\\n    }),\\n  };\\n\\n  return (\\n    <div className={classes.root}>\\n      <NoSsr>\\n        <Select\\n          classes={classes}\\n          styles={selectStyles}\\n          inputId=\\\"react-select-single\\\"\\n          TextFieldProps={{\\n            label: 'Country',\\n            InputLabelProps: {\\n              htmlFor: 'react-select-single',\\n              shrink: true,\\n            },\\n            placeholder: 'Search a country (start with a)',\\n          }}\\n          options={suggestions}\\n          components={components}\\n          value={single}\\n          onChange={handleChangeSingle}\\n        />\\n        <div className={classes.divider} />\\n        <Select\\n          classes={classes}\\n          styles={selectStyles}\\n          inputId=\\\"react-select-multiple\\\"\\n          TextFieldProps={{\\n            label: 'Countries',\\n            InputLabelProps: {\\n              htmlFor: 'react-select-multiple',\\n              shrink: true,\\n            },\\n            placeholder: 'Select multiple countries',\\n          }}\\n          options={suggestions}\\n          components={components}\\n          value={multi}\\n          onChange={handleChangeMulti}\\n          isMulti\\n        />\\n      </NoSsr>\\n    </div>\\n  );\\n}\\n\";\nvar jsCode3 = \"\\nimport React from 'react';\\nimport deburr from 'lodash/deburr';\\nimport Autosuggest from 'react-autosuggest';\\nimport match from 'autosuggest-highlight/match';\\nimport parse from 'autosuggest-highlight/parse';\\nimport TextField from '@material-ui/core/TextField';\\nimport Paper from '@material-ui/core/Paper';\\nimport MenuItem from '@material-ui/core/MenuItem';\\nimport Popper from '@material-ui/core/Popper';\\nimport { makeStyles } from '@material-ui/core/styles';\\n\\nconst suggestions = [\\n  { label: 'Afghanistan' },\\n  { label: 'Aland Islands' },\\n  { label: 'Albania' },\\n  { label: 'Algeria' },\\n  { label: 'American Samoa' },\\n  { label: 'Andorra' },\\n  { label: 'Angola' },\\n  { label: 'Anguilla' },\\n  { label: 'Antarctica' },\\n  { label: 'Antigua and Barbuda' },\\n  { label: 'Argentina' },\\n  { label: 'Armenia' },\\n  { label: 'Aruba' },\\n  { label: 'Australia' },\\n  { label: 'Austria' },\\n  { label: 'Azerbaijan' },\\n  { label: 'Bahamas' },\\n  { label: 'Bahrain' },\\n  { label: 'Bangladesh' },\\n  { label: 'Barbados' },\\n  { label: 'Belarus' },\\n  { label: 'Belgium' },\\n  { label: 'Belize' },\\n  { label: 'Benin' },\\n  { label: 'Bermuda' },\\n  { label: 'Bhutan' },\\n  { label: 'Bolivia, Plurinational State of' },\\n  { label: 'Bonaire, Sint Eustatius and Saba' },\\n  { label: 'Bosnia and Herzegovina' },\\n  { label: 'Botswana' },\\n  { label: 'Bouvet Island' },\\n  { label: 'Brazil' },\\n  { label: 'British Indian Ocean Territory' },\\n  { label: 'Brunei Darussalam' },\\n];\\n\\nfunction renderInputComponent(inputProps) {\\n  const { classes, inputRef = () => {}, ref, ...other } = inputProps;\\n\\n  return (\\n    <TextField\\n      fullWidth\\n      InputProps={{\\n        inputRef: node => {\\n          ref(node);\\n          inputRef(node);\\n        },\\n        classes: {\\n          input: classes.input,\\n        },\\n      }}\\n      {...other}\\n    />\\n  );\\n}\\n\\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\\n  const matches = match(suggestion.label, query);\\n  const parts = parse(suggestion.label, matches);\\n\\n  return (\\n    <MenuItem selected={isHighlighted} component=\\\"div\\\">\\n      <div>\\n        {parts.map(part => (\\n          <span key={part.text} style={{ fontWeight: part.highlight ? 500 : 400 }}>\\n            {part.text}\\n          </span>\\n        ))}\\n      </div>\\n    </MenuItem>\\n  );\\n}\\n\\nfunction getSuggestions(value) {\\n  const inputValue = deburr(value.trim()).toLowerCase();\\n  const inputLength = inputValue.length;\\n  let count = 0;\\n\\n  return inputLength === 0\\n    ? []\\n    : suggestions.filter(suggestion => {\\n        const keep =\\n          count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\\n\\n        if (keep) {\\n          count += 1;\\n        }\\n\\n        return keep;\\n      });\\n}\\n\\nfunction getSuggestionValue(suggestion) {\\n  return suggestion.label;\\n}\\n\\nconst useStyles = makeStyles(theme => ({\\n  root: {\\n    height: 250,\\n    flexGrow: 1,\\n  },\\n  container: {\\n    position: 'relative',\\n  },\\n  suggestionsContainerOpen: {\\n    position: 'absolute',\\n    zIndex: 1,\\n    marginTop: theme.spacing(1),\\n    left: 0,\\n    right: 0,\\n  },\\n  suggestion: {\\n    display: 'block',\\n  },\\n  suggestionsList: {\\n    margin: 0,\\n    padding: 0,\\n    listStyleType: 'none',\\n  },\\n  divider: {\\n    height: theme.spacing(2),\\n  },\\n}));\\n\\nexport default function IntegrationAutosuggest() {\\n  const classes = useStyles();\\n  const [anchorEl, setAnchorEl] = React.useState(null);\\n  const [state, setState] = React.useState({\\n    single: '',\\n    popper: '',\\n  });\\n\\n  const [stateSuggestions, setSuggestions] = React.useState([]);\\n\\n  const handleSuggestionsFetchRequested = ({ value }) => {\\n    setSuggestions(getSuggestions(value));\\n  };\\n\\n  const handleSuggestionsClearRequested = () => {\\n    setSuggestions([]);\\n  };\\n\\n  const handleChange = name => (event, { newValue }) => {\\n    setState({\\n      ...state,\\n      [name]: newValue,\\n    });\\n  };\\n\\n  const autosuggestProps = {\\n    renderInputComponent,\\n    suggestions: stateSuggestions,\\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\\n    getSuggestionValue,\\n    renderSuggestion,\\n  };\\n\\n  return (\\n    <div className={classes.root}>\\n      <Autosuggest\\n        {...autosuggestProps}\\n        inputProps={{\\n          classes,\\n          id: 'react-autosuggest-simple',\\n          label: 'Country',\\n          placeholder: 'Search a country (start with a)',\\n          value: state.single,\\n          onChange: handleChange('single'),\\n        }}\\n        theme={{\\n          container: classes.container,\\n          suggestionsContainerOpen: classes.suggestionsContainerOpen,\\n          suggestionsList: classes.suggestionsList,\\n          suggestion: classes.suggestion,\\n        }}\\n        renderSuggestionsContainer={options => (\\n          <Paper {...options.containerProps} square>\\n            {options.children}\\n          </Paper>\\n        )}\\n      />\\n      <div className={classes.divider} />\\n      <Autosuggest\\n        {...autosuggestProps}\\n        inputProps={{\\n          classes,\\n          id: 'react-autosuggest-popper',\\n          label: 'Country',\\n          placeholder: 'With Popper',\\n          value: state.popper,\\n          onChange: handleChange('popper'),\\n          inputRef: node => {\\n            setAnchorEl(node);\\n          },\\n          InputLabelProps: {\\n            shrink: true,\\n          },\\n        }}\\n        theme={{\\n          suggestionsList: classes.suggestionsList,\\n          suggestion: classes.suggestion,\\n        }}\\n        renderSuggestionsContainer={options => (\\n          <Popper anchorEl={anchorEl} open={Boolean(options.children)}>\\n            <Paper\\n              square\\n              {...options.containerProps}\\n              style={{ width: anchorEl ? anchorEl.clientWidth : undefined }}\\n            >\\n              {options.children}\\n            </Paper>\\n          </Popper>\\n        )}\\n      />\\n    </div>\\n  );\\n}\\n\";","map":{"version":3,"sources":["/Applications/MAMP/htdocs/project/client/src/app/modules/GoogleMaterialExamples/inputs/AutocompleteExamplesPage.js"],"names":["React","emphasize","makeStyles","useTheme","clsx","Select","deburr","Downshift","TextField","Popper","Paper","MenuItem","Chip","Typography","NoSsr","PropTypes","CancelIcon","Notice","KTCodeExample","suggestions","label","renderInput","inputProps","InputProps","classes","ref","other","inputRef","root","inputRoot","input","inputInput","renderSuggestion","suggestionProps","suggestion","index","itemProps","highlightedIndex","selectedItem","isHighlighted","isSelected","indexOf","fontWeight","propTypes","number","object","string","shape","isRequired","getSuggestions","value","showEmpty","inputValue","trim","toLowerCase","inputLength","length","count","filter","keep","slice","DownshiftMultiple","props","useState","setInputValue","setSelectedItem","handleKeyDown","event","key","handleInputChange","target","handleChange","item","newSelectedItem","handleDelete","splice","getInputProps","getItemProps","getLabelProps","isOpen","inputValue2","selectedItem2","onKeyDown","placeholder","onBlur","onChange","onFocus","container","fullWidth","InputLabelProps","startAdornment","map","chip","paper","useStyles","theme","flexGrow","height","position","zIndex","marginTop","spacing","left","right","margin","flexWrap","width","divider","popperNode","useStyles2","display","padding","valueContainer","flex","alignItems","overflow","chipFocused","backgroundColor","palette","type","grey","noOptionsMessage","singleValue","fontSize","bottom","NoOptionsMessage","selectProps","innerProps","children","node","inputComponent","oneOfType","func","Control","innerRef","TextFieldProps","className","Option","isFocused","bool","Placeholder","SingleValue","ValueContainer","MultiValue","removeProps","onClick","Menu","components","AutocompleteExamplesPage","classes2","single","setSingle","multi","setMulti","handleChangeSingle","handleChangeMulti","selectStyles","base","color","text","primary","font","jsCode1","getMenuProps","shrink","suppressRefError","clientWidth","undefined","clearSelection","openMenu","jsCode2","htmlFor","jsCode3"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-restricted-imports */\r\nimport React from \"react\";\r\nimport {emphasize, makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport Select from \"react-select\";\r\nimport deburr from \"lodash/deburr\";\r\nimport Downshift from \"downshift\";\r\nimport {\r\n  TextField,\r\n  Popper,\r\n  Paper,\r\n  MenuItem,\r\n  Chip,\r\n  Typography,\r\n  NoSsr\r\n} from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {Notice, KTCodeExample} from \"../../../../_metronic/_partials/controls\";\r\n\r\nconst suggestions = [\r\n  { label: \"Afghanistan\" },\r\n  { label: \"Aland Islands\" },\r\n  { label: \"Albania\" },\r\n  { label: \"Algeria\" },\r\n  { label: \"American Samoa\" },\r\n  { label: \"Andorra\" },\r\n  { label: \"Angola\" },\r\n  { label: \"Anguilla\" },\r\n  { label: \"Antarctica\" },\r\n  { label: \"Antigua and Barbuda\" },\r\n  { label: \"Argentina\" },\r\n  { label: \"Armenia\" },\r\n  { label: \"Aruba\" },\r\n  { label: \"Australia\" },\r\n  { label: \"Austria\" },\r\n  { label: \"Azerbaijan\" },\r\n  { label: \"Bahamas\" },\r\n  { label: \"Bahrain\" },\r\n  { label: \"Bangladesh\" },\r\n  { label: \"Barbados\" },\r\n  { label: \"Belarus\" },\r\n  { label: \"Belgium\" },\r\n  { label: \"Belize\" },\r\n  { label: \"Benin\" },\r\n  { label: \"Bermuda\" },\r\n  { label: \"Bhutan\" },\r\n  { label: \"Bolivia, Plurinational State of\" },\r\n  { label: \"Bonaire, Sint Eustatius and Saba\" },\r\n  { label: \"Bosnia and Herzegovina\" },\r\n  { label: \"Botswana\" },\r\n  { label: \"Bouvet Island\" },\r\n  { label: \"Brazil\" },\r\n  { label: \"British Indian Ocean Territory\" },\r\n  { label: \"Brunei Darussalam\" }\r\n];\r\n\r\n// Example first\r\nfunction renderInput(inputProps) {\r\n  const { InputProps, classes, ref, ...other } = inputProps;\r\n\r\n  return (\r\n    <TextField\r\n      InputProps={{\r\n        inputRef: ref,\r\n        classes: {\r\n          root: classes.inputRoot,\r\n          input: classes.inputInput\r\n        },\r\n        ...InputProps\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nfunction renderSuggestion(suggestionProps) {\r\n  const {\r\n    suggestion,\r\n    index,\r\n    itemProps,\r\n    highlightedIndex,\r\n    selectedItem\r\n  } = suggestionProps;\r\n  const isHighlighted = highlightedIndex === index;\r\n  const isSelected = (selectedItem || \"\").indexOf(suggestion.label) > -1;\r\n\r\n  return (\r\n    <MenuItem\r\n      {...itemProps}\r\n      key={`suggestion1${suggestion.label}`}\r\n      selected={isHighlighted}\r\n      component=\"div\"\r\n      style={{\r\n        fontWeight: isSelected ? 500 : 400\r\n      }}\r\n    >\r\n      {suggestion.label}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nrenderSuggestion.propTypes = {\r\n  highlightedIndex: PropTypes.number,\r\n  index: PropTypes.number,\r\n  itemProps: PropTypes.object,\r\n  selectedItem: PropTypes.string,\r\n  suggestion: PropTypes.shape({ label: PropTypes.string }).isRequired\r\n};\r\n\r\nfunction getSuggestions(value, { showEmpty = false } = {}) {\r\n  const inputValue = deburr(value.trim()).toLowerCase();\r\n  const inputLength = inputValue.length;\r\n  let count = 0;\r\n\r\n  return inputLength === 0 && !showEmpty\r\n    ? []\r\n    : suggestions.filter(suggestion => {\r\n        const keep =\r\n          count < 5 &&\r\n          suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\r\n\r\n        if (keep) {\r\n          count += 1;\r\n        }\r\n\r\n        return keep;\r\n      });\r\n}\r\n\r\nfunction DownshiftMultiple(props) {\r\n  const { classes } = props;\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  const [selectedItem, setSelectedItem] = React.useState([]);\r\n\r\n  function handleKeyDown(event) {\r\n    if (\r\n      selectedItem.length &&\r\n      !inputValue.length &&\r\n      event.key === \"Backspace\"\r\n    ) {\r\n      setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\r\n    }\r\n  }\r\n\r\n  function handleInputChange(event) {\r\n    setInputValue(event.target.value);\r\n  }\r\n\r\n  function handleChange(item) {\r\n    let newSelectedItem = [...selectedItem];\r\n    if (newSelectedItem.indexOf(item) === -1) {\r\n      newSelectedItem = [...newSelectedItem, item];\r\n    }\r\n    setInputValue(\"\");\r\n    setSelectedItem(newSelectedItem);\r\n  }\r\n\r\n  const handleDelete = item => () => {\r\n    const newSelectedItem = [...selectedItem];\r\n    newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\r\n    setSelectedItem(newSelectedItem);\r\n  };\r\n\r\n  return (\r\n    <Downshift\r\n      id=\"downshift-multiple\"\r\n      inputValue={inputValue}\r\n      onChange={handleChange}\r\n      selectedItem={selectedItem}\r\n    >\r\n      {({\r\n        getInputProps,\r\n        getItemProps,\r\n        getLabelProps,\r\n        isOpen,\r\n        inputValue: inputValue2,\r\n        selectedItem: selectedItem2,\r\n        highlightedIndex\r\n      }) => {\r\n        const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\r\n          onKeyDown: handleKeyDown,\r\n          placeholder: \"Select multiple countries\"\r\n        });\r\n\r\n        return (\r\n          <div className={classes.container}>\r\n            {renderInput({\r\n              fullWidth: true,\r\n              classes,\r\n              label: \"Countries\",\r\n              InputLabelProps: getLabelProps(),\r\n              InputProps: {\r\n                startAdornment: selectedItem.map(item => (\r\n                  <Chip\r\n                    key={item}\r\n                    tabIndex={-1}\r\n                    label={item}\r\n                    className={classes.chip}\r\n                    onDelete={handleDelete(item)}\r\n                  />\r\n                )),\r\n                onBlur,\r\n                onChange: event => {\r\n                  handleInputChange(event);\r\n                  onChange(event);\r\n                },\r\n                onFocus\r\n              },\r\n              inputProps\r\n            })}\r\n\r\n            {isOpen ? (\r\n              <Paper className={classes.paper} square>\r\n                {getSuggestions(inputValue2).map((suggestion, index) =>\r\n                  renderSuggestion({\r\n                    suggestion,\r\n                    index,\r\n                    itemProps: getItemProps({ item: suggestion.label }),\r\n                    highlightedIndex,\r\n                    selectedItem: selectedItem2\r\n                  })\r\n                )}\r\n              </Paper>\r\n            ) : null}\r\n          </div>\r\n        );\r\n      }}\r\n    </Downshift>\r\n  );\r\n}\r\n\r\nDownshiftMultiple.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250\r\n  },\r\n  container: {\r\n    flexGrow: 1,\r\n    position: \"relative\"\r\n  },\r\n  paper: {\r\n    position: \"absolute\",\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25)\r\n  },\r\n  inputRoot: {\r\n    flexWrap: \"wrap\"\r\n  },\r\n  inputInput: {\r\n    width: \"auto\",\r\n    flexGrow: 1\r\n  },\r\n  divider: {\r\n    height: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nlet popperNode;\r\n\r\n// Example 2\r\nconst useStyles2 = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250\r\n  },\r\n  input: {\r\n    display: \"flex\",\r\n    padding: 0,\r\n    height: \"auto\"\r\n  },\r\n  valueContainer: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    overflow: \"hidden\"\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25)\r\n  },\r\n  chipFocused: {\r\n    backgroundColor: emphasize(\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[300]\r\n        : theme.palette.grey[700],\r\n      0.08\r\n    )\r\n  },\r\n  noOptionsMessage: {\r\n    padding: theme.spacing(1, 2)\r\n  },\r\n  singleValue: {\r\n    fontSize: 16\r\n  },\r\n  placeholder: {\r\n    position: \"absolute\",\r\n    left: 2,\r\n    bottom: 6,\r\n    fontSize: 16\r\n  },\r\n  paper: {\r\n    position: \"absolute\",\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0\r\n  },\r\n  divider: {\r\n    height: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nfunction NoOptionsMessage(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      className={props.selectProps.classes.noOptionsMessage}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nNoOptionsMessage.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction inputComponent({ inputRef, ...props }) {\r\n  return <div ref={inputRef} {...props} />;\r\n}\r\n\r\ninputComponent.propTypes = {\r\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\r\n};\r\n\r\nfunction Control(props) {\r\n  const {\r\n    children,\r\n    innerProps,\r\n    innerRef,\r\n    selectProps: { classes, TextFieldProps }\r\n  } = props;\r\n\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      InputProps={{\r\n        inputComponent,\r\n        inputProps: {\r\n          className: classes.input,\r\n          ref: innerRef,\r\n          children,\r\n          ...innerProps\r\n        }\r\n      }}\r\n      {...TextFieldProps}\r\n    />\r\n  );\r\n}\r\n\r\nControl.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction Option(props) {\r\n  return (\r\n    <MenuItem\r\n      ref={props.innerRef}\r\n      selected={props.isFocused}\r\n      component=\"div\"\r\n      key={`option2${props.children}`}\r\n      style={{\r\n        fontWeight: props.isSelected ? 500 : 400\r\n      }}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nOption.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  isFocused: PropTypes.bool,\r\n  isSelected: PropTypes.bool\r\n};\r\n\r\nfunction Placeholder(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      key={props.children}\r\n      className={props.selectProps.classes.placeholder}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nPlaceholder.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction SingleValue(props) {\r\n  return (\r\n    <Typography\r\n      key={props.children}\r\n      className={props.selectProps.classes.singleValue}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nSingleValue.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction ValueContainer(props) {\r\n  return (\r\n    <div\r\n      key={props.children}\r\n      className={props.selectProps.classes.valueContainer}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nValueContainer.propTypes = {\r\n  children: PropTypes.node,\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction MultiValue(props) {\r\n  return (\r\n    <Chip\r\n      tabIndex={-1}\r\n      label={props.children}\r\n      key={`chip2${props.children}`}\r\n      className={clsx(props.selectProps.classes.chip, {\r\n        [props.selectProps.classes.chipFocused]: props.isFocused\r\n      })}\r\n      onDelete={props.removeProps.onClick}\r\n      deleteIcon={<CancelIcon {...props.removeProps} />}\r\n    />\r\n  );\r\n}\r\n\r\nMultiValue.propTypes = {\r\n  children: PropTypes.node,\r\n  isFocused: PropTypes.bool,\r\n  removeProps: PropTypes.object.isRequired,\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction Menu(props) {\r\n  return (\r\n    <Paper\r\n      square\r\n      key={props.children}\r\n      className={props.selectProps.classes.paper}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Paper>\r\n  );\r\n}\r\n\r\nMenu.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object\r\n};\r\n\r\nconst components = {\r\n  Control,\r\n  Menu,\r\n  MultiValue,\r\n  NoOptionsMessage,\r\n  Option,\r\n  Placeholder,\r\n  SingleValue,\r\n  ValueContainer\r\n};\r\n\r\nexport default function AutocompleteExamplesPage() {\r\n  const classes = useStyles();\r\n\r\n  const classes2 = useStyles2();\r\n  const theme = useTheme();\r\n  const [single, setSingle] = React.useState(null);\r\n  const [multi, setMulti] = React.useState(null);\r\n\r\n  function handleChangeSingle(value) {\r\n    setSingle(value);\r\n  }\r\n\r\n  function handleChangeMulti(value) {\r\n    setMulti(value);\r\n  }\r\n\r\n  const selectStyles = {\r\n    input: base => ({\r\n      ...base,\r\n      color: theme.palette.text.primary,\r\n      \"& input\": {\r\n        font: \"inherit\"\r\n      }\r\n    })\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Notice icon=\"flaticon-warning font-primary\">\r\n        <span>\r\n          The autocomplete is a normal text input enhanced by a panel of\r\n          suggested options.\r\n        </span>{\" \"}\r\n        <span>\r\n          For more info please check the components's official{\" \"}\r\n          <a\r\n            target=\"_blank\"\r\n            className=\"font-weight-bold\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://material-ui.com/components/autocomplete/\"\r\n          >\r\n            demos & documentation\r\n          </a>\r\n        </span>\r\n      </Notice>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample\r\n            jsCode={jsCode1}\r\n            beforeCodeTitle=\"Downshift\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <div>\r\n              In the following example, we demonstrate how to use{\" \"}\r\n              <a href=\"https://github.com/downshift-js/downshift\">\r\n                <code>downshift</code>\r\n              </a>\r\n              . The last demo allow to clear the input and show a number of\r\n              options on focus.\r\n            </div>\r\n            <div className=\"separator separator-dashed my-7\"></div>\r\n            <div className={classes.root}>\r\n              <Downshift id=\"downshift-simple\">\r\n                {({\r\n                  getInputProps,\r\n                  getItemProps,\r\n                  getLabelProps,\r\n                  getMenuProps,\r\n                  highlightedIndex,\r\n                  inputValue,\r\n                  isOpen,\r\n                  selectedItem\r\n                }) => {\r\n                  const { onBlur, onFocus, ...inputProps } = getInputProps({\r\n                    placeholder: \"Search for a country (start with a)\"\r\n                  });\r\n\r\n                  return (\r\n                    <div className={classes.container}>\r\n                      {renderInput({\r\n                        fullWidth: true,\r\n                        classes,\r\n                        label: \"Country\",\r\n                        InputLabelProps: getLabelProps({ shrink: true }),\r\n                        InputProps: { onBlur, onFocus },\r\n                        inputProps\r\n                      })}\r\n\r\n                      <div {...getMenuProps()}>\r\n                        {isOpen ? (\r\n                          <Paper className={classes.paper} square>\r\n                            {getSuggestions(inputValue).map(\r\n                              (suggestion, index) =>\r\n                                renderSuggestion({\r\n                                  suggestion,\r\n                                  index,\r\n                                  itemProps: getItemProps({\r\n                                    item: suggestion.label\r\n                                  }),\r\n                                  highlightedIndex,\r\n                                  selectedItem\r\n                                })\r\n                            )}\r\n                          </Paper>\r\n                        ) : null}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                }}\r\n              </Downshift>\r\n              <div className={classes.divider} />\r\n              <DownshiftMultiple classes={classes} />\r\n              <div className={classes.divider} />\r\n              <Downshift id=\"downshift-popper\">\r\n                {({\r\n                  getInputProps,\r\n                  getItemProps,\r\n                  getLabelProps,\r\n                  getMenuProps,\r\n                  highlightedIndex,\r\n                  inputValue,\r\n                  isOpen,\r\n                  selectedItem\r\n                }) => {\r\n                  const { onBlur, onFocus, ...inputProps } = getInputProps({\r\n                    placeholder: \"With Popper\"\r\n                  });\r\n\r\n                  return (\r\n                    <div className={classes.container}>\r\n                      {renderInput({\r\n                        fullWidth: true,\r\n                        classes,\r\n                        label: \"Country\",\r\n                        InputProps: { onBlur, onFocus },\r\n                        InputLabelProps: getLabelProps({ shrink: true }),\r\n                        inputProps,\r\n                        ref: node => {\r\n                          popperNode = node;\r\n                        }\r\n                      })}\r\n\r\n                      <Popper open={isOpen} anchorEl={popperNode}>\r\n                        <div\r\n                          {...(isOpen\r\n                            ? getMenuProps({}, { suppressRefError: true })\r\n                            : {})}\r\n                        >\r\n                          <Paper\r\n                            square\r\n                            style={{\r\n                              marginTop: 8,\r\n                              width: popperNode\r\n                                ? popperNode.clientWidth\r\n                                : undefined\r\n                            }}\r\n                          >\r\n                            {getSuggestions(inputValue).map(\r\n                              (suggestion, index) =>\r\n                                renderSuggestion({\r\n                                  suggestion,\r\n                                  index,\r\n                                  itemProps: getItemProps({\r\n                                    item: suggestion.label\r\n                                  }),\r\n                                  highlightedIndex,\r\n                                  selectedItem\r\n                                })\r\n                            )}\r\n                          </Paper>\r\n                        </div>\r\n                      </Popper>\r\n                    </div>\r\n                  );\r\n                }}\r\n              </Downshift>\r\n              <div className={classes.divider} />\r\n              <Downshift id=\"downshift-options\">\r\n                {({\r\n                  clearSelection,\r\n                  getInputProps,\r\n                  getItemProps,\r\n                  getLabelProps,\r\n                  getMenuProps,\r\n                  highlightedIndex,\r\n                  inputValue,\r\n                  isOpen,\r\n                  openMenu,\r\n                  selectedItem\r\n                }) => {\r\n                  const {\r\n                    onBlur,\r\n                    onChange,\r\n                    onFocus,\r\n                    ...inputProps\r\n                  } = getInputProps({\r\n                    onChange: event => {\r\n                      if (event.target.value === \"\") {\r\n                        clearSelection();\r\n                      }\r\n                    },\r\n                    onFocus: openMenu,\r\n                    placeholder: \"With the clear & show empty options\"\r\n                  });\r\n\r\n                  return (\r\n                    <div className={classes.container}>\r\n                      {renderInput({\r\n                        fullWidth: true,\r\n                        classes,\r\n                        label: \"Countries\",\r\n                        InputLabelProps: getLabelProps({ shrink: true }),\r\n                        InputProps: { onBlur, onChange, onFocus },\r\n                        inputProps\r\n                      })}\r\n\r\n                      <div {...getMenuProps()}>\r\n                        {isOpen ? (\r\n                          <Paper className={classes.paper} square>\r\n                            {getSuggestions(inputValue, {\r\n                              showEmpty: true\r\n                            }).map((suggestion, index) =>\r\n                              renderSuggestion({\r\n                                suggestion,\r\n                                index,\r\n                                itemProps: getItemProps({\r\n                                  item: suggestion.label\r\n                                }),\r\n                                highlightedIndex,\r\n                                selectedItem\r\n                              })\r\n                            )}\r\n                          </Paper>\r\n                        ) : null}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                }}\r\n              </Downshift>\r\n            </div>\r\n          </KTCodeExample>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample\r\n            jsCode={jsCode2}\r\n            beforeCodeTitle=\"React-select\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <span>\r\n              In the following example, we demonstrate how to use{\" \"}\r\n              <a href=\"https://github.com/JedWatson/react-select\">\r\n                <code>react-select</code>\r\n              </a>\r\n              .\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\" />\r\n            <div className={classes2.root}>\r\n              <NoSsr key=\"nossr22\">\r\n                <Select\r\n                  className=\"react-select\"\r\n                  classes={classes2}\r\n                  styles={selectStyles}\r\n                  inputId=\"react-select-single\"\r\n                  TextFieldProps={{\r\n                    label: \"Country\",\r\n                    InputLabelProps: {\r\n                      htmlFor: \"react-select-single\",\r\n                      shrink: true\r\n                    },\r\n                    placeholder: \"Search a country (start with a)\"\r\n                  }}\r\n                  options={suggestions}\r\n                  components={components}\r\n                  value={single}\r\n                  onChange={handleChangeSingle}\r\n                />\r\n                <div className={classes2.divider} />\r\n                <Select\r\n                  key={\"\"}\r\n                  className=\"react-select\"\r\n                  classes={classes2}\r\n                  styles={selectStyles}\r\n                  inputId=\"react-select-multiple\"\r\n                  TextFieldProps={{\r\n                    label: \"Countries\",\r\n                    InputLabelProps: {\r\n                      htmlFor: \"react-select-multiple\",\r\n                      shrink: true\r\n                    },\r\n                    placeholder: \"Select multiple countries\"\r\n                  }}\r\n                  options={suggestions}\r\n                  components={components}\r\n                  value={multi}\r\n                  onChange={handleChangeMulti}\r\n                  isMulti\r\n                />\r\n              </NoSsr>\r\n            </div>\r\n          </KTCodeExample>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst jsCode1 = `\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport deburr from 'lodash/deburr';\r\nimport Downshift from 'downshift';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst suggestions = [\r\n  { label: 'Afghanistan' },\r\n  { label: 'Aland Islands' },\r\n  { label: 'Albania' },\r\n  { label: 'Algeria' },\r\n  { label: 'American Samoa' },\r\n  { label: 'Andorra' },\r\n  { label: 'Angola' },\r\n  { label: 'Anguilla' },\r\n  { label: 'Antarctica' },\r\n  { label: 'Antigua and Barbuda' },\r\n  { label: 'Argentina' },\r\n  { label: 'Armenia' },\r\n  { label: 'Aruba' },\r\n  { label: 'Australia' },\r\n  { label: 'Austria' },\r\n  { label: 'Azerbaijan' },\r\n  { label: 'Bahamas' },\r\n  { label: 'Bahrain' },\r\n  { label: 'Bangladesh' },\r\n  { label: 'Barbados' },\r\n  { label: 'Belarus' },\r\n  { label: 'Belgium' },\r\n  { label: 'Belize' },\r\n  { label: 'Benin' },\r\n  { label: 'Bermuda' },\r\n  { label: 'Bhutan' },\r\n  { label: 'Bolivia, Plurinational State of' },\r\n  { label: 'Bonaire, Sint Eustatius and Saba' },\r\n  { label: 'Bosnia and Herzegovina' },\r\n  { label: 'Botswana' },\r\n  { label: 'Bouvet Island' },\r\n  { label: 'Brazil' },\r\n  { label: 'British Indian Ocean Territory' },\r\n  { label: 'Brunei Darussalam' },\r\n];\r\n\r\nfunction renderInput(inputProps) {\r\n  const { InputProps, classes, ref, ...other } = inputProps;\r\n\r\n  return (\r\n    <TextField\r\n      InputProps={{\r\n        inputRef: ref,\r\n        classes: {\r\n          root: classes.inputRoot,\r\n          input: classes.inputInput,\r\n        },\r\n        ...InputProps,\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nfunction renderSuggestion(suggestionProps) {\r\n  const { suggestion, index, itemProps, highlightedIndex, selectedItem } = suggestionProps;\r\n  const isHighlighted = highlightedIndex === index;\r\n  const isSelected = (selectedItem || '').indexOf(suggestion.label) > -1;\r\n\r\n  return (\r\n    <MenuItem\r\n      {...itemProps}\r\n      key={suggestion.label}\r\n      selected={isHighlighted}\r\n      component=\"div\"\r\n      style={{\r\n        fontWeight: isSelected ? 500 : 400,\r\n      }}\r\n    >\r\n      {suggestion.label}\r\n    </MenuItem>\r\n  );\r\n}\r\nrenderSuggestion.propTypes = {\r\n  highlightedIndex: PropTypes.number,\r\n  index: PropTypes.number,\r\n  itemProps: PropTypes.object,\r\n  selectedItem: PropTypes.string,\r\n  suggestion: PropTypes.shape({ label: PropTypes.string }).isRequired,\r\n};\r\n\r\nfunction getSuggestions(value, { showEmpty = false } = {}) {\r\n  const inputValue = deburr(value.trim()).toLowerCase();\r\n  const inputLength = inputValue.length;\r\n  let count = 0;\r\n\r\n  return inputLength === 0 && !showEmpty\r\n    ? []\r\n    : suggestions.filter(suggestion => {\r\n        const keep =\r\n          count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\r\n\r\n        if (keep) {\r\n          count += 1;\r\n        }\r\n\r\n        return keep;\r\n      });\r\n}\r\n\r\nfunction DownshiftMultiple(props) {\r\n  const { classes } = props;\r\n  const [inputValue, setInputValue] = React.useState('');\r\n  const [selectedItem, setSelectedItem] = React.useState([]);\r\n\r\n  function handleKeyDown(event) {\r\n    if (selectedItem.length && !inputValue.length && event.key === 'Backspace') {\r\n      setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\r\n    }\r\n  }\r\n\r\n  function handleInputChange(event) {\r\n    setInputValue(event.target.value);\r\n  }\r\n\r\n  function handleChange(item) {\r\n    let newSelectedItem = [...selectedItem];\r\n    if (newSelectedItem.indexOf(item) === -1) {\r\n      newSelectedItem = [...newSelectedItem, item];\r\n    }\r\n    setInputValue('');\r\n    setSelectedItem(newSelectedItem);\r\n  }\r\n\r\n  const handleDelete = item => () => {\r\n    const newSelectedItem = [...selectedItem];\r\n    newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\r\n    setSelectedItem(newSelectedItem);\r\n  };\r\n\r\n  return (\r\n    <Downshift\r\n      id=\"downshift-multiple\"\r\n      inputValue={inputValue}\r\n      onChange={handleChange}\r\n      selectedItem={selectedItem}\r\n    >\r\n      {({\r\n        getInputProps,\r\n        getItemProps,\r\n        getLabelProps,\r\n        isOpen,\r\n        inputValue: inputValue2,\r\n        selectedItem: selectedItem2,\r\n        highlightedIndex,\r\n      }) => {\r\n        const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\r\n          onKeyDown: handleKeyDown,\r\n          placeholder: 'Select multiple countries',\r\n        });\r\n\r\n        return (\r\n          <div className={classes.container}>\r\n            {renderInput({\r\n              fullWidth: true,\r\n              classes,\r\n              label: 'Countries',\r\n              InputLabelProps: getLabelProps(),\r\n              InputProps: {\r\n                startAdornment: selectedItem.map(item => (\r\n                  <Chip\r\n                    key={item}\r\n                    tabIndex={-1}\r\n                    label={item}\r\n                    className={classes.chip}\r\n                    onDelete={handleDelete(item)}\r\n                  />\r\n                )),\r\n                onBlur,\r\n                onChange: event => {\r\n                  handleInputChange(event);\r\n                  onChange(event);\r\n                },\r\n                onFocus,\r\n              },\r\n              inputProps,\r\n            })}\r\n\r\n            {isOpen ? (\r\n              <Paper className={classes.paper} square>\r\n                {getSuggestions(inputValue2).map((suggestion, index) =>\r\n                  renderSuggestion({\r\n                    suggestion,\r\n                    index,\r\n                    itemProps: getItemProps({ item: suggestion.label }),\r\n                    highlightedIndex,\r\n                    selectedItem: selectedItem2,\r\n                  }),\r\n                )}\r\n              </Paper>\r\n            ) : null}\r\n          </div>\r\n        );\r\n      }}\r\n    </Downshift>\r\n  );\r\n}\r\n\r\nDownshiftMultiple.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250,\r\n  },\r\n  container: {\r\n    flexGrow: 1,\r\n    position: 'relative',\r\n  },\r\n  paper: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25),\r\n  },\r\n  inputRoot: {\r\n    flexWrap: 'wrap',\r\n  },\r\n  inputInput: {\r\n    width: 'auto',\r\n    flexGrow: 1,\r\n  },\r\n  divider: {\r\n    height: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nlet popperNode;\r\n\r\nexport default function IntegrationDownshift() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Downshift id=\"downshift-simple\">\r\n        {({\r\n          getInputProps,\r\n          getItemProps,\r\n          getLabelProps,\r\n          getMenuProps,\r\n          highlightedIndex,\r\n          inputValue,\r\n          isOpen,\r\n          selectedItem,\r\n        }) => {\r\n          const { onBlur, onFocus, ...inputProps } = getInputProps({\r\n            placeholder: 'Search for a country (start with a)',\r\n          });\r\n\r\n          return (\r\n            <div className={classes.container}>\r\n              {renderInput({\r\n                fullWidth: true,\r\n                classes,\r\n                label: 'Country',\r\n                InputLabelProps: getLabelProps({ shrink: true }),\r\n                InputProps: { onBlur, onFocus },\r\n                inputProps,\r\n              })}\r\n\r\n              <div {...getMenuProps()}>\r\n                {isOpen ? (\r\n                  <Paper className={classes.paper} square>\r\n                    {getSuggestions(inputValue).map((suggestion, index) =>\r\n                      renderSuggestion({\r\n                        suggestion,\r\n                        index,\r\n                        itemProps: getItemProps({ item: suggestion.label }),\r\n                        highlightedIndex,\r\n                        selectedItem,\r\n                      }),\r\n                    )}\r\n                  </Paper>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Downshift>\r\n      <div className={classes.divider} />\r\n      <DownshiftMultiple classes={classes} />\r\n      <div className={classes.divider} />\r\n      <Downshift id=\"downshift-popper\">\r\n        {({\r\n          getInputProps,\r\n          getItemProps,\r\n          getLabelProps,\r\n          getMenuProps,\r\n          highlightedIndex,\r\n          inputValue,\r\n          isOpen,\r\n          selectedItem,\r\n        }) => {\r\n          const { onBlur, onFocus, ...inputProps } = getInputProps({\r\n            placeholder: 'With Popper',\r\n          });\r\n\r\n          return (\r\n            <div className={classes.container}>\r\n              {renderInput({\r\n                fullWidth: true,\r\n                classes,\r\n                label: 'Country',\r\n                InputProps: { onBlur, onFocus },\r\n                InputLabelProps: getLabelProps({ shrink: true }),\r\n                inputProps,\r\n                ref: node => {\r\n                  popperNode = node;\r\n                },\r\n              })}\r\n\r\n              <Popper open={isOpen} anchorEl={popperNode}>\r\n                <div {...(isOpen ? getMenuProps({}, { suppressRefError: true }) : {})}>\r\n                  <Paper\r\n                    square\r\n                    style={{ marginTop: 8, width: popperNode ? popperNode.clientWidth : undefined }}\r\n                  >\r\n                    {getSuggestions(inputValue).map((suggestion, index) =>\r\n                      renderSuggestion({\r\n                        suggestion,\r\n                        index,\r\n                        itemProps: getItemProps({ item: suggestion.label }),\r\n                        highlightedIndex,\r\n                        selectedItem,\r\n                      }),\r\n                    )}\r\n                  </Paper>\r\n                </div>\r\n              </Popper>\r\n            </div>\r\n          );\r\n        }}\r\n      </Downshift>\r\n      <div className={classes.divider} />\r\n      <Downshift id=\"downshift-options\">\r\n        {({\r\n          clearSelection,\r\n          getInputProps,\r\n          getItemProps,\r\n          getLabelProps,\r\n          getMenuProps,\r\n          highlightedIndex,\r\n          inputValue,\r\n          isOpen,\r\n          openMenu,\r\n          selectedItem,\r\n        }) => {\r\n          const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\r\n            onChange: event => {\r\n              if (event.target.value === '') {\r\n                clearSelection();\r\n              }\r\n            },\r\n            onFocus: openMenu,\r\n            placeholder: 'With the clear & show empty options',\r\n          });\r\n\r\n          return (\r\n            <div className={classes.container}>\r\n              {renderInput({\r\n                fullWidth: true,\r\n                classes,\r\n                label: 'Countries',\r\n                InputLabelProps: getLabelProps({ shrink: true }),\r\n                InputProps: { onBlur, onChange, onFocus },\r\n                inputProps,\r\n              })}\r\n\r\n              <div {...getMenuProps()}>\r\n                {isOpen ? (\r\n                  <Paper className={classes.paper} square>\r\n                    {getSuggestions(inputValue, { showEmpty: true }).map((suggestion, index) =>\r\n                      renderSuggestion({\r\n                        suggestion,\r\n                        index,\r\n                        itemProps: getItemProps({ item: suggestion.label }),\r\n                        highlightedIndex,\r\n                        selectedItem,\r\n                      }),\r\n                    )}\r\n                  </Paper>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Downshift>\r\n    </div>\r\n  );\r\n}\r\n`;\r\nconst jsCode2 = `\r\nimport React from 'react';\r\nimport clsx from 'clsx';\r\nimport Select from 'react-select';\r\nimport { emphasize, makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport NoSsr from '@material-ui/core/NoSsr';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst suggestions = [\r\n  { label: 'Afghanistan' },\r\n  { label: 'Aland Islands' },\r\n  { label: 'Albania' },\r\n  { label: 'Algeria' },\r\n  { label: 'American Samoa' },\r\n  { label: 'Andorra' },\r\n  { label: 'Angola' },\r\n  { label: 'Anguilla' },\r\n  { label: 'Antarctica' },\r\n  { label: 'Antigua and Barbuda' },\r\n  { label: 'Argentina' },\r\n  { label: 'Armenia' },\r\n  { label: 'Aruba' },\r\n  { label: 'Australia' },\r\n  { label: 'Austria' },\r\n  { label: 'Azerbaijan' },\r\n  { label: 'Bahamas' },\r\n  { label: 'Bahrain' },\r\n  { label: 'Bangladesh' },\r\n  { label: 'Barbados' },\r\n  { label: 'Belarus' },\r\n  { label: 'Belgium' },\r\n  { label: 'Belize' },\r\n  { label: 'Benin' },\r\n  { label: 'Bermuda' },\r\n  { label: 'Bhutan' },\r\n  { label: 'Bolivia, Plurinational State of' },\r\n  { label: 'Bonaire, Sint Eustatius and Saba' },\r\n  { label: 'Bosnia and Herzegovina' },\r\n  { label: 'Botswana' },\r\n  { label: 'Bouvet Island' },\r\n  { label: 'Brazil' },\r\n  { label: 'British Indian Ocean Territory' },\r\n  { label: 'Brunei Darussalam' },\r\n].map(suggestion => ({\r\n  value: suggestion.label,\r\n  label: suggestion.label,\r\n}));\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250,\r\n  },\r\n  input: {\r\n    display: 'flex',\r\n    padding: 0,\r\n    height: 'auto',\r\n  },\r\n  valueContainer: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    overflow: 'hidden',\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25),\r\n  },\r\n  chipFocused: {\r\n    backgroundColor: emphasize(\r\n      theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[700],\r\n      0.08,\r\n    ),\r\n  },\r\n  noOptionsMessage: {\r\n    padding: theme.spacing(1, 2),\r\n  },\r\n  singleValue: {\r\n    fontSize: 16,\r\n  },\r\n  placeholder: {\r\n    position: 'absolute',\r\n    left: 2,\r\n    bottom: 6,\r\n    fontSize: 16,\r\n  },\r\n  paper: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  divider: {\r\n    height: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nfunction NoOptionsMessage(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      className={props.selectProps.classes.noOptionsMessage}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nNoOptionsMessage.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction inputComponent({ inputRef, ...props }) {\r\n  return <div ref={inputRef} {...props} />;\r\n}\r\n\r\ninputComponent.propTypes = {\r\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n};\r\n\r\nfunction Control(props) {\r\n  const {\r\n    children,\r\n    innerProps,\r\n    innerRef,\r\n    selectProps: { classes, TextFieldProps },\r\n  } = props;\r\n\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      InputProps={{\r\n        inputComponent,\r\n        inputProps: {\r\n          className: classes.input,\r\n          ref: innerRef,\r\n          children,\r\n          ...innerProps,\r\n        },\r\n      }}\r\n      {...TextFieldProps}\r\n    />\r\n  );\r\n}\r\n\r\nControl.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction Option(props) {\r\n  return (\r\n    <MenuItem\r\n      ref={props.innerRef}\r\n      selected={props.isFocused}\r\n      component=\"div\"\r\n      style={{\r\n        fontWeight: props.isSelected ? 500 : 400,\r\n      }}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nOption.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  isFocused: PropTypes.bool,\r\n  isSelected: PropTypes.bool,\r\n};\r\n\r\nfunction Placeholder(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      className={props.selectProps.classes.placeholder}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nPlaceholder.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction SingleValue(props) {\r\n  return (\r\n    <Typography className={props.selectProps.classes.singleValue} {...props.innerProps}>\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nSingleValue.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction ValueContainer(props) {\r\n  return <div className={props.selectProps.classes.valueContainer}>{props.children}</div>;\r\n}\r\n\r\nValueContainer.propTypes = {\r\n  children: PropTypes.node,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction MultiValue(props) {\r\n  return (\r\n    <Chip\r\n      tabIndex={-1}\r\n      label={props.children}\r\n      className={clsx(props.selectProps.classes.chip, {\r\n        [props.selectProps.classes.chipFocused]: props.isFocused,\r\n      })}\r\n      onDelete={props.removeProps.onClick}\r\n      deleteIcon={<CancelIcon {...props.removeProps} />}\r\n    />\r\n  );\r\n}\r\n\r\nMultiValue.propTypes = {\r\n  children: PropTypes.node,\r\n  isFocused: PropTypes.bool,\r\n  removeProps: PropTypes.object.isRequired,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction Menu(props) {\r\n  return (\r\n    <Paper square className={props.selectProps.classes.paper} {...props.innerProps}>\r\n      {props.children}\r\n    </Paper>\r\n  );\r\n}\r\n\r\nMenu.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object,\r\n};\r\n\r\nconst components = {\r\n  Control,\r\n  Menu,\r\n  MultiValue,\r\n  NoOptionsMessage,\r\n  Option,\r\n  Placeholder,\r\n  SingleValue,\r\n  ValueContainer,\r\n};\r\n\r\nexport default function IntegrationReactSelect() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [single, setSingle] = React.useState(null);\r\n  const [multi, setMulti] = React.useState(null);\r\n\r\n  function handleChangeSingle(value) {\r\n    setSingle(value);\r\n  }\r\n\r\n  function handleChangeMulti(value) {\r\n    setMulti(value);\r\n  }\r\n\r\n  const selectStyles = {\r\n    input: base => ({\r\n      ...base,\r\n      color: theme.palette.text.primary,\r\n      '& input': {\r\n        font: 'inherit',\r\n      },\r\n    }),\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <NoSsr>\r\n        <Select\r\n          classes={classes}\r\n          styles={selectStyles}\r\n          inputId=\"react-select-single\"\r\n          TextFieldProps={{\r\n            label: 'Country',\r\n            InputLabelProps: {\r\n              htmlFor: 'react-select-single',\r\n              shrink: true,\r\n            },\r\n            placeholder: 'Search a country (start with a)',\r\n          }}\r\n          options={suggestions}\r\n          components={components}\r\n          value={single}\r\n          onChange={handleChangeSingle}\r\n        />\r\n        <div className={classes.divider} />\r\n        <Select\r\n          classes={classes}\r\n          styles={selectStyles}\r\n          inputId=\"react-select-multiple\"\r\n          TextFieldProps={{\r\n            label: 'Countries',\r\n            InputLabelProps: {\r\n              htmlFor: 'react-select-multiple',\r\n              shrink: true,\r\n            },\r\n            placeholder: 'Select multiple countries',\r\n          }}\r\n          options={suggestions}\r\n          components={components}\r\n          value={multi}\r\n          onChange={handleChangeMulti}\r\n          isMulti\r\n        />\r\n      </NoSsr>\r\n    </div>\r\n  );\r\n}\r\n`;\r\nconst jsCode3 = `\r\nimport React from 'react';\r\nimport deburr from 'lodash/deburr';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport match from 'autosuggest-highlight/match';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst suggestions = [\r\n  { label: 'Afghanistan' },\r\n  { label: 'Aland Islands' },\r\n  { label: 'Albania' },\r\n  { label: 'Algeria' },\r\n  { label: 'American Samoa' },\r\n  { label: 'Andorra' },\r\n  { label: 'Angola' },\r\n  { label: 'Anguilla' },\r\n  { label: 'Antarctica' },\r\n  { label: 'Antigua and Barbuda' },\r\n  { label: 'Argentina' },\r\n  { label: 'Armenia' },\r\n  { label: 'Aruba' },\r\n  { label: 'Australia' },\r\n  { label: 'Austria' },\r\n  { label: 'Azerbaijan' },\r\n  { label: 'Bahamas' },\r\n  { label: 'Bahrain' },\r\n  { label: 'Bangladesh' },\r\n  { label: 'Barbados' },\r\n  { label: 'Belarus' },\r\n  { label: 'Belgium' },\r\n  { label: 'Belize' },\r\n  { label: 'Benin' },\r\n  { label: 'Bermuda' },\r\n  { label: 'Bhutan' },\r\n  { label: 'Bolivia, Plurinational State of' },\r\n  { label: 'Bonaire, Sint Eustatius and Saba' },\r\n  { label: 'Bosnia and Herzegovina' },\r\n  { label: 'Botswana' },\r\n  { label: 'Bouvet Island' },\r\n  { label: 'Brazil' },\r\n  { label: 'British Indian Ocean Territory' },\r\n  { label: 'Brunei Darussalam' },\r\n];\r\n\r\nfunction renderInputComponent(inputProps) {\r\n  const { classes, inputRef = () => {}, ref, ...other } = inputProps;\r\n\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      InputProps={{\r\n        inputRef: node => {\r\n          ref(node);\r\n          inputRef(node);\r\n        },\r\n        classes: {\r\n          input: classes.input,\r\n        },\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\r\n  const matches = match(suggestion.label, query);\r\n  const parts = parse(suggestion.label, matches);\r\n\r\n  return (\r\n    <MenuItem selected={isHighlighted} component=\"div\">\r\n      <div>\r\n        {parts.map(part => (\r\n          <span key={part.text} style={{ fontWeight: part.highlight ? 500 : 400 }}>\r\n            {part.text}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nfunction getSuggestions(value) {\r\n  const inputValue = deburr(value.trim()).toLowerCase();\r\n  const inputLength = inputValue.length;\r\n  let count = 0;\r\n\r\n  return inputLength === 0\r\n    ? []\r\n    : suggestions.filter(suggestion => {\r\n        const keep =\r\n          count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\r\n\r\n        if (keep) {\r\n          count += 1;\r\n        }\r\n\r\n        return keep;\r\n      });\r\n}\r\n\r\nfunction getSuggestionValue(suggestion) {\r\n  return suggestion.label;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    height: 250,\r\n    flexGrow: 1,\r\n  },\r\n  container: {\r\n    position: 'relative',\r\n  },\r\n  suggestionsContainerOpen: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  suggestion: {\r\n    display: 'block',\r\n  },\r\n  suggestionsList: {\r\n    margin: 0,\r\n    padding: 0,\r\n    listStyleType: 'none',\r\n  },\r\n  divider: {\r\n    height: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function IntegrationAutosuggest() {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [state, setState] = React.useState({\r\n    single: '',\r\n    popper: '',\r\n  });\r\n\r\n  const [stateSuggestions, setSuggestions] = React.useState([]);\r\n\r\n  const handleSuggestionsFetchRequested = ({ value }) => {\r\n    setSuggestions(getSuggestions(value));\r\n  };\r\n\r\n  const handleSuggestionsClearRequested = () => {\r\n    setSuggestions([]);\r\n  };\r\n\r\n  const handleChange = name => (event, { newValue }) => {\r\n    setState({\r\n      ...state,\r\n      [name]: newValue,\r\n    });\r\n  };\r\n\r\n  const autosuggestProps = {\r\n    renderInputComponent,\r\n    suggestions: stateSuggestions,\r\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\r\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\r\n    getSuggestionValue,\r\n    renderSuggestion,\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Autosuggest\r\n        {...autosuggestProps}\r\n        inputProps={{\r\n          classes,\r\n          id: 'react-autosuggest-simple',\r\n          label: 'Country',\r\n          placeholder: 'Search a country (start with a)',\r\n          value: state.single,\r\n          onChange: handleChange('single'),\r\n        }}\r\n        theme={{\r\n          container: classes.container,\r\n          suggestionsContainerOpen: classes.suggestionsContainerOpen,\r\n          suggestionsList: classes.suggestionsList,\r\n          suggestion: classes.suggestion,\r\n        }}\r\n        renderSuggestionsContainer={options => (\r\n          <Paper {...options.containerProps} square>\r\n            {options.children}\r\n          </Paper>\r\n        )}\r\n      />\r\n      <div className={classes.divider} />\r\n      <Autosuggest\r\n        {...autosuggestProps}\r\n        inputProps={{\r\n          classes,\r\n          id: 'react-autosuggest-popper',\r\n          label: 'Country',\r\n          placeholder: 'With Popper',\r\n          value: state.popper,\r\n          onChange: handleChange('popper'),\r\n          inputRef: node => {\r\n            setAnchorEl(node);\r\n          },\r\n          InputLabelProps: {\r\n            shrink: true,\r\n          },\r\n        }}\r\n        theme={{\r\n          suggestionsList: classes.suggestionsList,\r\n          suggestion: classes.suggestion,\r\n        }}\r\n        renderSuggestionsContainer={options => (\r\n          <Popper anchorEl={anchorEl} open={Boolean(options.children)}>\r\n            <Paper\r\n              square\r\n              {...options.containerProps}\r\n              style={{ width: anchorEl ? anchorEl.clientWidth : undefined }}\r\n            >\r\n              {options.children}\r\n            </Paper>\r\n          </Popper>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}