{"ast":null,"code":"var cloneSvg = function cloneSvg(sourceSvg) {\n  return sourceSvg.cloneNode(true);\n};\n\nvar isLocal = function isLocal() {\n  return window.location.protocol === 'file:';\n};\n\nvar svgCache = new Map();\nvar requestQueue = {};\n\nvar queueRequest = function queueRequest(url, callback) {\n  requestQueue[url] = requestQueue[url] || [];\n  requestQueue[url].push(callback);\n};\n\nvar processRequestQueue = function processRequestQueue(url) {\n  var _loop_1 = function _loop_1(i, len) {\n    setTimeout(function () {\n      if (Array.isArray(requestQueue[url])) {\n        var cacheValue = svgCache.get(url);\n        var callback = requestQueue[url][i];\n\n        if (cacheValue instanceof SVGSVGElement || cacheValue instanceof HTMLElement) {\n          callback(null, cloneSvg(cacheValue));\n        }\n\n        if (cacheValue instanceof Error) {\n          callback(cacheValue);\n        }\n\n        if (i === requestQueue[url].length - 1) {\n          delete requestQueue[url];\n        }\n      }\n    }, 0);\n  };\n\n  for (var i = 0, len = requestQueue[url].length; i < len; i++) {\n    _loop_1(i);\n  }\n};\n\nvar loadSvg = function loadSvg(url, callback) {\n  if (svgCache.has(url)) {\n    var cacheValue = svgCache.get(url);\n\n    if (cacheValue instanceof SVGSVGElement || cacheValue instanceof HTMLElement) {\n      callback(null, cloneSvg(cacheValue));\n      return;\n    }\n\n    if (cacheValue instanceof Error) {\n      callback(cacheValue);\n      return;\n    }\n\n    queueRequest(url, callback);\n    return;\n  }\n\n  svgCache.set(url, undefined);\n  queueRequest(url, callback);\n  var httpRequest = new XMLHttpRequest();\n\n  httpRequest.onreadystatechange = function () {\n    try {\n      if (httpRequest.readyState === 4) {\n        if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n          throw new Error(isLocal() ? 'Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver.' : 'Unable to load SVG file: ' + url);\n        }\n\n        if (httpRequest.status === 200 || isLocal() && httpRequest.status === 0) {\n          if (httpRequest.responseXML instanceof Document) {\n            if (httpRequest.responseXML.documentElement) {\n              svgCache.set(url, httpRequest.responseXML.documentElement);\n            }\n          }\n\n          processRequestQueue(url);\n        } else {\n          throw new Error('There was a problem injecting the SVG: ' + httpRequest.status + ' ' + httpRequest.statusText);\n        }\n      }\n    } catch (error) {\n      svgCache.set(url, error);\n      processRequestQueue(url);\n    }\n  };\n\n  httpRequest.open('GET', url);\n\n  if (httpRequest.overrideMimeType) {\n    httpRequest.overrideMimeType('text/xml');\n  }\n\n  httpRequest.send();\n};\n\nvar idCounter = 0;\n\nvar uniqueId = function uniqueId() {\n  return ++idCounter;\n};\n\nvar __spreadArrays = undefined && undefined.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nvar injectedElements = [];\nvar ranScripts = {};\nvar svgNamespace = 'http://www.w3.org/2000/svg';\nvar xlinkNamespace = 'http://www.w3.org/1999/xlink';\n\nvar injectElement = function injectElement(el, evalScripts, renumerateIRIElements, beforeEach, callback) {\n  var imgUrl = el.getAttribute('data-src') || el.getAttribute('src');\n\n  if (!imgUrl || !/\\.svg/i.test(imgUrl)) {\n    callback(new Error('Attempted to inject a file with a non-svg extension: ' + imgUrl));\n    return;\n  }\n\n  if (injectedElements.indexOf(el) !== -1) {\n    injectedElements.splice(injectedElements.indexOf(el), 1);\n    el = null;\n    return;\n  }\n\n  injectedElements.push(el);\n  el.setAttribute('src', '');\n  loadSvg(imgUrl, function (error, svg) {\n    if (!svg) {\n      injectedElements.splice(injectedElements.indexOf(el), 1);\n      el = null;\n      callback(error);\n      return;\n    }\n\n    var imgId = el.getAttribute('id');\n\n    if (imgId) {\n      svg.setAttribute('id', imgId);\n    }\n\n    var imgTitle = el.getAttribute('title');\n\n    if (imgTitle) {\n      svg.setAttribute('title', imgTitle);\n    }\n\n    var imgWidth = el.getAttribute('width');\n\n    if (imgWidth) {\n      svg.setAttribute('width', imgWidth);\n    }\n\n    var imgHeight = el.getAttribute('height');\n\n    if (imgHeight) {\n      svg.setAttribute('height', imgHeight);\n    }\n\n    var mergedClasses = Array.from(new Set(__spreadArrays((svg.getAttribute('class') || '').split(' '), ['injected-svg'], (el.getAttribute('class') || '').split(' ')))).join(' ').trim();\n    svg.setAttribute('class', mergedClasses);\n    var imgStyle = el.getAttribute('style');\n\n    if (imgStyle) {\n      svg.setAttribute('style', imgStyle);\n    }\n\n    svg.setAttribute('data-src', imgUrl);\n    var imgData = [].filter.call(el.attributes, function (at) {\n      return /^data-\\w[\\w-]*$/.test(at.name);\n    });\n    Array.prototype.forEach.call(imgData, function (dataAttr) {\n      if (dataAttr.name && dataAttr.value) {\n        svg.setAttribute(dataAttr.name, dataAttr.value);\n      }\n    });\n\n    if (renumerateIRIElements) {\n      var iriElementsAndProperties_1 = {\n        clipPath: ['clip-path'],\n        'color-profile': ['color-profile'],\n        cursor: ['cursor'],\n        filter: ['filter'],\n        linearGradient: ['fill', 'stroke'],\n        marker: ['marker', 'marker-start', 'marker-mid', 'marker-end'],\n        mask: ['mask'],\n        path: [],\n        pattern: ['fill', 'stroke'],\n        radialGradient: ['fill', 'stroke']\n      };\n      var element_1;\n      var elements_1;\n      var properties_1;\n      var currentId_1;\n      var newId_1;\n      Object.keys(iriElementsAndProperties_1).forEach(function (key) {\n        element_1 = key;\n        properties_1 = iriElementsAndProperties_1[key];\n        elements_1 = svg.querySelectorAll(element_1 + '[id]');\n\n        var _loop_1 = function _loop_1(a, elementsLen) {\n          currentId_1 = elements_1[a].id;\n          newId_1 = currentId_1 + '-' + uniqueId();\n          var referencingElements;\n          Array.prototype.forEach.call(properties_1, function (property) {\n            referencingElements = svg.querySelectorAll('[' + property + '*=\"' + currentId_1 + '\"]');\n\n            for (var b = 0, referencingElementLen = referencingElements.length; b < referencingElementLen; b++) {\n              var attrValue = referencingElements[b].getAttribute(property);\n\n              if (attrValue && !attrValue.match(new RegExp('url\\\\(#' + currentId_1 + '\\\\)'))) {\n                continue;\n              }\n\n              referencingElements[b].setAttribute(property, 'url(#' + newId_1 + ')');\n            }\n          });\n          var allLinks = svg.querySelectorAll('[*|href]');\n          var links = [];\n\n          for (var c = 0, allLinksLen = allLinks.length; c < allLinksLen; c++) {\n            var href = allLinks[c].getAttributeNS(xlinkNamespace, 'href');\n\n            if (href && href.toString() === '#' + elements_1[a].id) {\n              links.push(allLinks[c]);\n            }\n          }\n\n          for (var d = 0, linksLen = links.length; d < linksLen; d++) {\n            links[d].setAttributeNS(xlinkNamespace, 'href', '#' + newId_1);\n          }\n\n          elements_1[a].id = newId_1;\n        };\n\n        for (var a = 0, elementsLen = elements_1.length; a < elementsLen; a++) {\n          _loop_1(a);\n        }\n      });\n    }\n\n    svg.removeAttribute('xmlns:a');\n    var scripts = svg.querySelectorAll('script');\n    var scriptsToEval = [];\n    var script;\n    var scriptType;\n\n    for (var i = 0, scriptsLen = scripts.length; i < scriptsLen; i++) {\n      scriptType = scripts[i].getAttribute('type');\n\n      if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript' || scriptType === 'text/javascript') {\n        script = scripts[i].innerText || scripts[i].textContent;\n\n        if (script) {\n          scriptsToEval.push(script);\n        }\n\n        svg.removeChild(scripts[i]);\n      }\n    }\n\n    if (scriptsToEval.length > 0 && (evalScripts === 'always' || evalScripts === 'once' && !ranScripts[imgUrl])) {\n      for (var l = 0, scriptsToEvalLen = scriptsToEval.length; l < scriptsToEvalLen; l++) {\n        new Function(scriptsToEval[l])(window);\n      }\n\n      ranScripts[imgUrl] = true;\n    }\n\n    var styleTags = svg.querySelectorAll('style');\n    Array.prototype.forEach.call(styleTags, function (styleTag) {\n      styleTag.textContent += '';\n    });\n    svg.setAttribute('xmlns', svgNamespace);\n    svg.setAttribute('xmlns:xlink', xlinkNamespace);\n    beforeEach(svg);\n\n    if (el.parentNode) {\n      el.parentNode.replaceChild(svg, el);\n    }\n\n    injectedElements.splice(injectedElements.indexOf(el), 1);\n    el = null;\n    callback(null, svg);\n  });\n};\n\nvar EvalScripts;\n\n(function (EvalScripts) {\n  EvalScripts[\"Always\"] = \"always\";\n  EvalScripts[\"Once\"] = \"once\";\n  EvalScripts[\"Never\"] = \"never\";\n})(EvalScripts || (EvalScripts = {}));\n\nvar SVGInjector = function SVGInjector(elements, _a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.afterAll,\n      afterAll = _c === void 0 ? function () {\n    return undefined;\n  } : _c,\n      _d = _b.afterEach,\n      afterEach = _d === void 0 ? function () {\n    return undefined;\n  } : _d,\n      _e = _b.beforeEach,\n      beforeEach = _e === void 0 ? function () {\n    return undefined;\n  } : _e,\n      _f = _b.evalScripts,\n      evalScripts = _f === void 0 ? EvalScripts.Never : _f,\n      _g = _b.renumerateIRIElements,\n      renumerateIRIElements = _g === void 0 ? true : _g;\n\n  if (elements && 'length' in elements) {\n    var elementsLoaded_1 = 0;\n\n    for (var i = 0, j = elements.length; i < j; i++) {\n      injectElement(elements[i], evalScripts, renumerateIRIElements, beforeEach, function (error, svg) {\n        afterEach(error, svg);\n\n        if (elements && 'length' in elements && elements.length === ++elementsLoaded_1) {\n          afterAll(elementsLoaded_1);\n        }\n      });\n    }\n  } else if (elements) {\n    injectElement(elements, evalScripts, renumerateIRIElements, beforeEach, function (error, svg) {\n      afterEach(error, svg);\n      afterAll(1);\n      elements = null;\n    });\n  } else {\n    afterAll(0);\n  }\n};\n\nexport { EvalScripts, SVGInjector };","map":{"version":3,"sources":["../src/clone-svg.ts","../src/is-local.ts","../src/svg-cache.ts","../src/request-queue.ts","../src/load-svg.ts","../src/unique-id.ts","../src/inject-element.ts","../src/types.ts","../src/svg-injector.ts"],"names":["cloneSvg","sourceSvg","isLocal","window","svgCache","requestQueue","queueRequest","processRequestQueue","i","len","setTimeout","Array","cacheValue","callback","loadSvg","httpRequest","idCounter","uniqueId","injectedElements","ranScripts","svgNamespace","xlinkNamespace","injectElement","imgUrl","el","imgId","svg","imgTitle","imgWidth","imgHeight","mergedClasses","imgStyle","imgData","at","dataAttr","iriElementsAndProperties_1","clipPath","cursor","filter","linearGradient","marker","mask","path","pattern","radialGradient","Object","element_1","properties_1","elements_1","a","elementsLen","currentId_1","newId_1","referencingElements","b","referencingElementLen","attrValue","allLinks","links","c","allLinksLen","href","d","linksLen","scripts","scriptsToEval","scriptsLen","scriptType","script","evalScripts","l","scriptsToEvalLen","styleTags","styleTag","beforeEach","EvalScripts","SVGInjector","_b","_c","_d","_e","_f","_g","elements","elementsLoaded_1","j","afterEach","afterAll"],"mappings":"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","sourcesContent":["const cloneSvg = (sourceSvg: HTMLElement | SVGSVGElement) =>\n  sourceSvg.cloneNode(true) as Element\n\nexport default cloneSvg\n","const isLocal = () => window.location.protocol === 'file:'\n\nexport default isLocal\n","const svgCache = new Map<\n  string,\n  HTMLElement | SVGSVGElement | Error | undefined\n>()\n\nexport default svgCache\n","import cloneSvg from './clone-svg'\nimport svgCache from './svg-cache'\nimport { Errback } from './types'\n\nlet requestQueue: { [key: string]: Errback[] } = {}\n\nexport const clear = () => {\n  requestQueue = {}\n}\n\nexport const queueRequest = (url: string, callback: Errback) => {\n  requestQueue[url] = requestQueue[url] || []\n  requestQueue[url].push(callback)\n}\n\nexport const processRequestQueue = (url: string) => {\n  for (let i = 0, len = requestQueue[url].length; i < len; i++) {\n    // Make these calls async so we avoid blocking the page/renderer.\n    setTimeout(() => {\n      /* istanbul ignore else */\n      if (Array.isArray(requestQueue[url])) {\n        const cacheValue = svgCache.get(url)\n        const callback = requestQueue[url][i]\n\n        /* istanbul ignore else */\n        if (\n          cacheValue instanceof SVGSVGElement ||\n          cacheValue instanceof HTMLElement\n        ) {\n          callback(null, cloneSvg(cacheValue))\n        }\n\n        /* istanbul ignore else */\n        if (cacheValue instanceof Error) {\n          callback(cacheValue)\n        }\n\n        /* istanbul ignore else */\n        if (i === requestQueue[url].length - 1) {\n          delete requestQueue[url]\n        }\n      }\n    }, 0)\n  }\n}\n","import cloneSvg from './clone-svg'\nimport isLocal from './is-local'\nimport { processRequestQueue, queueRequest } from './request-queue'\nimport svgCache from './svg-cache'\nimport { Errback } from './types'\n\nconst loadSvg = (url: string, callback: Errback) => {\n  if (svgCache.has(url)) {\n    const cacheValue = svgCache.get(url)\n\n    if (\n      cacheValue instanceof SVGSVGElement ||\n      cacheValue instanceof HTMLElement\n    ) {\n      callback(null, cloneSvg(cacheValue))\n      return\n    }\n\n    if (cacheValue instanceof Error) {\n      callback(cacheValue)\n      return\n    }\n\n    queueRequest(url, callback)\n\n    return\n  }\n\n  // Seed the cache to indicate we are loading this URL.\n  svgCache.set(url, undefined)\n  queueRequest(url, callback)\n\n  const httpRequest = new XMLHttpRequest()\n\n  httpRequest.onreadystatechange = () => {\n    try {\n      if (httpRequest.readyState === 4) {\n        if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n          throw new Error(\n            isLocal()\n              ? 'Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver.'\n              : 'Unable to load SVG file: ' + url\n          )\n        }\n\n        if (\n          httpRequest.status === 200 ||\n          (isLocal() && httpRequest.status === 0)\n        ) {\n          /* istanbul ignore else */\n          if (httpRequest.responseXML instanceof Document) {\n            /* istanbul ignore else */\n            if (httpRequest.responseXML.documentElement) {\n              svgCache.set(url, httpRequest.responseXML.documentElement)\n            }\n          }\n          processRequestQueue(url)\n        } else {\n          throw new Error(\n            'There was a problem injecting the SVG: ' +\n              httpRequest.status +\n              ' ' +\n              httpRequest.statusText\n          )\n        }\n      }\n    } catch (error) {\n      svgCache.set(url, error)\n      processRequestQueue(url)\n    }\n  }\n\n  httpRequest.open('GET', url)\n\n  // Treat and parse the response as XML, even if the server sends us a\n  // different mimetype.\n  /* istanbul ignore else */\n  if (httpRequest.overrideMimeType) {\n    httpRequest.overrideMimeType('text/xml')\n  }\n\n  httpRequest.send()\n}\n\nexport default loadSvg\n","let idCounter = 0\nconst uniqueId = () => ++idCounter\nexport default uniqueId\n","import loadSvg from './load-svg'\nimport { BeforeEach, Errback, EvalScripts } from './types'\nimport uniqueId from './unique-id'\n\ntype ElementType = Element | HTMLElement | null\n\nconst injectedElements: ElementType[] = []\nconst ranScripts: { [key: string]: boolean } = {}\nconst svgNamespace = 'http://www.w3.org/2000/svg'\nconst xlinkNamespace = 'http://www.w3.org/1999/xlink'\n\nconst injectElement = (\n  el: NonNullable<ElementType>,\n  evalScripts: EvalScripts,\n  renumerateIRIElements: boolean,\n  beforeEach: BeforeEach,\n  callback: Errback\n) => {\n  const imgUrl = el.getAttribute('data-src') || el.getAttribute('src')\n\n  /* istanbul ignore else */\n  if (!imgUrl || !/\\.svg/i.test(imgUrl)) {\n    callback(\n      new Error(\n        'Attempted to inject a file with a non-svg extension: ' + imgUrl\n      )\n    )\n    return\n  }\n\n  // Make sure we aren't already in the process of injecting this element to\n  // avoid a race condition if multiple injections for the same element are run.\n  // :NOTE: Using indexOf() only _after_ we check for SVG support and bail, so\n  // no need for IE8 indexOf() polyfill.\n  /* istanbul ignore else */\n  if (injectedElements.indexOf(el) !== -1) {\n    // TODO: Extract.\n    injectedElements.splice(injectedElements.indexOf(el), 1)\n    ;(el as ElementType) = null\n    return\n  }\n\n  // Remember the request to inject this element, in case other injection calls\n  // are also trying to replace this element before we finish.\n  injectedElements.push(el)\n\n  // Try to avoid loading the orginal image src if possible.\n  el.setAttribute('src', '')\n\n  loadSvg(imgUrl, (error, svg) => {\n    /* istanbul ignore else */\n    if (!svg) {\n      // TODO: Extract.\n      injectedElements.splice(injectedElements.indexOf(el), 1)\n      ;(el as ElementType) = null\n      callback(error)\n      return\n    }\n\n    const imgId = el.getAttribute('id')\n    /* istanbul ignore else */\n    if (imgId) {\n      svg.setAttribute('id', imgId)\n    }\n\n    const imgTitle = el.getAttribute('title')\n    /* istanbul ignore else */\n    if (imgTitle) {\n      svg.setAttribute('title', imgTitle)\n    }\n\n    const imgWidth = el.getAttribute('width')\n    /* istanbul ignore else */\n    if (imgWidth) {\n      svg.setAttribute('width', imgWidth)\n    }\n\n    const imgHeight = el.getAttribute('height')\n    /* istanbul ignore else */\n    if (imgHeight) {\n      svg.setAttribute('height', imgHeight)\n    }\n\n    const mergedClasses = Array.from(\n      new Set([\n        ...(svg.getAttribute('class') || '').split(' '),\n        'injected-svg',\n        ...(el.getAttribute('class') || '').split(' ')\n      ])\n    )\n      .join(' ')\n      .trim()\n    svg.setAttribute('class', mergedClasses)\n\n    const imgStyle = el.getAttribute('style')\n    /* istanbul ignore else */\n    if (imgStyle) {\n      svg.setAttribute('style', imgStyle)\n    }\n\n    svg.setAttribute('data-src', imgUrl)\n\n    // Copy all the data elements to the svg.\n    const imgData = [].filter.call(el.attributes, (at: Attr) => {\n      return /^data-\\w[\\w-]*$/.test(at.name)\n    })\n\n    Array.prototype.forEach.call(imgData, (dataAttr: Attr) => {\n      /* istanbul ignore else */\n      if (dataAttr.name && dataAttr.value) {\n        svg.setAttribute(dataAttr.name, dataAttr.value)\n      }\n    })\n\n    /* istanbul ignore else */\n    if (renumerateIRIElements) {\n      // Make sure any internally referenced clipPath ids and their clip-path\n      // references are unique.\n      //\n      // This addresses the issue of having multiple instances of the same SVG\n      // on a page and only the first clipPath id is referenced.\n      //\n      // Browsers often shortcut the SVG Spec and don't use clipPaths contained\n      // in parent elements that are hidden, so if you hide the first SVG\n      // instance on the page, then all other instances lose their clipping.\n      // Reference: https://bugzilla.mozilla.org/show_bug.cgi?id=376027\n\n      // Handle all defs elements that have iri capable attributes as defined by\n      // w3c: http://www.w3.org/TR/SVG/linking.html#processingIRI. Mapping IRI\n      // addressable elements to the properties that can reference them.\n      const iriElementsAndProperties: { [key: string]: string[] } = {\n        clipPath: ['clip-path'],\n        'color-profile': ['color-profile'],\n        cursor: ['cursor'],\n        filter: ['filter'],\n        linearGradient: ['fill', 'stroke'],\n        marker: ['marker', 'marker-start', 'marker-mid', 'marker-end'],\n        mask: ['mask'],\n        path: [],\n        pattern: ['fill', 'stroke'],\n        radialGradient: ['fill', 'stroke']\n      }\n\n      let element\n      let elements\n      let properties\n      let currentId: string\n      let newId: string\n\n      Object.keys(iriElementsAndProperties).forEach(key => {\n        element = key\n        properties = iriElementsAndProperties[key]\n\n        elements = svg.querySelectorAll(element + '[id]')\n        for (let a = 0, elementsLen = elements.length; a < elementsLen; a++) {\n          currentId = elements[a].id\n          newId = currentId + '-' + uniqueId()\n\n          // All of the properties that can reference this element type.\n          let referencingElements\n          Array.prototype.forEach.call(properties, (property: string) => {\n            // :NOTE: using a substring match attr selector here to deal with IE\n            // \"adding extra quotes in url() attrs\".\n            referencingElements = svg.querySelectorAll(\n              '[' + property + '*=\"' + currentId + '\"]'\n            )\n            for (\n              let b = 0, referencingElementLen = referencingElements.length;\n              b < referencingElementLen;\n              b++\n            ) {\n              const attrValue: string | null = referencingElements[\n                b\n              ].getAttribute(property)\n              if (\n                attrValue &&\n                !attrValue.match(new RegExp('url\\\\(#' + currentId + '\\\\)'))\n              ) {\n                continue\n              }\n              referencingElements[b].setAttribute(\n                property,\n                'url(#' + newId + ')'\n              )\n            }\n          })\n\n          const allLinks = svg.querySelectorAll('[*|href]')\n          const links = []\n          for (let c = 0, allLinksLen = allLinks.length; c < allLinksLen; c++) {\n            const href = allLinks[c].getAttributeNS(xlinkNamespace, 'href')\n            /* istanbul ignore else */\n            if (href && href.toString() === '#' + elements[a].id) {\n              links.push(allLinks[c])\n            }\n          }\n          for (let d = 0, linksLen = links.length; d < linksLen; d++) {\n            links[d].setAttributeNS(xlinkNamespace, 'href', '#' + newId)\n          }\n\n          elements[a].id = newId\n        }\n      })\n    }\n\n    // Remove any unwanted/invalid namespaces that might have been added by SVG\n    // editing tools.\n    svg.removeAttribute('xmlns:a')\n\n    // Post page load injected SVGs don't automatically have their script\n    // elements run, so we'll need to make that happen, if requested.\n\n    // Find then prune the scripts.\n    const scripts = svg.querySelectorAll('script')\n    const scriptsToEval: string[] = []\n    let script\n    let scriptType\n\n    for (let i = 0, scriptsLen = scripts.length; i < scriptsLen; i++) {\n      scriptType = scripts[i].getAttribute('type')\n\n      // Only process javascript types. SVG defaults to 'application/ecmascript'\n      // for unset types.\n      /* istanbul ignore else */\n      if (\n        !scriptType ||\n        scriptType === 'application/ecmascript' ||\n        scriptType === 'application/javascript' ||\n        scriptType === 'text/javascript'\n      ) {\n        // innerText for IE, textContent for other browsers.\n        script = scripts[i].innerText || scripts[i].textContent\n\n        // Stash.\n        /* istanbul ignore else */\n        if (script) {\n          scriptsToEval.push(script)\n        }\n\n        // Tidy up and remove the script element since we don't need it anymore.\n        svg.removeChild(scripts[i])\n      }\n    }\n\n    // Run/Eval the scripts if needed.\n    /* istanbul ignore else */\n    if (\n      scriptsToEval.length > 0 &&\n      (evalScripts === 'always' ||\n        (evalScripts === 'once' && !ranScripts[imgUrl]))\n    ) {\n      for (\n        let l = 0, scriptsToEvalLen = scriptsToEval.length;\n        l < scriptsToEvalLen;\n        l++\n      ) {\n        // :NOTE: Yup, this is a form of eval, but it is being used to eval code\n        // the caller has explictely asked to be loaded, and the code is in a\n        // caller defined SVG file... not raw user input.\n        //\n        // Also, the code is evaluated in a closure and not in the global scope.\n        // If you need to put something in global scope, use 'window'.\n        new Function(scriptsToEval[l])(window)\n      }\n\n      // Remember we already ran scripts for this svg.\n      ranScripts[imgUrl] = true\n    }\n\n    // :WORKAROUND: IE doesn't evaluate <style> tags in SVGs that are\n    // dynamically added to the page. This trick will trigger IE to read and use\n    // any existing SVG <style> tags.\n    //\n    // Reference: https://github.com/iconic/SVGInjector/issues/23.\n    const styleTags = svg.querySelectorAll('style')\n    Array.prototype.forEach.call(styleTags, (styleTag: HTMLStyleElement) => {\n      styleTag.textContent += ''\n    })\n\n    svg.setAttribute('xmlns', svgNamespace)\n    svg.setAttribute('xmlns:xlink', xlinkNamespace)\n\n    beforeEach(svg)\n\n    // Replace the image with the svg.\n    /* istanbul ignore else */\n    if (el.parentNode) {\n      el.parentNode.replaceChild(svg, el)\n    }\n\n    // Now that we no longer need it, drop references to the original element so\n    // it can be GC'd.\n    // TODO: Extract\n    injectedElements.splice(injectedElements.indexOf(el), 1)\n    ;(el as ElementType) = null\n\n    callback(null, svg)\n  })\n}\n\nexport default injectElement\n","/* istanbul ignore file */\n\nexport type AfterAll = (elementsLoaded: number) => void\n\nexport type BeforeEach = (svg: Element) => void\n\nexport type Errback = (error: Error | null, svg?: Element) => void\n\nexport enum EvalScripts {\n  Always = 'always',\n  Once = 'once',\n  Never = 'never'\n}\n","import injectElement from './inject-element'\nimport { AfterAll, BeforeEach, Errback, EvalScripts } from './types'\n\ntype Elements = HTMLCollectionOf<Element> | NodeListOf<Element> | Element | null\n\ninterface OptionalArgs {\n  afterAll?: AfterAll\n  afterEach?: Errback\n  beforeEach?: BeforeEach\n  evalScripts?: EvalScripts\n  renumerateIRIElements?: boolean\n}\n\nconst SVGInjector = (\n  elements: Elements,\n  {\n    afterAll = () => undefined,\n    afterEach = () => undefined,\n    beforeEach = () => undefined,\n    evalScripts = EvalScripts.Never,\n    renumerateIRIElements = true\n  }: OptionalArgs = {}\n) => {\n  if (elements && 'length' in elements) {\n    let elementsLoaded = 0\n    for (let i = 0, j = elements.length; i < j; i++) {\n      injectElement(\n        elements[i],\n        evalScripts,\n        renumerateIRIElements,\n        beforeEach,\n        (error, svg) => {\n          afterEach(error, svg)\n          if (\n            elements &&\n            'length' in elements &&\n            elements.length === ++elementsLoaded\n          ) {\n            afterAll(elementsLoaded)\n          }\n        }\n      )\n    }\n  } else if (elements) {\n    injectElement(\n      elements,\n      evalScripts,\n      renumerateIRIElements,\n      beforeEach,\n      (error, svg) => {\n        afterEach(error, svg)\n        afterAll(1)\n        elements = null\n      }\n    )\n  } else {\n    afterAll(0)\n  }\n}\n\nexport default SVGInjector\n"]},"metadata":{},"sourceType":"module"}