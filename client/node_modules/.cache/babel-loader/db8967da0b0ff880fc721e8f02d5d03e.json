{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/project/client/src/app/modules/ECommerce/pages/products/product-remarks/remark-edit-dialog/RemarkEditDialog.js\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../../../_redux/remarks/remarksActions\";\nimport { RemarkEditDialogHeader } from \"./RemarkEditDialogHeader\";\nimport { RemarkEditForm } from \"./RemarkEditForm\";\nimport { useRemarksUIContext } from \"../RemarksUIContext\";\n\nfunction getFormattedDate(date) {\n  if (typeof date === \"string\") {\n    return date;\n  }\n\n  var year = date.getFullYear();\n  var month = (1 + date.getMonth()).toString();\n  month = month.length > 1 ? month : \"0\" + month;\n  var day = date.getDate().toString();\n  day = day.length > 1 ? day : \"0\" + day;\n  return month + \"/\" + day + \"/\" + year;\n}\n\nexport function RemarkEditDialog() {\n  // Remarks UI Context\n  var remarksUIContext = useRemarksUIContext();\n  var remarksUIProps = useMemo(function () {\n    return {\n      id: remarksUIContext.selectedId,\n      setIds: remarksUIContext.setIds,\n      productId: remarksUIContext.productId,\n      queryParams: remarksUIContext.queryParams,\n      showEditRemarkDialog: remarksUIContext.showEditRemarkDialog,\n      closeEditRemarkDialog: remarksUIContext.closeEditRemarkDialog,\n      initRemark: remarksUIContext.initRemark\n    };\n  }, [remarksUIContext]); // Remarks Redux state\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return {\n      actionsLoading: state.remarks.actionsLoading,\n      remarkForEdit: state.remarks.remarkForEdit\n    };\n  }, shallowEqual),\n      actionsLoading = _useSelector.actionsLoading,\n      remarkForEdit = _useSelector.remarkForEdit;\n\n  useEffect(function () {\n    // server request for getting remark by seleted id\n    dispatch(actions.fetchRemark(remarksUIProps.id));\n  }, [remarksUIProps.id, dispatch]);\n\n  var saveRemark = function saveRemark(remark) {\n    remark.dueDate = getFormattedDate(remark.dueDate);\n\n    if (!remarksUIProps.id) {\n      // server request for creating remarks\n      dispatch(actions.createRemark(remark)).then(function () {\n        // refresh list after deletion\n        dispatch(actions.fetchRemarks(remarksUIProps.queryParams, remarksUIProps.productId)).then(function () {\n          // clear selections list\n          remarksUIProps.setIds([]); // closing edit modal\n\n          remarksUIProps.closeEditRemarkDialog();\n        });\n      });\n    } else {\n      // server request for updating remarks\n      dispatch(actions.updateRemark(remark)).then(function () {\n        // refresh list after deletion\n        dispatch( // refresh list after deletion\n        actions.fetchRemarks(remarksUIProps.queryParams, remarksUIProps.productId)).then(function () {\n          // clear selections list\n          remarksUIProps.setIds([]); // closing edit modal\n\n          remarksUIProps.closeEditRemarkDialog();\n        });\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    show: remarksUIProps.showEditRemarkDialog,\n    onHide: remarksUIProps.closeEditRemarkDialog,\n    \"aria-labelledby\": \"example-modal-sizes-title-lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(RemarkEditDialogHeader, {\n    id: remarksUIProps.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(RemarkEditForm, {\n    saveRemark: saveRemark,\n    actionsLoading: actionsLoading,\n    remark: remarkForEdit || remarksUIProps.initRemark,\n    onHide: remarksUIProps.closeEditRemarkDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/project/client/src/app/modules/ECommerce/pages/products/product-remarks/remark-edit-dialog/RemarkEditDialog.js"],"names":["React","useEffect","useMemo","Modal","shallowEqual","useDispatch","useSelector","actions","RemarkEditDialogHeader","RemarkEditForm","useRemarksUIContext","getFormattedDate","date","year","getFullYear","month","getMonth","toString","length","day","getDate","RemarkEditDialog","remarksUIContext","remarksUIProps","id","selectedId","setIds","productId","queryParams","showEditRemarkDialog","closeEditRemarkDialog","initRemark","dispatch","state","actionsLoading","remarks","remarkForEdit","fetchRemark","saveRemark","remark","dueDate","createRemark","then","fetchRemarks","updateRemark"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport * as actions from \"../../../../_redux/remarks/remarksActions\";\r\nimport { RemarkEditDialogHeader } from \"./RemarkEditDialogHeader\";\r\nimport { RemarkEditForm } from \"./RemarkEditForm\";\r\nimport { useRemarksUIContext } from \"../RemarksUIContext\";\r\n\r\nfunction getFormattedDate(date) {\r\n  if (typeof date === \"string\") {\r\n    return date;\r\n  }\r\n\r\n  var year = date.getFullYear();\r\n\r\n  var month = (1 + date.getMonth()).toString();\r\n  month = month.length > 1 ? month : \"0\" + month;\r\n\r\n  var day = date.getDate().toString();\r\n  day = day.length > 1 ? day : \"0\" + day;\r\n\r\n  return month + \"/\" + day + \"/\" + year;\r\n}\r\n\r\nexport function RemarkEditDialog() {\r\n  // Remarks UI Context\r\n  const remarksUIContext = useRemarksUIContext();\r\n  const remarksUIProps = useMemo(() => {\r\n    return {\r\n      id: remarksUIContext.selectedId,\r\n      setIds: remarksUIContext.setIds,\r\n      productId: remarksUIContext.productId,\r\n      queryParams: remarksUIContext.queryParams,\r\n      showEditRemarkDialog: remarksUIContext.showEditRemarkDialog,\r\n      closeEditRemarkDialog: remarksUIContext.closeEditRemarkDialog,\r\n      initRemark: remarksUIContext.initRemark,\r\n    };\r\n  }, [remarksUIContext]);\r\n\r\n  // Remarks Redux state\r\n  const dispatch = useDispatch();\r\n  const { actionsLoading, remarkForEdit } = useSelector(\r\n    (state) => ({\r\n      actionsLoading: state.remarks.actionsLoading,\r\n      remarkForEdit: state.remarks.remarkForEdit,\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  useEffect(() => {\r\n    // server request for getting remark by seleted id\r\n    dispatch(actions.fetchRemark(remarksUIProps.id));\r\n  }, [remarksUIProps.id, dispatch]);\r\n\r\n  const saveRemark = (remark) => {\r\n    remark.dueDate = getFormattedDate(remark.dueDate);\r\n    if (!remarksUIProps.id) {\r\n      // server request for creating remarks\r\n      dispatch(actions.createRemark(remark)).then(() => {\r\n        // refresh list after deletion\r\n        dispatch(\r\n          actions.fetchRemarks(\r\n            remarksUIProps.queryParams,\r\n            remarksUIProps.productId\r\n          )\r\n        ).then(() => {\r\n          // clear selections list\r\n          remarksUIProps.setIds([]);\r\n          // closing edit modal\r\n          remarksUIProps.closeEditRemarkDialog();\r\n        });\r\n      });\r\n    } else {\r\n      // server request for updating remarks\r\n      dispatch(actions.updateRemark(remark)).then(() => {\r\n        // refresh list after deletion\r\n        dispatch(\r\n          // refresh list after deletion\r\n          actions.fetchRemarks(\r\n            remarksUIProps.queryParams,\r\n            remarksUIProps.productId\r\n          )\r\n        ).then(() => {\r\n          // clear selections list\r\n          remarksUIProps.setIds([]);\r\n          // closing edit modal\r\n          remarksUIProps.closeEditRemarkDialog();\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={remarksUIProps.showEditRemarkDialog}\r\n      onHide={remarksUIProps.closeEditRemarkDialog}\r\n      aria-labelledby=\"example-modal-sizes-title-lg\"\r\n    >\r\n      <RemarkEditDialogHeader id={remarksUIProps.id} />\r\n      <RemarkEditForm\r\n        saveRemark={saveRemark}\r\n        actionsLoading={actionsLoading}\r\n        remark={remarkForEdit || remarksUIProps.initRemark}\r\n        onHide={remarksUIProps.closeEditRemarkDialog}\r\n      />\r\n    </Modal>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}