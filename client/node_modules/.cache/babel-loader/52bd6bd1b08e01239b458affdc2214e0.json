{"ast":null,"code":"import _toConsumableArray from \"/Applications/MAMP/htdocs/project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Applications/MAMP/htdocs/project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { LOGIN_URL, ME_URL, REGISTER_URL, REQUEST_PASSWORD_URL } from \"../_redux/authCrud\";\nimport userTableMock from \"./userTableMock\";\nexport default function mockAuth(mock) {\n  mock.onPost(LOGIN_URL).reply(function (_ref) {\n    var data = _ref.data;\n\n    var _JSON$parse = JSON.parse(data),\n        email = _JSON$parse.email,\n        password = _JSON$parse.password;\n\n    if (email && password) {\n      var user = userTableMock.find(function (x) {\n        return x.email.toLowerCase() === email.toLowerCase() && x.password === password;\n      });\n\n      if (user) {\n        return [200, _objectSpread(_objectSpread({}, user), {}, {\n          password: undefined\n        })];\n      }\n    }\n\n    return [400];\n  });\n  mock.onPost(REGISTER_URL).reply(function (_ref2) {\n    var data = _ref2.data;\n\n    var _JSON$parse2 = JSON.parse(data),\n        email = _JSON$parse2.email,\n        fullname = _JSON$parse2.fullname,\n        username = _JSON$parse2.username,\n        password = _JSON$parse2.password;\n\n    if (email && fullname && username && password) {\n      var user = {\n        id: generateUserId(),\n        email: email,\n        fullname: fullname,\n        username: username,\n        password: password,\n        roles: [2],\n        // Manager\n        accessToken: \"access-token-\" + Math.random(),\n        refreshToken: \"access-token-\" + Math.random(),\n        pic: process.env.PUBLIC_URL + \"/media/users/default.jpg\"\n      };\n      userTableMock.push(user);\n      return [200, _objectSpread(_objectSpread({}, user), {}, {\n        password: undefined\n      })];\n    }\n\n    return [400];\n  });\n  mock.onPost(REQUEST_PASSWORD_URL).reply(function (_ref3) {\n    var data = _ref3.data;\n\n    var _JSON$parse3 = JSON.parse(data),\n        email = _JSON$parse3.email;\n\n    if (email) {\n      var user = userTableMock.find(function (x) {\n        return x.email.toLowerCase() === email.toLowerCase();\n      });\n\n      if (user) {\n        user.password = undefined;\n        return [200, _objectSpread(_objectSpread({}, user), {}, {\n          password: undefined\n        })];\n      }\n    }\n\n    return [400];\n  });\n  mock.onGet(ME_URL).reply(function (_ref4) {\n    var Authorization = _ref4.headers.Authorization;\n    var accessToken = Authorization && Authorization.startsWith(\"Bearer \") && Authorization.slice(\"Bearer \".length);\n\n    if (accessToken) {\n      var user = userTableMock.find(function (x) {\n        return x.accessToken === accessToken;\n      });\n\n      if (user) {\n        return [200, _objectSpread(_objectSpread({}, user), {}, {\n          password: undefined\n        })];\n      }\n    }\n\n    return [401];\n  });\n\n  function generateUserId() {\n    var ids = userTableMock.map(function (el) {\n      return el.id;\n    });\n    var maxId = Math.max.apply(Math, _toConsumableArray(ids));\n    return maxId + 1;\n  }\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/project/client/src/app/modules/Auth/__mocks__/mockAuth.js"],"names":["LOGIN_URL","ME_URL","REGISTER_URL","REQUEST_PASSWORD_URL","userTableMock","mockAuth","mock","onPost","reply","data","JSON","parse","email","password","user","find","x","toLowerCase","undefined","fullname","username","id","generateUserId","roles","accessToken","Math","random","refreshToken","pic","process","env","PUBLIC_URL","push","onGet","Authorization","headers","startsWith","slice","length","ids","map","el","maxId","max"],"mappings":"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","sourcesContent":["import {\n  LOGIN_URL,\n  ME_URL,\n  REGISTER_URL,\n  REQUEST_PASSWORD_URL\n} from \"../_redux/authCrud\";\nimport userTableMock from \"./userTableMock\";\n\nexport default function mockAuth(mock) {\n  mock.onPost(LOGIN_URL).reply(({ data }) => {\n    const { email, password } = JSON.parse(data);\n\n    if (email && password) {\n      const user = userTableMock.find(\n        x =>\n          x.email.toLowerCase() === email.toLowerCase() &&\n          x.password === password\n      );\n\n      if (user) {\n        return [200, { ...user, password: undefined }];\n      }\n    }\n\n    return [400];\n  });\n\n  mock.onPost(REGISTER_URL).reply(({ data }) => {\n    const { email, fullname, username, password } = JSON.parse(data);\n\n    if (email && fullname && username && password) {\n      const user = {\n        id: generateUserId(),\n        email,\n        fullname,\n        username,\n        password,\n        roles: [2], // Manager\n        accessToken: \"access-token-\" + Math.random(),\n        refreshToken: \"access-token-\" + Math.random(),\n        pic: process.env.PUBLIC_URL + \"/media/users/default.jpg\"\n      };\n\n      userTableMock.push(user);\n\n      return [200, { ...user, password: undefined }];\n    }\n\n    return [400];\n  });\n\n  mock.onPost(REQUEST_PASSWORD_URL).reply(({ data }) => {\n    const { email } = JSON.parse(data);\n\n    if (email) {\n      const user = userTableMock.find(\n        x => x.email.toLowerCase() === email.toLowerCase()\n      );\n\n      if (user) {\n        user.password = undefined;\n\n        return [200, { ...user, password: undefined }];\n      }\n    }\n\n    return [400];\n  });\n\n  mock.onGet(ME_URL).reply(({ headers: { Authorization } }) => {\n    const accessToken =\n      Authorization &&\n      Authorization.startsWith(\"Bearer \") &&\n      Authorization.slice(\"Bearer \".length);\n\n    if (accessToken) {\n      const user = userTableMock.find(x => x.accessToken === accessToken);\n\n      if (user) {\n        return [200, { ...user, password: undefined }];\n      }\n    }\n\n    return [401];\n  });\n\n  function generateUserId() {\n    const ids = userTableMock.map(el => el.id);\n    const maxId = Math.max(...ids);\n    return maxId + 1;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}